// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: messages.proto
// Protobuf Java Version: 4.28.3

package com.sparrowwallet.lark.trezor.generated;

public final class TrezorMessage {
  private TrezorMessage() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 28,
      /* patch= */ 3,
      /* suffix= */ "",
      TrezorMessage.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * *
   * Mapping between Trezor wire identifier (uint) and a protobuf message
   * </pre>
   *
   * Protobuf enum {@code hw.trezor.messages.MessageType}
   */
  public enum MessageType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Management
     * </pre>
     *
     * <code>MessageType_Initialize = 0 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_Initialize(0),
    /**
     * <code>MessageType_Ping = 1 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_Ping(1),
    /**
     * <code>MessageType_Success = 2 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.wire_debug_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_Success(2),
    /**
     * <code>MessageType_Failure = 3 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.wire_debug_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_Failure(3),
    /**
     * <code>MessageType_ChangePin = 4 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_ChangePin(4),
    /**
     * <code>MessageType_WipeDevice = 5 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_WipeDevice(5),
    /**
     * <code>MessageType_GetEntropy = 9 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_GetEntropy(9),
    /**
     * <code>MessageType_Entropy = 10 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_Entropy(10),
    /**
     * <code>MessageType_LoadDevice = 13 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_LoadDevice(13),
    /**
     * <code>MessageType_ResetDevice = 14 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_ResetDevice(14),
    /**
     * <code>MessageType_SetBusy = 16 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_SetBusy(16),
    /**
     * <code>MessageType_Features = 17 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_Features(17),
    /**
     * <code>MessageType_PinMatrixRequest = 18 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_PinMatrixRequest(18),
    /**
     * <code>MessageType_PinMatrixAck = 19 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_PinMatrixAck(19),
    /**
     * <code>MessageType_Cancel = 20 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_Cancel(20),
    /**
     * <code>MessageType_LockDevice = 24 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_LockDevice(24),
    /**
     * <code>MessageType_ApplySettings = 25 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_ApplySettings(25),
    /**
     * <code>MessageType_ButtonRequest = 26 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_ButtonRequest(26),
    /**
     * <code>MessageType_ButtonAck = 27 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_ButtonAck(27),
    /**
     * <code>MessageType_ApplyFlags = 28 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_ApplyFlags(28),
    /**
     * <code>MessageType_GetNonce = 31 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_GetNonce(31),
    /**
     * <code>MessageType_Nonce = 33 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_Nonce(33),
    /**
     * <code>MessageType_BackupDevice = 34 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_BackupDevice(34),
    /**
     * <code>MessageType_EntropyRequest = 35 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_EntropyRequest(35),
    /**
     * <code>MessageType_EntropyAck = 36 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_EntropyAck(36),
    /**
     * <code>MessageType_PassphraseRequest = 41 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_PassphraseRequest(41),
    /**
     * <code>MessageType_PassphraseAck = 42 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_PassphraseAck(42),
    /**
     * <code>MessageType_RecoveryDevice = 45 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_RecoveryDevice(45),
    /**
     * <code>MessageType_WordRequest = 46 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_WordRequest(46),
    /**
     * <code>MessageType_WordAck = 47 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_WordAck(47),
    /**
     * <code>MessageType_GetFeatures = 55 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_GetFeatures(55),
    /**
     * <code>MessageType_SdProtect = 79 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_SdProtect(79),
    /**
     * <code>MessageType_ChangeWipeCode = 82 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_ChangeWipeCode(82),
    /**
     * <code>MessageType_EndSession = 83 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_EndSession(83),
    /**
     * <code>MessageType_DoPreauthorized = 84 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_DoPreauthorized(84),
    /**
     * <code>MessageType_PreauthorizedRequest = 85 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_PreauthorizedRequest(85),
    /**
     * <code>MessageType_CancelAuthorization = 86 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_CancelAuthorization(86),
    /**
     * <code>MessageType_RebootToBootloader = 87 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_RebootToBootloader(87),
    /**
     * <code>MessageType_GetFirmwareHash = 88 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_GetFirmwareHash(88),
    /**
     * <code>MessageType_FirmwareHash = 89 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_FirmwareHash(89),
    /**
     * <code>MessageType_UnlockPath = 93 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_UnlockPath(93),
    /**
     * <code>MessageType_UnlockedPathRequest = 94 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_UnlockedPathRequest(94),
    /**
     * <code>MessageType_ShowDeviceTutorial = 95 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_ShowDeviceTutorial(95),
    /**
     * <code>MessageType_UnlockBootloader = 96 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_UnlockBootloader(96),
    /**
     * <code>MessageType_AuthenticateDevice = 97 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_AuthenticateDevice(97),
    /**
     * <code>MessageType_AuthenticityProof = 98 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_AuthenticityProof(98),
    /**
     * <code>MessageType_ChangeLanguage = 990 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_ChangeLanguage(990),
    /**
     * <code>MessageType_TranslationDataRequest = 991 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_TranslationDataRequest(991),
    /**
     * <code>MessageType_TranslationDataAck = 992 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_TranslationDataAck(992),
    /**
     * <code>MessageType_SetBrightness = 993 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_SetBrightness(993),
    /**
     * <code>MessageType_SetU2FCounter = 63 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_SetU2FCounter(63),
    /**
     * <code>MessageType_GetNextU2FCounter = 80 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_GetNextU2FCounter(80),
    /**
     * <code>MessageType_NextU2FCounter = 81 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_NextU2FCounter(81),
    /**
     * <pre>
     * Deprecated messages, kept for protobuf compatibility.
     * Both are marked wire_out so that we don't need to implement incoming handler for legacy
     * </pre>
     *
     * <code>MessageType_Deprecated_PassphraseStateRequest = 77 [deprecated = true];</code>
     */
    @Deprecated
    MessageType_Deprecated_PassphraseStateRequest(77),
    /**
     * <code>MessageType_Deprecated_PassphraseStateAck = 78 [deprecated = true];</code>
     */
    @Deprecated
    MessageType_Deprecated_PassphraseStateAck(78),
    /**
     * <pre>
     * Bootloader
     * </pre>
     *
     * <code>MessageType_FirmwareErase = 6 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_bootloader) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_FirmwareErase(6),
    /**
     * <code>MessageType_FirmwareUpload = 7 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_bootloader) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_FirmwareUpload(7),
    /**
     * <code>MessageType_FirmwareRequest = 8 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.wire_bootloader) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_FirmwareRequest(8),
    /**
     * <code>MessageType_ProdTestT1 = 32 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_bootloader) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_ProdTestT1(32),
    /**
     * <pre>
     * Bitcoin
     * </pre>
     *
     * <code>MessageType_GetPublicKey = 11 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_GetPublicKey(11),
    /**
     * <code>MessageType_PublicKey = 12 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_PublicKey(12),
    /**
     * <code>MessageType_SignTx = 15 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_SignTx(15),
    /**
     * <code>MessageType_TxRequest = 21 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_TxRequest(21),
    /**
     * <code>MessageType_TxAck = 22 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_TxAck(22),
    /**
     * <code>MessageType_GetAddress = 29 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_GetAddress(29),
    /**
     * <code>MessageType_Address = 30 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_Address(30),
    /**
     * <code>MessageType_TxAckPaymentRequest = 37 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_TxAckPaymentRequest(37),
    /**
     * <code>MessageType_SignMessage = 38 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_SignMessage(38),
    /**
     * <code>MessageType_VerifyMessage = 39 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_VerifyMessage(39),
    /**
     * <code>MessageType_MessageSignature = 40 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_MessageSignature(40),
    /**
     * <code>MessageType_GetOwnershipId = 43 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_GetOwnershipId(43),
    /**
     * <code>MessageType_OwnershipId = 44 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_OwnershipId(44),
    /**
     * <code>MessageType_GetOwnershipProof = 49 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_GetOwnershipProof(49),
    /**
     * <code>MessageType_OwnershipProof = 50 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_OwnershipProof(50),
    /**
     * <code>MessageType_AuthorizeCoinJoin = 51 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_AuthorizeCoinJoin(51),
    /**
     * <pre>
     * Crypto
     * </pre>
     *
     * <code>MessageType_CipherKeyValue = 23 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_CipherKeyValue(23),
    /**
     * <code>MessageType_CipheredKeyValue = 48 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_CipheredKeyValue(48),
    /**
     * <code>MessageType_SignIdentity = 53 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_SignIdentity(53),
    /**
     * <code>MessageType_SignedIdentity = 54 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_SignedIdentity(54),
    /**
     * <code>MessageType_GetECDHSessionKey = 61 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_GetECDHSessionKey(61),
    /**
     * <code>MessageType_ECDHSessionKey = 62 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_ECDHSessionKey(62),
    /**
     * <pre>
     * Debug
     * </pre>
     *
     * <code>MessageType_DebugLinkDecision = 100 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_DebugLinkDecision(100),
    /**
     * <code>MessageType_DebugLinkGetState = 101 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_DebugLinkGetState(101),
    /**
     * <code>MessageType_DebugLinkState = 102 [(.hw.trezor.messages.wire_debug_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_DebugLinkState(102),
    /**
     * <code>MessageType_DebugLinkStop = 103 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_DebugLinkStop(103),
    /**
     * <code>MessageType_DebugLinkLog = 104 [(.hw.trezor.messages.wire_debug_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_DebugLinkLog(104),
    /**
     * <code>MessageType_DebugLinkMemoryRead = 110 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_DebugLinkMemoryRead(110),
    /**
     * <code>MessageType_DebugLinkMemory = 111 [(.hw.trezor.messages.wire_debug_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_DebugLinkMemory(111),
    /**
     * <code>MessageType_DebugLinkMemoryWrite = 112 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_DebugLinkMemoryWrite(112),
    /**
     * <code>MessageType_DebugLinkFlashErase = 113 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_DebugLinkFlashErase(113),
    /**
     * <code>MessageType_DebugLinkLayout = 9001 [(.hw.trezor.messages.wire_debug_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_DebugLinkLayout(9001),
    /**
     * <code>MessageType_DebugLinkReseedRandom = 9002 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_DebugLinkReseedRandom(9002),
    /**
     * <code>MessageType_DebugLinkRecordScreen = 9003 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_DebugLinkRecordScreen(9003),
    /**
     * <code>MessageType_DebugLinkEraseSdCard = 9005 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_DebugLinkEraseSdCard(9005),
    /**
     * <code>MessageType_DebugLinkWatchLayout = 9006 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_DebugLinkWatchLayout(9006),
    /**
     * <code>MessageType_DebugLinkResetDebugEvents = 9007 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_DebugLinkResetDebugEvents(9007),
    /**
     * <code>MessageType_DebugLinkOptigaSetSecMax = 9008 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_DebugLinkOptigaSetSecMax(9008),
    /**
     * <pre>
     * Ethereum
     * </pre>
     *
     * <code>MessageType_EthereumGetPublicKey = 450 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EthereumGetPublicKey(450),
    /**
     * <code>MessageType_EthereumPublicKey = 451 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EthereumPublicKey(451),
    /**
     * <code>MessageType_EthereumGetAddress = 56 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EthereumGetAddress(56),
    /**
     * <code>MessageType_EthereumAddress = 57 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EthereumAddress(57),
    /**
     * <code>MessageType_EthereumSignTx = 58 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EthereumSignTx(58),
    /**
     * <code>MessageType_EthereumSignTxEIP1559 = 452 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EthereumSignTxEIP1559(452),
    /**
     * <code>MessageType_EthereumTxRequest = 59 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EthereumTxRequest(59),
    /**
     * <code>MessageType_EthereumTxAck = 60 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EthereumTxAck(60),
    /**
     * <code>MessageType_EthereumSignMessage = 64 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EthereumSignMessage(64),
    /**
     * <code>MessageType_EthereumVerifyMessage = 65 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EthereumVerifyMessage(65),
    /**
     * <code>MessageType_EthereumMessageSignature = 66 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EthereumMessageSignature(66),
    /**
     * <code>MessageType_EthereumSignTypedData = 464 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EthereumSignTypedData(464),
    /**
     * <code>MessageType_EthereumTypedDataStructRequest = 465 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EthereumTypedDataStructRequest(465),
    /**
     * <code>MessageType_EthereumTypedDataStructAck = 466 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EthereumTypedDataStructAck(466),
    /**
     * <code>MessageType_EthereumTypedDataValueRequest = 467 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EthereumTypedDataValueRequest(467),
    /**
     * <code>MessageType_EthereumTypedDataValueAck = 468 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EthereumTypedDataValueAck(468),
    /**
     * <code>MessageType_EthereumTypedDataSignature = 469 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EthereumTypedDataSignature(469),
    /**
     * <code>MessageType_EthereumSignTypedHash = 470 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EthereumSignTypedHash(470),
    /**
     * <pre>
     * NEM
     * </pre>
     *
     * <code>MessageType_NEMGetAddress = 67 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_NEMGetAddress(67),
    /**
     * <code>MessageType_NEMAddress = 68 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_NEMAddress(68),
    /**
     * <code>MessageType_NEMSignTx = 69 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_NEMSignTx(69),
    /**
     * <code>MessageType_NEMSignedTx = 70 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_NEMSignedTx(70),
    /**
     * <code>MessageType_NEMDecryptMessage = 75 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_NEMDecryptMessage(75),
    /**
     * <code>MessageType_NEMDecryptedMessage = 76 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_NEMDecryptedMessage(76),
    /**
     * <pre>
     * Tezos
     * </pre>
     *
     * <code>MessageType_TezosGetAddress = 150 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_TezosGetAddress(150),
    /**
     * <code>MessageType_TezosAddress = 151 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_TezosAddress(151),
    /**
     * <code>MessageType_TezosSignTx = 152 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_TezosSignTx(152),
    /**
     * <code>MessageType_TezosSignedTx = 153 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_TezosSignedTx(153),
    /**
     * <code>MessageType_TezosGetPublicKey = 154 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_TezosGetPublicKey(154),
    /**
     * <code>MessageType_TezosPublicKey = 155 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_TezosPublicKey(155),
    /**
     * <pre>
     * Stellar
     * </pre>
     *
     * <code>MessageType_StellarSignTx = 202 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarSignTx(202),
    /**
     * <code>MessageType_StellarTxOpRequest = 203 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_StellarTxOpRequest(203),
    /**
     * <code>MessageType_StellarGetAddress = 207 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarGetAddress(207),
    /**
     * <code>MessageType_StellarAddress = 208 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_StellarAddress(208),
    /**
     * <code>MessageType_StellarCreateAccountOp = 210 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarCreateAccountOp(210),
    /**
     * <code>MessageType_StellarPaymentOp = 211 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarPaymentOp(211),
    /**
     * <code>MessageType_StellarPathPaymentStrictReceiveOp = 212 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarPathPaymentStrictReceiveOp(212),
    /**
     * <code>MessageType_StellarManageSellOfferOp = 213 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarManageSellOfferOp(213),
    /**
     * <code>MessageType_StellarCreatePassiveSellOfferOp = 214 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarCreatePassiveSellOfferOp(214),
    /**
     * <code>MessageType_StellarSetOptionsOp = 215 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarSetOptionsOp(215),
    /**
     * <code>MessageType_StellarChangeTrustOp = 216 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarChangeTrustOp(216),
    /**
     * <code>MessageType_StellarAllowTrustOp = 217 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarAllowTrustOp(217),
    /**
     * <code>MessageType_StellarAccountMergeOp = 218 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarAccountMergeOp(218),
    /**
     * <code>MessageType_StellarManageDataOp = 220 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarManageDataOp(220),
    /**
     * <code>MessageType_StellarBumpSequenceOp = 221 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarBumpSequenceOp(221),
    /**
     * <code>MessageType_StellarManageBuyOfferOp = 222 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarManageBuyOfferOp(222),
    /**
     * <code>MessageType_StellarPathPaymentStrictSendOp = 223 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarPathPaymentStrictSendOp(223),
    /**
     * <code>MessageType_StellarClaimClaimableBalanceOp = 225 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarClaimClaimableBalanceOp(225),
    /**
     * <code>MessageType_StellarSignedTx = 230 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_StellarSignedTx(230),
    /**
     * <code>MessageType_CardanoGetPublicKey = 305 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoGetPublicKey(305),
    /**
     * <code>MessageType_CardanoPublicKey = 306 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_CardanoPublicKey(306),
    /**
     * <code>MessageType_CardanoGetAddress = 307 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoGetAddress(307),
    /**
     * <code>MessageType_CardanoAddress = 308 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_CardanoAddress(308),
    /**
     * <code>MessageType_CardanoTxItemAck = 313 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_CardanoTxItemAck(313),
    /**
     * <code>MessageType_CardanoTxAuxiliaryDataSupplement = 314 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_CardanoTxAuxiliaryDataSupplement(314),
    /**
     * <code>MessageType_CardanoTxWitnessRequest = 315 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoTxWitnessRequest(315),
    /**
     * <code>MessageType_CardanoTxWitnessResponse = 316 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_CardanoTxWitnessResponse(316),
    /**
     * <code>MessageType_CardanoTxHostAck = 317 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoTxHostAck(317),
    /**
     * <code>MessageType_CardanoTxBodyHash = 318 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_CardanoTxBodyHash(318),
    /**
     * <code>MessageType_CardanoSignTxFinished = 319 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_CardanoSignTxFinished(319),
    /**
     * <code>MessageType_CardanoSignTxInit = 320 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoSignTxInit(320),
    /**
     * <code>MessageType_CardanoTxInput = 321 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoTxInput(321),
    /**
     * <code>MessageType_CardanoTxOutput = 322 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoTxOutput(322),
    /**
     * <code>MessageType_CardanoAssetGroup = 323 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoAssetGroup(323),
    /**
     * <code>MessageType_CardanoToken = 324 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoToken(324),
    /**
     * <code>MessageType_CardanoTxCertificate = 325 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoTxCertificate(325),
    /**
     * <code>MessageType_CardanoTxWithdrawal = 326 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoTxWithdrawal(326),
    /**
     * <code>MessageType_CardanoTxAuxiliaryData = 327 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoTxAuxiliaryData(327),
    /**
     * <code>MessageType_CardanoPoolOwner = 328 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoPoolOwner(328),
    /**
     * <code>MessageType_CardanoPoolRelayParameters = 329 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoPoolRelayParameters(329),
    /**
     * <code>MessageType_CardanoGetNativeScriptHash = 330 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoGetNativeScriptHash(330),
    /**
     * <code>MessageType_CardanoNativeScriptHash = 331 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_CardanoNativeScriptHash(331),
    /**
     * <code>MessageType_CardanoTxMint = 332 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoTxMint(332),
    /**
     * <code>MessageType_CardanoTxCollateralInput = 333 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoTxCollateralInput(333),
    /**
     * <code>MessageType_CardanoTxRequiredSigner = 334 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoTxRequiredSigner(334),
    /**
     * <code>MessageType_CardanoTxInlineDatumChunk = 335 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoTxInlineDatumChunk(335),
    /**
     * <code>MessageType_CardanoTxReferenceScriptChunk = 336 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoTxReferenceScriptChunk(336),
    /**
     * <code>MessageType_CardanoTxReferenceInput = 337 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoTxReferenceInput(337),
    /**
     * <pre>
     * Ripple
     * </pre>
     *
     * <code>MessageType_RippleGetAddress = 400 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_RippleGetAddress(400),
    /**
     * <code>MessageType_RippleAddress = 401 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_RippleAddress(401),
    /**
     * <code>MessageType_RippleSignTx = 402 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_RippleSignTx(402),
    /**
     * <code>MessageType_RippleSignedTx = 403 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_RippleSignedTx(403),
    /**
     * <pre>
     * Monero
     * </pre>
     *
     * <code>MessageType_MoneroTransactionInitRequest = 501 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionInitRequest(501),
    /**
     * <code>MessageType_MoneroTransactionInitAck = 502 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionInitAck(502),
    /**
     * <code>MessageType_MoneroTransactionSetInputRequest = 503 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionSetInputRequest(503),
    /**
     * <code>MessageType_MoneroTransactionSetInputAck = 504 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionSetInputAck(504),
    /**
     * <code>MessageType_MoneroTransactionInputViniRequest = 507 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionInputViniRequest(507),
    /**
     * <code>MessageType_MoneroTransactionInputViniAck = 508 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionInputViniAck(508),
    /**
     * <code>MessageType_MoneroTransactionAllInputsSetRequest = 509 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionAllInputsSetRequest(509),
    /**
     * <code>MessageType_MoneroTransactionAllInputsSetAck = 510 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionAllInputsSetAck(510),
    /**
     * <code>MessageType_MoneroTransactionSetOutputRequest = 511 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionSetOutputRequest(511),
    /**
     * <code>MessageType_MoneroTransactionSetOutputAck = 512 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionSetOutputAck(512),
    /**
     * <code>MessageType_MoneroTransactionAllOutSetRequest = 513 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionAllOutSetRequest(513),
    /**
     * <code>MessageType_MoneroTransactionAllOutSetAck = 514 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionAllOutSetAck(514),
    /**
     * <code>MessageType_MoneroTransactionSignInputRequest = 515 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionSignInputRequest(515),
    /**
     * <code>MessageType_MoneroTransactionSignInputAck = 516 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionSignInputAck(516),
    /**
     * <code>MessageType_MoneroTransactionFinalRequest = 517 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionFinalRequest(517),
    /**
     * <code>MessageType_MoneroTransactionFinalAck = 518 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionFinalAck(518),
    /**
     * <code>MessageType_MoneroKeyImageExportInitRequest = 530 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroKeyImageExportInitRequest(530),
    /**
     * <code>MessageType_MoneroKeyImageExportInitAck = 531 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroKeyImageExportInitAck(531),
    /**
     * <code>MessageType_MoneroKeyImageSyncStepRequest = 532 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroKeyImageSyncStepRequest(532),
    /**
     * <code>MessageType_MoneroKeyImageSyncStepAck = 533 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroKeyImageSyncStepAck(533),
    /**
     * <code>MessageType_MoneroKeyImageSyncFinalRequest = 534 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroKeyImageSyncFinalRequest(534),
    /**
     * <code>MessageType_MoneroKeyImageSyncFinalAck = 535 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroKeyImageSyncFinalAck(535),
    /**
     * <code>MessageType_MoneroGetAddress = 540 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_MoneroGetAddress(540),
    /**
     * <code>MessageType_MoneroAddress = 541 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroAddress(541),
    /**
     * <code>MessageType_MoneroGetWatchKey = 542 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_MoneroGetWatchKey(542),
    /**
     * <code>MessageType_MoneroWatchKey = 543 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroWatchKey(543),
    /**
     * <code>MessageType_DebugMoneroDiagRequest = 546 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_DebugMoneroDiagRequest(546),
    /**
     * <code>MessageType_DebugMoneroDiagAck = 547 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_DebugMoneroDiagAck(547),
    /**
     * <code>MessageType_MoneroGetTxKeyRequest = 550 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_MoneroGetTxKeyRequest(550),
    /**
     * <code>MessageType_MoneroGetTxKeyAck = 551 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroGetTxKeyAck(551),
    /**
     * <code>MessageType_MoneroLiveRefreshStartRequest = 552 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_MoneroLiveRefreshStartRequest(552),
    /**
     * <code>MessageType_MoneroLiveRefreshStartAck = 553 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroLiveRefreshStartAck(553),
    /**
     * <code>MessageType_MoneroLiveRefreshStepRequest = 554 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_MoneroLiveRefreshStepRequest(554),
    /**
     * <code>MessageType_MoneroLiveRefreshStepAck = 555 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroLiveRefreshStepAck(555),
    /**
     * <code>MessageType_MoneroLiveRefreshFinalRequest = 556 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_MoneroLiveRefreshFinalRequest(556),
    /**
     * <code>MessageType_MoneroLiveRefreshFinalAck = 557 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroLiveRefreshFinalAck(557),
    /**
     * <pre>
     * EOS
     * </pre>
     *
     * <code>MessageType_EosGetPublicKey = 600 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EosGetPublicKey(600),
    /**
     * <code>MessageType_EosPublicKey = 601 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EosPublicKey(601),
    /**
     * <code>MessageType_EosSignTx = 602 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EosSignTx(602),
    /**
     * <code>MessageType_EosTxActionRequest = 603 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EosTxActionRequest(603),
    /**
     * <code>MessageType_EosTxActionAck = 604 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EosTxActionAck(604),
    /**
     * <code>MessageType_EosSignedTx = 605 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EosSignedTx(605),
    /**
     * <pre>
     * Binance
     * </pre>
     *
     * <code>MessageType_BinanceGetAddress = 700 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_BinanceGetAddress(700),
    /**
     * <code>MessageType_BinanceAddress = 701 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_BinanceAddress(701),
    /**
     * <code>MessageType_BinanceGetPublicKey = 702 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_BinanceGetPublicKey(702),
    /**
     * <code>MessageType_BinancePublicKey = 703 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_BinancePublicKey(703),
    /**
     * <code>MessageType_BinanceSignTx = 704 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_BinanceSignTx(704),
    /**
     * <code>MessageType_BinanceTxRequest = 705 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_BinanceTxRequest(705),
    /**
     * <code>MessageType_BinanceTransferMsg = 706 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_BinanceTransferMsg(706),
    /**
     * <code>MessageType_BinanceOrderMsg = 707 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_BinanceOrderMsg(707),
    /**
     * <code>MessageType_BinanceCancelMsg = 708 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_BinanceCancelMsg(708),
    /**
     * <code>MessageType_BinanceSignedTx = 709 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_BinanceSignedTx(709),
    /**
     * <pre>
     * WebAuthn
     * </pre>
     *
     * <code>MessageType_WebAuthnListResidentCredentials = 800 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_WebAuthnListResidentCredentials(800),
    /**
     * <code>MessageType_WebAuthnCredentials = 801 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_WebAuthnCredentials(801),
    /**
     * <code>MessageType_WebAuthnAddResidentCredential = 802 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_WebAuthnAddResidentCredential(802),
    /**
     * <code>MessageType_WebAuthnRemoveResidentCredential = 803 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_WebAuthnRemoveResidentCredential(803),
    /**
     * <pre>
     * Solana
     * </pre>
     *
     * <code>MessageType_SolanaGetPublicKey = 900 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_SolanaGetPublicKey(900),
    /**
     * <code>MessageType_SolanaPublicKey = 901 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_SolanaPublicKey(901),
    /**
     * <code>MessageType_SolanaGetAddress = 902 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_SolanaGetAddress(902),
    /**
     * <code>MessageType_SolanaAddress = 903 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_SolanaAddress(903),
    /**
     * <code>MessageType_SolanaSignTx = 904 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_SolanaSignTx(904),
    /**
     * <code>MessageType_SolanaTxSignature = 905 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_SolanaTxSignature(905),
    /**
     * <pre>
     * Benchmark
     * </pre>
     *
     * <code>MessageType_BenchmarkListNames = 9100 [(.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_BenchmarkListNames(9100),
    /**
     * <code>MessageType_BenchmarkNames = 9101 [(.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_BenchmarkNames(9101),
    /**
     * <code>MessageType_BenchmarkRun = 9102 [(.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_BenchmarkRun(9102),
    /**
     * <code>MessageType_BenchmarkResult = 9103 [(.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    MessageType_BenchmarkResult(9103),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        MessageType.class.getName());
    }
    /**
     * <pre>
     * Management
     * </pre>
     *
     * <code>MessageType_Initialize = 0 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_Initialize_VALUE = 0;
    /**
     * <code>MessageType_Ping = 1 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_Ping_VALUE = 1;
    /**
     * <code>MessageType_Success = 2 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.wire_debug_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_Success_VALUE = 2;
    /**
     * <code>MessageType_Failure = 3 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.wire_debug_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_Failure_VALUE = 3;
    /**
     * <code>MessageType_ChangePin = 4 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_ChangePin_VALUE = 4;
    /**
     * <code>MessageType_WipeDevice = 5 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_WipeDevice_VALUE = 5;
    /**
     * <code>MessageType_GetEntropy = 9 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_GetEntropy_VALUE = 9;
    /**
     * <code>MessageType_Entropy = 10 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_Entropy_VALUE = 10;
    /**
     * <code>MessageType_LoadDevice = 13 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_LoadDevice_VALUE = 13;
    /**
     * <code>MessageType_ResetDevice = 14 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_ResetDevice_VALUE = 14;
    /**
     * <code>MessageType_SetBusy = 16 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_SetBusy_VALUE = 16;
    /**
     * <code>MessageType_Features = 17 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_Features_VALUE = 17;
    /**
     * <code>MessageType_PinMatrixRequest = 18 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_PinMatrixRequest_VALUE = 18;
    /**
     * <code>MessageType_PinMatrixAck = 19 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_PinMatrixAck_VALUE = 19;
    /**
     * <code>MessageType_Cancel = 20 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_Cancel_VALUE = 20;
    /**
     * <code>MessageType_LockDevice = 24 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_LockDevice_VALUE = 24;
    /**
     * <code>MessageType_ApplySettings = 25 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_ApplySettings_VALUE = 25;
    /**
     * <code>MessageType_ButtonRequest = 26 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_ButtonRequest_VALUE = 26;
    /**
     * <code>MessageType_ButtonAck = 27 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_ButtonAck_VALUE = 27;
    /**
     * <code>MessageType_ApplyFlags = 28 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_ApplyFlags_VALUE = 28;
    /**
     * <code>MessageType_GetNonce = 31 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_GetNonce_VALUE = 31;
    /**
     * <code>MessageType_Nonce = 33 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_Nonce_VALUE = 33;
    /**
     * <code>MessageType_BackupDevice = 34 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_BackupDevice_VALUE = 34;
    /**
     * <code>MessageType_EntropyRequest = 35 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_EntropyRequest_VALUE = 35;
    /**
     * <code>MessageType_EntropyAck = 36 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_EntropyAck_VALUE = 36;
    /**
     * <code>MessageType_PassphraseRequest = 41 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_PassphraseRequest_VALUE = 41;
    /**
     * <code>MessageType_PassphraseAck = 42 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_PassphraseAck_VALUE = 42;
    /**
     * <code>MessageType_RecoveryDevice = 45 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_RecoveryDevice_VALUE = 45;
    /**
     * <code>MessageType_WordRequest = 46 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_WordRequest_VALUE = 46;
    /**
     * <code>MessageType_WordAck = 47 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_WordAck_VALUE = 47;
    /**
     * <code>MessageType_GetFeatures = 55 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_GetFeatures_VALUE = 55;
    /**
     * <code>MessageType_SdProtect = 79 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_SdProtect_VALUE = 79;
    /**
     * <code>MessageType_ChangeWipeCode = 82 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_ChangeWipeCode_VALUE = 82;
    /**
     * <code>MessageType_EndSession = 83 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_EndSession_VALUE = 83;
    /**
     * <code>MessageType_DoPreauthorized = 84 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_DoPreauthorized_VALUE = 84;
    /**
     * <code>MessageType_PreauthorizedRequest = 85 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_PreauthorizedRequest_VALUE = 85;
    /**
     * <code>MessageType_CancelAuthorization = 86 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_CancelAuthorization_VALUE = 86;
    /**
     * <code>MessageType_RebootToBootloader = 87 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_RebootToBootloader_VALUE = 87;
    /**
     * <code>MessageType_GetFirmwareHash = 88 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_GetFirmwareHash_VALUE = 88;
    /**
     * <code>MessageType_FirmwareHash = 89 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_FirmwareHash_VALUE = 89;
    /**
     * <code>MessageType_UnlockPath = 93 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_UnlockPath_VALUE = 93;
    /**
     * <code>MessageType_UnlockedPathRequest = 94 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_UnlockedPathRequest_VALUE = 94;
    /**
     * <code>MessageType_ShowDeviceTutorial = 95 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_ShowDeviceTutorial_VALUE = 95;
    /**
     * <code>MessageType_UnlockBootloader = 96 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_UnlockBootloader_VALUE = 96;
    /**
     * <code>MessageType_AuthenticateDevice = 97 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_AuthenticateDevice_VALUE = 97;
    /**
     * <code>MessageType_AuthenticityProof = 98 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_AuthenticityProof_VALUE = 98;
    /**
     * <code>MessageType_ChangeLanguage = 990 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_ChangeLanguage_VALUE = 990;
    /**
     * <code>MessageType_TranslationDataRequest = 991 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_TranslationDataRequest_VALUE = 991;
    /**
     * <code>MessageType_TranslationDataAck = 992 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_TranslationDataAck_VALUE = 992;
    /**
     * <code>MessageType_SetBrightness = 993 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_SetBrightness_VALUE = 993;
    /**
     * <code>MessageType_SetU2FCounter = 63 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_SetU2FCounter_VALUE = 63;
    /**
     * <code>MessageType_GetNextU2FCounter = 80 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_GetNextU2FCounter_VALUE = 80;
    /**
     * <code>MessageType_NextU2FCounter = 81 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_NextU2FCounter_VALUE = 81;
    /**
     * <pre>
     * Deprecated messages, kept for protobuf compatibility.
     * Both are marked wire_out so that we don't need to implement incoming handler for legacy
     * </pre>
     *
     * <code>MessageType_Deprecated_PassphraseStateRequest = 77 [deprecated = true];</code>
     */
    @Deprecated public static final int MessageType_Deprecated_PassphraseStateRequest_VALUE = 77;
    /**
     * <code>MessageType_Deprecated_PassphraseStateAck = 78 [deprecated = true];</code>
     */
    @Deprecated public static final int MessageType_Deprecated_PassphraseStateAck_VALUE = 78;
    /**
     * <pre>
     * Bootloader
     * </pre>
     *
     * <code>MessageType_FirmwareErase = 6 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_bootloader) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_FirmwareErase_VALUE = 6;
    /**
     * <code>MessageType_FirmwareUpload = 7 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_bootloader) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_FirmwareUpload_VALUE = 7;
    /**
     * <code>MessageType_FirmwareRequest = 8 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.wire_bootloader) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_FirmwareRequest_VALUE = 8;
    /**
     * <code>MessageType_ProdTestT1 = 32 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_bootloader) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_ProdTestT1_VALUE = 32;
    /**
     * <pre>
     * Bitcoin
     * </pre>
     *
     * <code>MessageType_GetPublicKey = 11 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_GetPublicKey_VALUE = 11;
    /**
     * <code>MessageType_PublicKey = 12 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_PublicKey_VALUE = 12;
    /**
     * <code>MessageType_SignTx = 15 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_SignTx_VALUE = 15;
    /**
     * <code>MessageType_TxRequest = 21 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_TxRequest_VALUE = 21;
    /**
     * <code>MessageType_TxAck = 22 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_TxAck_VALUE = 22;
    /**
     * <code>MessageType_GetAddress = 29 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_GetAddress_VALUE = 29;
    /**
     * <code>MessageType_Address = 30 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_Address_VALUE = 30;
    /**
     * <code>MessageType_TxAckPaymentRequest = 37 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_TxAckPaymentRequest_VALUE = 37;
    /**
     * <code>MessageType_SignMessage = 38 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_SignMessage_VALUE = 38;
    /**
     * <code>MessageType_VerifyMessage = 39 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_VerifyMessage_VALUE = 39;
    /**
     * <code>MessageType_MessageSignature = 40 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_MessageSignature_VALUE = 40;
    /**
     * <code>MessageType_GetOwnershipId = 43 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_GetOwnershipId_VALUE = 43;
    /**
     * <code>MessageType_OwnershipId = 44 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_OwnershipId_VALUE = 44;
    /**
     * <code>MessageType_GetOwnershipProof = 49 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_GetOwnershipProof_VALUE = 49;
    /**
     * <code>MessageType_OwnershipProof = 50 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_OwnershipProof_VALUE = 50;
    /**
     * <code>MessageType_AuthorizeCoinJoin = 51 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_AuthorizeCoinJoin_VALUE = 51;
    /**
     * <pre>
     * Crypto
     * </pre>
     *
     * <code>MessageType_CipherKeyValue = 23 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_CipherKeyValue_VALUE = 23;
    /**
     * <code>MessageType_CipheredKeyValue = 48 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_CipheredKeyValue_VALUE = 48;
    /**
     * <code>MessageType_SignIdentity = 53 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_SignIdentity_VALUE = 53;
    /**
     * <code>MessageType_SignedIdentity = 54 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_SignedIdentity_VALUE = 54;
    /**
     * <code>MessageType_GetECDHSessionKey = 61 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_GetECDHSessionKey_VALUE = 61;
    /**
     * <code>MessageType_ECDHSessionKey = 62 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_ECDHSessionKey_VALUE = 62;
    /**
     * <pre>
     * Debug
     * </pre>
     *
     * <code>MessageType_DebugLinkDecision = 100 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_DebugLinkDecision_VALUE = 100;
    /**
     * <code>MessageType_DebugLinkGetState = 101 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_DebugLinkGetState_VALUE = 101;
    /**
     * <code>MessageType_DebugLinkState = 102 [(.hw.trezor.messages.wire_debug_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_DebugLinkState_VALUE = 102;
    /**
     * <code>MessageType_DebugLinkStop = 103 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_DebugLinkStop_VALUE = 103;
    /**
     * <code>MessageType_DebugLinkLog = 104 [(.hw.trezor.messages.wire_debug_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_DebugLinkLog_VALUE = 104;
    /**
     * <code>MessageType_DebugLinkMemoryRead = 110 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_DebugLinkMemoryRead_VALUE = 110;
    /**
     * <code>MessageType_DebugLinkMemory = 111 [(.hw.trezor.messages.wire_debug_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_DebugLinkMemory_VALUE = 111;
    /**
     * <code>MessageType_DebugLinkMemoryWrite = 112 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_DebugLinkMemoryWrite_VALUE = 112;
    /**
     * <code>MessageType_DebugLinkFlashErase = 113 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_DebugLinkFlashErase_VALUE = 113;
    /**
     * <code>MessageType_DebugLinkLayout = 9001 [(.hw.trezor.messages.wire_debug_out) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_DebugLinkLayout_VALUE = 9001;
    /**
     * <code>MessageType_DebugLinkReseedRandom = 9002 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_DebugLinkReseedRandom_VALUE = 9002;
    /**
     * <code>MessageType_DebugLinkRecordScreen = 9003 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_DebugLinkRecordScreen_VALUE = 9003;
    /**
     * <code>MessageType_DebugLinkEraseSdCard = 9005 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_DebugLinkEraseSdCard_VALUE = 9005;
    /**
     * <code>MessageType_DebugLinkWatchLayout = 9006 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_DebugLinkWatchLayout_VALUE = 9006;
    /**
     * <code>MessageType_DebugLinkResetDebugEvents = 9007 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_DebugLinkResetDebugEvents_VALUE = 9007;
    /**
     * <code>MessageType_DebugLinkOptigaSetSecMax = 9008 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_DebugLinkOptigaSetSecMax_VALUE = 9008;
    /**
     * <pre>
     * Ethereum
     * </pre>
     *
     * <code>MessageType_EthereumGetPublicKey = 450 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EthereumGetPublicKey_VALUE = 450;
    /**
     * <code>MessageType_EthereumPublicKey = 451 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EthereumPublicKey_VALUE = 451;
    /**
     * <code>MessageType_EthereumGetAddress = 56 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EthereumGetAddress_VALUE = 56;
    /**
     * <code>MessageType_EthereumAddress = 57 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EthereumAddress_VALUE = 57;
    /**
     * <code>MessageType_EthereumSignTx = 58 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EthereumSignTx_VALUE = 58;
    /**
     * <code>MessageType_EthereumSignTxEIP1559 = 452 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EthereumSignTxEIP1559_VALUE = 452;
    /**
     * <code>MessageType_EthereumTxRequest = 59 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EthereumTxRequest_VALUE = 59;
    /**
     * <code>MessageType_EthereumTxAck = 60 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EthereumTxAck_VALUE = 60;
    /**
     * <code>MessageType_EthereumSignMessage = 64 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EthereumSignMessage_VALUE = 64;
    /**
     * <code>MessageType_EthereumVerifyMessage = 65 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EthereumVerifyMessage_VALUE = 65;
    /**
     * <code>MessageType_EthereumMessageSignature = 66 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EthereumMessageSignature_VALUE = 66;
    /**
     * <code>MessageType_EthereumSignTypedData = 464 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EthereumSignTypedData_VALUE = 464;
    /**
     * <code>MessageType_EthereumTypedDataStructRequest = 465 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EthereumTypedDataStructRequest_VALUE = 465;
    /**
     * <code>MessageType_EthereumTypedDataStructAck = 466 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EthereumTypedDataStructAck_VALUE = 466;
    /**
     * <code>MessageType_EthereumTypedDataValueRequest = 467 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EthereumTypedDataValueRequest_VALUE = 467;
    /**
     * <code>MessageType_EthereumTypedDataValueAck = 468 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EthereumTypedDataValueAck_VALUE = 468;
    /**
     * <code>MessageType_EthereumTypedDataSignature = 469 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EthereumTypedDataSignature_VALUE = 469;
    /**
     * <code>MessageType_EthereumSignTypedHash = 470 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EthereumSignTypedHash_VALUE = 470;
    /**
     * <pre>
     * NEM
     * </pre>
     *
     * <code>MessageType_NEMGetAddress = 67 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_NEMGetAddress_VALUE = 67;
    /**
     * <code>MessageType_NEMAddress = 68 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_NEMAddress_VALUE = 68;
    /**
     * <code>MessageType_NEMSignTx = 69 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_NEMSignTx_VALUE = 69;
    /**
     * <code>MessageType_NEMSignedTx = 70 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_NEMSignedTx_VALUE = 70;
    /**
     * <code>MessageType_NEMDecryptMessage = 75 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_NEMDecryptMessage_VALUE = 75;
    /**
     * <code>MessageType_NEMDecryptedMessage = 76 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_NEMDecryptedMessage_VALUE = 76;
    /**
     * <pre>
     * Tezos
     * </pre>
     *
     * <code>MessageType_TezosGetAddress = 150 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_TezosGetAddress_VALUE = 150;
    /**
     * <code>MessageType_TezosAddress = 151 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_TezosAddress_VALUE = 151;
    /**
     * <code>MessageType_TezosSignTx = 152 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_TezosSignTx_VALUE = 152;
    /**
     * <code>MessageType_TezosSignedTx = 153 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_TezosSignedTx_VALUE = 153;
    /**
     * <code>MessageType_TezosGetPublicKey = 154 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_TezosGetPublicKey_VALUE = 154;
    /**
     * <code>MessageType_TezosPublicKey = 155 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_TezosPublicKey_VALUE = 155;
    /**
     * <pre>
     * Stellar
     * </pre>
     *
     * <code>MessageType_StellarSignTx = 202 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarSignTx_VALUE = 202;
    /**
     * <code>MessageType_StellarTxOpRequest = 203 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_StellarTxOpRequest_VALUE = 203;
    /**
     * <code>MessageType_StellarGetAddress = 207 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarGetAddress_VALUE = 207;
    /**
     * <code>MessageType_StellarAddress = 208 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_StellarAddress_VALUE = 208;
    /**
     * <code>MessageType_StellarCreateAccountOp = 210 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarCreateAccountOp_VALUE = 210;
    /**
     * <code>MessageType_StellarPaymentOp = 211 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarPaymentOp_VALUE = 211;
    /**
     * <code>MessageType_StellarPathPaymentStrictReceiveOp = 212 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarPathPaymentStrictReceiveOp_VALUE = 212;
    /**
     * <code>MessageType_StellarManageSellOfferOp = 213 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarManageSellOfferOp_VALUE = 213;
    /**
     * <code>MessageType_StellarCreatePassiveSellOfferOp = 214 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarCreatePassiveSellOfferOp_VALUE = 214;
    /**
     * <code>MessageType_StellarSetOptionsOp = 215 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarSetOptionsOp_VALUE = 215;
    /**
     * <code>MessageType_StellarChangeTrustOp = 216 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarChangeTrustOp_VALUE = 216;
    /**
     * <code>MessageType_StellarAllowTrustOp = 217 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarAllowTrustOp_VALUE = 217;
    /**
     * <code>MessageType_StellarAccountMergeOp = 218 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarAccountMergeOp_VALUE = 218;
    /**
     * <code>MessageType_StellarManageDataOp = 220 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarManageDataOp_VALUE = 220;
    /**
     * <code>MessageType_StellarBumpSequenceOp = 221 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarBumpSequenceOp_VALUE = 221;
    /**
     * <code>MessageType_StellarManageBuyOfferOp = 222 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarManageBuyOfferOp_VALUE = 222;
    /**
     * <code>MessageType_StellarPathPaymentStrictSendOp = 223 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarPathPaymentStrictSendOp_VALUE = 223;
    /**
     * <code>MessageType_StellarClaimClaimableBalanceOp = 225 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarClaimClaimableBalanceOp_VALUE = 225;
    /**
     * <code>MessageType_StellarSignedTx = 230 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_StellarSignedTx_VALUE = 230;
    /**
     * <code>MessageType_CardanoGetPublicKey = 305 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoGetPublicKey_VALUE = 305;
    /**
     * <code>MessageType_CardanoPublicKey = 306 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_CardanoPublicKey_VALUE = 306;
    /**
     * <code>MessageType_CardanoGetAddress = 307 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoGetAddress_VALUE = 307;
    /**
     * <code>MessageType_CardanoAddress = 308 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_CardanoAddress_VALUE = 308;
    /**
     * <code>MessageType_CardanoTxItemAck = 313 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_CardanoTxItemAck_VALUE = 313;
    /**
     * <code>MessageType_CardanoTxAuxiliaryDataSupplement = 314 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_CardanoTxAuxiliaryDataSupplement_VALUE = 314;
    /**
     * <code>MessageType_CardanoTxWitnessRequest = 315 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoTxWitnessRequest_VALUE = 315;
    /**
     * <code>MessageType_CardanoTxWitnessResponse = 316 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_CardanoTxWitnessResponse_VALUE = 316;
    /**
     * <code>MessageType_CardanoTxHostAck = 317 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoTxHostAck_VALUE = 317;
    /**
     * <code>MessageType_CardanoTxBodyHash = 318 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_CardanoTxBodyHash_VALUE = 318;
    /**
     * <code>MessageType_CardanoSignTxFinished = 319 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_CardanoSignTxFinished_VALUE = 319;
    /**
     * <code>MessageType_CardanoSignTxInit = 320 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoSignTxInit_VALUE = 320;
    /**
     * <code>MessageType_CardanoTxInput = 321 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoTxInput_VALUE = 321;
    /**
     * <code>MessageType_CardanoTxOutput = 322 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoTxOutput_VALUE = 322;
    /**
     * <code>MessageType_CardanoAssetGroup = 323 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoAssetGroup_VALUE = 323;
    /**
     * <code>MessageType_CardanoToken = 324 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoToken_VALUE = 324;
    /**
     * <code>MessageType_CardanoTxCertificate = 325 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoTxCertificate_VALUE = 325;
    /**
     * <code>MessageType_CardanoTxWithdrawal = 326 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoTxWithdrawal_VALUE = 326;
    /**
     * <code>MessageType_CardanoTxAuxiliaryData = 327 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoTxAuxiliaryData_VALUE = 327;
    /**
     * <code>MessageType_CardanoPoolOwner = 328 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoPoolOwner_VALUE = 328;
    /**
     * <code>MessageType_CardanoPoolRelayParameters = 329 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoPoolRelayParameters_VALUE = 329;
    /**
     * <code>MessageType_CardanoGetNativeScriptHash = 330 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoGetNativeScriptHash_VALUE = 330;
    /**
     * <code>MessageType_CardanoNativeScriptHash = 331 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_CardanoNativeScriptHash_VALUE = 331;
    /**
     * <code>MessageType_CardanoTxMint = 332 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoTxMint_VALUE = 332;
    /**
     * <code>MessageType_CardanoTxCollateralInput = 333 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoTxCollateralInput_VALUE = 333;
    /**
     * <code>MessageType_CardanoTxRequiredSigner = 334 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoTxRequiredSigner_VALUE = 334;
    /**
     * <code>MessageType_CardanoTxInlineDatumChunk = 335 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoTxInlineDatumChunk_VALUE = 335;
    /**
     * <code>MessageType_CardanoTxReferenceScriptChunk = 336 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoTxReferenceScriptChunk_VALUE = 336;
    /**
     * <code>MessageType_CardanoTxReferenceInput = 337 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoTxReferenceInput_VALUE = 337;
    /**
     * <pre>
     * Ripple
     * </pre>
     *
     * <code>MessageType_RippleGetAddress = 400 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_RippleGetAddress_VALUE = 400;
    /**
     * <code>MessageType_RippleAddress = 401 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_RippleAddress_VALUE = 401;
    /**
     * <code>MessageType_RippleSignTx = 402 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_RippleSignTx_VALUE = 402;
    /**
     * <code>MessageType_RippleSignedTx = 403 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_RippleSignedTx_VALUE = 403;
    /**
     * <pre>
     * Monero
     * </pre>
     *
     * <code>MessageType_MoneroTransactionInitRequest = 501 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionInitRequest_VALUE = 501;
    /**
     * <code>MessageType_MoneroTransactionInitAck = 502 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionInitAck_VALUE = 502;
    /**
     * <code>MessageType_MoneroTransactionSetInputRequest = 503 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionSetInputRequest_VALUE = 503;
    /**
     * <code>MessageType_MoneroTransactionSetInputAck = 504 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionSetInputAck_VALUE = 504;
    /**
     * <code>MessageType_MoneroTransactionInputViniRequest = 507 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionInputViniRequest_VALUE = 507;
    /**
     * <code>MessageType_MoneroTransactionInputViniAck = 508 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionInputViniAck_VALUE = 508;
    /**
     * <code>MessageType_MoneroTransactionAllInputsSetRequest = 509 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionAllInputsSetRequest_VALUE = 509;
    /**
     * <code>MessageType_MoneroTransactionAllInputsSetAck = 510 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionAllInputsSetAck_VALUE = 510;
    /**
     * <code>MessageType_MoneroTransactionSetOutputRequest = 511 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionSetOutputRequest_VALUE = 511;
    /**
     * <code>MessageType_MoneroTransactionSetOutputAck = 512 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionSetOutputAck_VALUE = 512;
    /**
     * <code>MessageType_MoneroTransactionAllOutSetRequest = 513 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionAllOutSetRequest_VALUE = 513;
    /**
     * <code>MessageType_MoneroTransactionAllOutSetAck = 514 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionAllOutSetAck_VALUE = 514;
    /**
     * <code>MessageType_MoneroTransactionSignInputRequest = 515 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionSignInputRequest_VALUE = 515;
    /**
     * <code>MessageType_MoneroTransactionSignInputAck = 516 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionSignInputAck_VALUE = 516;
    /**
     * <code>MessageType_MoneroTransactionFinalRequest = 517 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionFinalRequest_VALUE = 517;
    /**
     * <code>MessageType_MoneroTransactionFinalAck = 518 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionFinalAck_VALUE = 518;
    /**
     * <code>MessageType_MoneroKeyImageExportInitRequest = 530 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroKeyImageExportInitRequest_VALUE = 530;
    /**
     * <code>MessageType_MoneroKeyImageExportInitAck = 531 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroKeyImageExportInitAck_VALUE = 531;
    /**
     * <code>MessageType_MoneroKeyImageSyncStepRequest = 532 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroKeyImageSyncStepRequest_VALUE = 532;
    /**
     * <code>MessageType_MoneroKeyImageSyncStepAck = 533 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroKeyImageSyncStepAck_VALUE = 533;
    /**
     * <code>MessageType_MoneroKeyImageSyncFinalRequest = 534 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroKeyImageSyncFinalRequest_VALUE = 534;
    /**
     * <code>MessageType_MoneroKeyImageSyncFinalAck = 535 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroKeyImageSyncFinalAck_VALUE = 535;
    /**
     * <code>MessageType_MoneroGetAddress = 540 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_MoneroGetAddress_VALUE = 540;
    /**
     * <code>MessageType_MoneroAddress = 541 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroAddress_VALUE = 541;
    /**
     * <code>MessageType_MoneroGetWatchKey = 542 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_MoneroGetWatchKey_VALUE = 542;
    /**
     * <code>MessageType_MoneroWatchKey = 543 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroWatchKey_VALUE = 543;
    /**
     * <code>MessageType_DebugMoneroDiagRequest = 546 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_DebugMoneroDiagRequest_VALUE = 546;
    /**
     * <code>MessageType_DebugMoneroDiagAck = 547 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_DebugMoneroDiagAck_VALUE = 547;
    /**
     * <code>MessageType_MoneroGetTxKeyRequest = 550 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_MoneroGetTxKeyRequest_VALUE = 550;
    /**
     * <code>MessageType_MoneroGetTxKeyAck = 551 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroGetTxKeyAck_VALUE = 551;
    /**
     * <code>MessageType_MoneroLiveRefreshStartRequest = 552 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_MoneroLiveRefreshStartRequest_VALUE = 552;
    /**
     * <code>MessageType_MoneroLiveRefreshStartAck = 553 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroLiveRefreshStartAck_VALUE = 553;
    /**
     * <code>MessageType_MoneroLiveRefreshStepRequest = 554 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_MoneroLiveRefreshStepRequest_VALUE = 554;
    /**
     * <code>MessageType_MoneroLiveRefreshStepAck = 555 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroLiveRefreshStepAck_VALUE = 555;
    /**
     * <code>MessageType_MoneroLiveRefreshFinalRequest = 556 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_MoneroLiveRefreshFinalRequest_VALUE = 556;
    /**
     * <code>MessageType_MoneroLiveRefreshFinalAck = 557 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroLiveRefreshFinalAck_VALUE = 557;
    /**
     * <pre>
     * EOS
     * </pre>
     *
     * <code>MessageType_EosGetPublicKey = 600 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EosGetPublicKey_VALUE = 600;
    /**
     * <code>MessageType_EosPublicKey = 601 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EosPublicKey_VALUE = 601;
    /**
     * <code>MessageType_EosSignTx = 602 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EosSignTx_VALUE = 602;
    /**
     * <code>MessageType_EosTxActionRequest = 603 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EosTxActionRequest_VALUE = 603;
    /**
     * <code>MessageType_EosTxActionAck = 604 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EosTxActionAck_VALUE = 604;
    /**
     * <code>MessageType_EosSignedTx = 605 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EosSignedTx_VALUE = 605;
    /**
     * <pre>
     * Binance
     * </pre>
     *
     * <code>MessageType_BinanceGetAddress = 700 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_BinanceGetAddress_VALUE = 700;
    /**
     * <code>MessageType_BinanceAddress = 701 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_BinanceAddress_VALUE = 701;
    /**
     * <code>MessageType_BinanceGetPublicKey = 702 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_BinanceGetPublicKey_VALUE = 702;
    /**
     * <code>MessageType_BinancePublicKey = 703 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_BinancePublicKey_VALUE = 703;
    /**
     * <code>MessageType_BinanceSignTx = 704 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_BinanceSignTx_VALUE = 704;
    /**
     * <code>MessageType_BinanceTxRequest = 705 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_BinanceTxRequest_VALUE = 705;
    /**
     * <code>MessageType_BinanceTransferMsg = 706 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_BinanceTransferMsg_VALUE = 706;
    /**
     * <code>MessageType_BinanceOrderMsg = 707 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_BinanceOrderMsg_VALUE = 707;
    /**
     * <code>MessageType_BinanceCancelMsg = 708 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_BinanceCancelMsg_VALUE = 708;
    /**
     * <code>MessageType_BinanceSignedTx = 709 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_BinanceSignedTx_VALUE = 709;
    /**
     * <pre>
     * WebAuthn
     * </pre>
     *
     * <code>MessageType_WebAuthnListResidentCredentials = 800 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_WebAuthnListResidentCredentials_VALUE = 800;
    /**
     * <code>MessageType_WebAuthnCredentials = 801 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_WebAuthnCredentials_VALUE = 801;
    /**
     * <code>MessageType_WebAuthnAddResidentCredential = 802 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_WebAuthnAddResidentCredential_VALUE = 802;
    /**
     * <code>MessageType_WebAuthnRemoveResidentCredential = 803 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_WebAuthnRemoveResidentCredential_VALUE = 803;
    /**
     * <pre>
     * Solana
     * </pre>
     *
     * <code>MessageType_SolanaGetPublicKey = 900 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_SolanaGetPublicKey_VALUE = 900;
    /**
     * <code>MessageType_SolanaPublicKey = 901 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_SolanaPublicKey_VALUE = 901;
    /**
     * <code>MessageType_SolanaGetAddress = 902 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_SolanaGetAddress_VALUE = 902;
    /**
     * <code>MessageType_SolanaAddress = 903 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_SolanaAddress_VALUE = 903;
    /**
     * <code>MessageType_SolanaSignTx = 904 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_SolanaSignTx_VALUE = 904;
    /**
     * <code>MessageType_SolanaTxSignature = 905 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_SolanaTxSignature_VALUE = 905;
    /**
     * <pre>
     * Benchmark
     * </pre>
     *
     * <code>MessageType_BenchmarkListNames = 9100 [(.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_BenchmarkListNames_VALUE = 9100;
    /**
     * <code>MessageType_BenchmarkNames = 9101 [(.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_BenchmarkNames_VALUE = 9101;
    /**
     * <code>MessageType_BenchmarkRun = 9102 [(.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_BenchmarkRun_VALUE = 9102;
    /**
     * <code>MessageType_BenchmarkResult = 9103 [(.hw.trezor.messages.bitcoin_only) = true];</code>
     */
    public static final int MessageType_BenchmarkResult_VALUE = 9103;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static MessageType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static MessageType forNumber(int value) {
      switch (value) {
        case 0: return MessageType_Initialize;
        case 1: return MessageType_Ping;
        case 2: return MessageType_Success;
        case 3: return MessageType_Failure;
        case 4: return MessageType_ChangePin;
        case 5: return MessageType_WipeDevice;
        case 9: return MessageType_GetEntropy;
        case 10: return MessageType_Entropy;
        case 13: return MessageType_LoadDevice;
        case 14: return MessageType_ResetDevice;
        case 16: return MessageType_SetBusy;
        case 17: return MessageType_Features;
        case 18: return MessageType_PinMatrixRequest;
        case 19: return MessageType_PinMatrixAck;
        case 20: return MessageType_Cancel;
        case 24: return MessageType_LockDevice;
        case 25: return MessageType_ApplySettings;
        case 26: return MessageType_ButtonRequest;
        case 27: return MessageType_ButtonAck;
        case 28: return MessageType_ApplyFlags;
        case 31: return MessageType_GetNonce;
        case 33: return MessageType_Nonce;
        case 34: return MessageType_BackupDevice;
        case 35: return MessageType_EntropyRequest;
        case 36: return MessageType_EntropyAck;
        case 41: return MessageType_PassphraseRequest;
        case 42: return MessageType_PassphraseAck;
        case 45: return MessageType_RecoveryDevice;
        case 46: return MessageType_WordRequest;
        case 47: return MessageType_WordAck;
        case 55: return MessageType_GetFeatures;
        case 79: return MessageType_SdProtect;
        case 82: return MessageType_ChangeWipeCode;
        case 83: return MessageType_EndSession;
        case 84: return MessageType_DoPreauthorized;
        case 85: return MessageType_PreauthorizedRequest;
        case 86: return MessageType_CancelAuthorization;
        case 87: return MessageType_RebootToBootloader;
        case 88: return MessageType_GetFirmwareHash;
        case 89: return MessageType_FirmwareHash;
        case 93: return MessageType_UnlockPath;
        case 94: return MessageType_UnlockedPathRequest;
        case 95: return MessageType_ShowDeviceTutorial;
        case 96: return MessageType_UnlockBootloader;
        case 97: return MessageType_AuthenticateDevice;
        case 98: return MessageType_AuthenticityProof;
        case 990: return MessageType_ChangeLanguage;
        case 991: return MessageType_TranslationDataRequest;
        case 992: return MessageType_TranslationDataAck;
        case 993: return MessageType_SetBrightness;
        case 63: return MessageType_SetU2FCounter;
        case 80: return MessageType_GetNextU2FCounter;
        case 81: return MessageType_NextU2FCounter;
        case 77: return MessageType_Deprecated_PassphraseStateRequest;
        case 78: return MessageType_Deprecated_PassphraseStateAck;
        case 6: return MessageType_FirmwareErase;
        case 7: return MessageType_FirmwareUpload;
        case 8: return MessageType_FirmwareRequest;
        case 32: return MessageType_ProdTestT1;
        case 11: return MessageType_GetPublicKey;
        case 12: return MessageType_PublicKey;
        case 15: return MessageType_SignTx;
        case 21: return MessageType_TxRequest;
        case 22: return MessageType_TxAck;
        case 29: return MessageType_GetAddress;
        case 30: return MessageType_Address;
        case 37: return MessageType_TxAckPaymentRequest;
        case 38: return MessageType_SignMessage;
        case 39: return MessageType_VerifyMessage;
        case 40: return MessageType_MessageSignature;
        case 43: return MessageType_GetOwnershipId;
        case 44: return MessageType_OwnershipId;
        case 49: return MessageType_GetOwnershipProof;
        case 50: return MessageType_OwnershipProof;
        case 51: return MessageType_AuthorizeCoinJoin;
        case 23: return MessageType_CipherKeyValue;
        case 48: return MessageType_CipheredKeyValue;
        case 53: return MessageType_SignIdentity;
        case 54: return MessageType_SignedIdentity;
        case 61: return MessageType_GetECDHSessionKey;
        case 62: return MessageType_ECDHSessionKey;
        case 100: return MessageType_DebugLinkDecision;
        case 101: return MessageType_DebugLinkGetState;
        case 102: return MessageType_DebugLinkState;
        case 103: return MessageType_DebugLinkStop;
        case 104: return MessageType_DebugLinkLog;
        case 110: return MessageType_DebugLinkMemoryRead;
        case 111: return MessageType_DebugLinkMemory;
        case 112: return MessageType_DebugLinkMemoryWrite;
        case 113: return MessageType_DebugLinkFlashErase;
        case 9001: return MessageType_DebugLinkLayout;
        case 9002: return MessageType_DebugLinkReseedRandom;
        case 9003: return MessageType_DebugLinkRecordScreen;
        case 9005: return MessageType_DebugLinkEraseSdCard;
        case 9006: return MessageType_DebugLinkWatchLayout;
        case 9007: return MessageType_DebugLinkResetDebugEvents;
        case 9008: return MessageType_DebugLinkOptigaSetSecMax;
        case 450: return MessageType_EthereumGetPublicKey;
        case 451: return MessageType_EthereumPublicKey;
        case 56: return MessageType_EthereumGetAddress;
        case 57: return MessageType_EthereumAddress;
        case 58: return MessageType_EthereumSignTx;
        case 452: return MessageType_EthereumSignTxEIP1559;
        case 59: return MessageType_EthereumTxRequest;
        case 60: return MessageType_EthereumTxAck;
        case 64: return MessageType_EthereumSignMessage;
        case 65: return MessageType_EthereumVerifyMessage;
        case 66: return MessageType_EthereumMessageSignature;
        case 464: return MessageType_EthereumSignTypedData;
        case 465: return MessageType_EthereumTypedDataStructRequest;
        case 466: return MessageType_EthereumTypedDataStructAck;
        case 467: return MessageType_EthereumTypedDataValueRequest;
        case 468: return MessageType_EthereumTypedDataValueAck;
        case 469: return MessageType_EthereumTypedDataSignature;
        case 470: return MessageType_EthereumSignTypedHash;
        case 67: return MessageType_NEMGetAddress;
        case 68: return MessageType_NEMAddress;
        case 69: return MessageType_NEMSignTx;
        case 70: return MessageType_NEMSignedTx;
        case 75: return MessageType_NEMDecryptMessage;
        case 76: return MessageType_NEMDecryptedMessage;
        case 150: return MessageType_TezosGetAddress;
        case 151: return MessageType_TezosAddress;
        case 152: return MessageType_TezosSignTx;
        case 153: return MessageType_TezosSignedTx;
        case 154: return MessageType_TezosGetPublicKey;
        case 155: return MessageType_TezosPublicKey;
        case 202: return MessageType_StellarSignTx;
        case 203: return MessageType_StellarTxOpRequest;
        case 207: return MessageType_StellarGetAddress;
        case 208: return MessageType_StellarAddress;
        case 210: return MessageType_StellarCreateAccountOp;
        case 211: return MessageType_StellarPaymentOp;
        case 212: return MessageType_StellarPathPaymentStrictReceiveOp;
        case 213: return MessageType_StellarManageSellOfferOp;
        case 214: return MessageType_StellarCreatePassiveSellOfferOp;
        case 215: return MessageType_StellarSetOptionsOp;
        case 216: return MessageType_StellarChangeTrustOp;
        case 217: return MessageType_StellarAllowTrustOp;
        case 218: return MessageType_StellarAccountMergeOp;
        case 220: return MessageType_StellarManageDataOp;
        case 221: return MessageType_StellarBumpSequenceOp;
        case 222: return MessageType_StellarManageBuyOfferOp;
        case 223: return MessageType_StellarPathPaymentStrictSendOp;
        case 225: return MessageType_StellarClaimClaimableBalanceOp;
        case 230: return MessageType_StellarSignedTx;
        case 305: return MessageType_CardanoGetPublicKey;
        case 306: return MessageType_CardanoPublicKey;
        case 307: return MessageType_CardanoGetAddress;
        case 308: return MessageType_CardanoAddress;
        case 313: return MessageType_CardanoTxItemAck;
        case 314: return MessageType_CardanoTxAuxiliaryDataSupplement;
        case 315: return MessageType_CardanoTxWitnessRequest;
        case 316: return MessageType_CardanoTxWitnessResponse;
        case 317: return MessageType_CardanoTxHostAck;
        case 318: return MessageType_CardanoTxBodyHash;
        case 319: return MessageType_CardanoSignTxFinished;
        case 320: return MessageType_CardanoSignTxInit;
        case 321: return MessageType_CardanoTxInput;
        case 322: return MessageType_CardanoTxOutput;
        case 323: return MessageType_CardanoAssetGroup;
        case 324: return MessageType_CardanoToken;
        case 325: return MessageType_CardanoTxCertificate;
        case 326: return MessageType_CardanoTxWithdrawal;
        case 327: return MessageType_CardanoTxAuxiliaryData;
        case 328: return MessageType_CardanoPoolOwner;
        case 329: return MessageType_CardanoPoolRelayParameters;
        case 330: return MessageType_CardanoGetNativeScriptHash;
        case 331: return MessageType_CardanoNativeScriptHash;
        case 332: return MessageType_CardanoTxMint;
        case 333: return MessageType_CardanoTxCollateralInput;
        case 334: return MessageType_CardanoTxRequiredSigner;
        case 335: return MessageType_CardanoTxInlineDatumChunk;
        case 336: return MessageType_CardanoTxReferenceScriptChunk;
        case 337: return MessageType_CardanoTxReferenceInput;
        case 400: return MessageType_RippleGetAddress;
        case 401: return MessageType_RippleAddress;
        case 402: return MessageType_RippleSignTx;
        case 403: return MessageType_RippleSignedTx;
        case 501: return MessageType_MoneroTransactionInitRequest;
        case 502: return MessageType_MoneroTransactionInitAck;
        case 503: return MessageType_MoneroTransactionSetInputRequest;
        case 504: return MessageType_MoneroTransactionSetInputAck;
        case 507: return MessageType_MoneroTransactionInputViniRequest;
        case 508: return MessageType_MoneroTransactionInputViniAck;
        case 509: return MessageType_MoneroTransactionAllInputsSetRequest;
        case 510: return MessageType_MoneroTransactionAllInputsSetAck;
        case 511: return MessageType_MoneroTransactionSetOutputRequest;
        case 512: return MessageType_MoneroTransactionSetOutputAck;
        case 513: return MessageType_MoneroTransactionAllOutSetRequest;
        case 514: return MessageType_MoneroTransactionAllOutSetAck;
        case 515: return MessageType_MoneroTransactionSignInputRequest;
        case 516: return MessageType_MoneroTransactionSignInputAck;
        case 517: return MessageType_MoneroTransactionFinalRequest;
        case 518: return MessageType_MoneroTransactionFinalAck;
        case 530: return MessageType_MoneroKeyImageExportInitRequest;
        case 531: return MessageType_MoneroKeyImageExportInitAck;
        case 532: return MessageType_MoneroKeyImageSyncStepRequest;
        case 533: return MessageType_MoneroKeyImageSyncStepAck;
        case 534: return MessageType_MoneroKeyImageSyncFinalRequest;
        case 535: return MessageType_MoneroKeyImageSyncFinalAck;
        case 540: return MessageType_MoneroGetAddress;
        case 541: return MessageType_MoneroAddress;
        case 542: return MessageType_MoneroGetWatchKey;
        case 543: return MessageType_MoneroWatchKey;
        case 546: return MessageType_DebugMoneroDiagRequest;
        case 547: return MessageType_DebugMoneroDiagAck;
        case 550: return MessageType_MoneroGetTxKeyRequest;
        case 551: return MessageType_MoneroGetTxKeyAck;
        case 552: return MessageType_MoneroLiveRefreshStartRequest;
        case 553: return MessageType_MoneroLiveRefreshStartAck;
        case 554: return MessageType_MoneroLiveRefreshStepRequest;
        case 555: return MessageType_MoneroLiveRefreshStepAck;
        case 556: return MessageType_MoneroLiveRefreshFinalRequest;
        case 557: return MessageType_MoneroLiveRefreshFinalAck;
        case 600: return MessageType_EosGetPublicKey;
        case 601: return MessageType_EosPublicKey;
        case 602: return MessageType_EosSignTx;
        case 603: return MessageType_EosTxActionRequest;
        case 604: return MessageType_EosTxActionAck;
        case 605: return MessageType_EosSignedTx;
        case 700: return MessageType_BinanceGetAddress;
        case 701: return MessageType_BinanceAddress;
        case 702: return MessageType_BinanceGetPublicKey;
        case 703: return MessageType_BinancePublicKey;
        case 704: return MessageType_BinanceSignTx;
        case 705: return MessageType_BinanceTxRequest;
        case 706: return MessageType_BinanceTransferMsg;
        case 707: return MessageType_BinanceOrderMsg;
        case 708: return MessageType_BinanceCancelMsg;
        case 709: return MessageType_BinanceSignedTx;
        case 800: return MessageType_WebAuthnListResidentCredentials;
        case 801: return MessageType_WebAuthnCredentials;
        case 802: return MessageType_WebAuthnAddResidentCredential;
        case 803: return MessageType_WebAuthnRemoveResidentCredential;
        case 900: return MessageType_SolanaGetPublicKey;
        case 901: return MessageType_SolanaPublicKey;
        case 902: return MessageType_SolanaGetAddress;
        case 903: return MessageType_SolanaAddress;
        case 904: return MessageType_SolanaSignTx;
        case 905: return MessageType_SolanaTxSignature;
        case 9100: return MessageType_BenchmarkListNames;
        case 9101: return MessageType_BenchmarkNames;
        case 9102: return MessageType_BenchmarkRun;
        case 9103: return MessageType_BenchmarkResult;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MessageType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        MessageType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MessageType>() {
            public MessageType findValueByNumber(int number) {
              return MessageType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return TrezorMessage.getDescriptor().getEnumTypes().get(0);
    }

    private static final MessageType[] VALUES = values();

    public static MessageType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private MessageType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:hw.trezor.messages.MessageType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\016messages.proto\022\022hw.trezor.messages\032\rop" +
      "tions.proto*\201U\n\013MessageType\022(\n\026MessageTy" +
      "pe_Initialize\020\000\032\014\220\265\030\001\260\265\030\001\200\246\035\001\022\036\n\020Message" +
      "Type_Ping\020\001\032\010\220\265\030\001\200\246\035\001\022%\n\023MessageType_Suc" +
      "cess\020\002\032\014\230\265\030\001\250\265\030\001\200\246\035\001\022%\n\023MessageType_Fail" +
      "ure\020\003\032\014\230\265\030\001\250\265\030\001\200\246\035\001\022#\n\025MessageType_Chang" +
      "ePin\020\004\032\010\220\265\030\001\200\246\035\001\022$\n\026MessageType_WipeDevi" +
      "ce\020\005\032\010\220\265\030\001\200\246\035\001\022$\n\026MessageType_GetEntropy" +
      "\020\t\032\010\220\265\030\001\200\246\035\001\022!\n\023MessageType_Entropy\020\n\032\010\230" +
      "\265\030\001\200\246\035\001\022$\n\026MessageType_LoadDevice\020\r\032\010\220\265\030" +
      "\001\200\246\035\001\022%\n\027MessageType_ResetDevice\020\016\032\010\220\265\030\001" +
      "\200\246\035\001\022!\n\023MessageType_SetBusy\020\020\032\010\220\265\030\001\200\246\035\001\022" +
      "\"\n\024MessageType_Features\020\021\032\010\230\265\030\001\200\246\035\001\022*\n\034M" +
      "essageType_PinMatrixRequest\020\022\032\010\230\265\030\001\200\246\035\001\022" +
      ".\n\030MessageType_PinMatrixAck\020\023\032\020\220\265\030\001\260\265\030\001\300" +
      "\265\030\001\200\246\035\001\022$\n\022MessageType_Cancel\020\024\032\014\220\265\030\001\260\265\030" +
      "\001\200\246\035\001\022$\n\026MessageType_LockDevice\020\030\032\010\220\265\030\001\200" +
      "\246\035\001\022\'\n\031MessageType_ApplySettings\020\031\032\010\220\265\030\001" +
      "\200\246\035\001\022\'\n\031MessageType_ButtonRequest\020\032\032\010\230\265\030" +
      "\001\200\246\035\001\022+\n\025MessageType_ButtonAck\020\033\032\020\220\265\030\001\260\265" +
      "\030\001\300\265\030\001\200\246\035\001\022$\n\026MessageType_ApplyFlags\020\034\032\010" +
      "\220\265\030\001\200\246\035\001\022\"\n\024MessageType_GetNonce\020\037\032\010\220\265\030\001" +
      "\200\246\035\001\022\037\n\021MessageType_Nonce\020!\032\010\230\265\030\001\200\246\035\001\022&\n" +
      "\030MessageType_BackupDevice\020\"\032\010\220\265\030\001\200\246\035\001\022(\n" +
      "\032MessageType_EntropyRequest\020#\032\010\230\265\030\001\200\246\035\001\022" +
      "$\n\026MessageType_EntropyAck\020$\032\010\220\265\030\001\200\246\035\001\022+\n" +
      "\035MessageType_PassphraseRequest\020)\032\010\230\265\030\001\200\246" +
      "\035\001\022/\n\031MessageType_PassphraseAck\020*\032\020\220\265\030\001\260" +
      "\265\030\001\300\265\030\001\200\246\035\001\022(\n\032MessageType_RecoveryDevic" +
      "e\020-\032\010\220\265\030\001\200\246\035\001\022%\n\027MessageType_WordRequest" +
      "\020.\032\010\230\265\030\001\200\246\035\001\022!\n\023MessageType_WordAck\020/\032\010\220" +
      "\265\030\001\200\246\035\001\022%\n\027MessageType_GetFeatures\0207\032\010\220\265" +
      "\030\001\200\246\035\001\022#\n\025MessageType_SdProtect\020O\032\010\220\265\030\001\200" +
      "\246\035\001\022(\n\032MessageType_ChangeWipeCode\020R\032\010\220\265\030" +
      "\001\200\246\035\001\022$\n\026MessageType_EndSession\020S\032\010\220\265\030\001\200" +
      "\246\035\001\022)\n\033MessageType_DoPreauthorized\020T\032\010\220\265" +
      "\030\001\200\246\035\001\022.\n MessageType_PreauthorizedReque" +
      "st\020U\032\010\230\265\030\001\200\246\035\001\022-\n\037MessageType_CancelAuth" +
      "orization\020V\032\010\220\265\030\001\200\246\035\001\022,\n\036MessageType_Reb" +
      "ootToBootloader\020W\032\010\220\265\030\001\200\246\035\001\022)\n\033MessageTy" +
      "pe_GetFirmwareHash\020X\032\010\220\265\030\001\200\246\035\001\022&\n\030Messag" +
      "eType_FirmwareHash\020Y\032\010\230\265\030\001\200\246\035\001\022$\n\026Messag" +
      "eType_UnlockPath\020]\032\010\220\265\030\001\200\246\035\001\022-\n\037MessageT" +
      "ype_UnlockedPathRequest\020^\032\010\230\265\030\001\200\246\035\001\022,\n\036M" +
      "essageType_ShowDeviceTutorial\020_\032\010\220\265\030\001\200\246\035" +
      "\001\022*\n\034MessageType_UnlockBootloader\020`\032\010\220\265\030" +
      "\001\200\246\035\001\022,\n\036MessageType_AuthenticateDevice\020" +
      "a\032\010\230\265\030\001\200\246\035\001\022+\n\035MessageType_AuthenticityP" +
      "roof\020b\032\010\220\265\030\001\200\246\035\001\022)\n\032MessageType_ChangeLa" +
      "nguage\020\336\007\032\010\220\265\030\001\200\246\035\001\0221\n\"MessageType_Trans" +
      "lationDataRequest\020\337\007\032\010\230\265\030\001\200\246\035\001\022-\n\036Messag" +
      "eType_TranslationDataAck\020\340\007\032\010\220\265\030\001\200\246\035\001\022(\n" +
      "\031MessageType_SetBrightness\020\341\007\032\010\220\265\030\001\200\246\035\001\022" +
      "#\n\031MessageType_SetU2FCounter\020?\032\004\220\265\030\001\022\'\n\035" +
      "MessageType_GetNextU2FCounter\020P\032\004\220\265\030\001\022$\n" +
      "\032MessageType_NextU2FCounter\020Q\032\004\230\265\030\001\0225\n-M" +
      "essageType_Deprecated_PassphraseStateReq" +
      "uest\020M\032\002\010\001\0221\n)MessageType_Deprecated_Pas" +
      "sphraseStateAck\020N\032\002\010\001\022+\n\031MessageType_Fir" +
      "mwareErase\020\006\032\014\220\265\030\001\270\265\030\001\200\246\035\001\022,\n\032MessageTyp" +
      "e_FirmwareUpload\020\007\032\014\220\265\030\001\270\265\030\001\200\246\035\001\022-\n\033Mess" +
      "ageType_FirmwareRequest\020\010\032\014\230\265\030\001\270\265\030\001\200\246\035\001\022" +
      "(\n\026MessageType_ProdTestT1\020 \032\014\220\265\030\001\270\265\030\001\200\246\035" +
      "\001\022&\n\030MessageType_GetPublicKey\020\013\032\010\220\265\030\001\200\246\035" +
      "\001\022#\n\025MessageType_PublicKey\020\014\032\010\230\265\030\001\200\246\035\001\022 " +
      "\n\022MessageType_SignTx\020\017\032\010\220\265\030\001\200\246\035\001\022#\n\025Mess" +
      "ageType_TxRequest\020\025\032\010\230\265\030\001\200\246\035\001\022\037\n\021Message" +
      "Type_TxAck\020\026\032\010\220\265\030\001\200\246\035\001\022$\n\026MessageType_Ge" +
      "tAddress\020\035\032\010\220\265\030\001\200\246\035\001\022!\n\023MessageType_Addr" +
      "ess\020\036\032\010\230\265\030\001\200\246\035\001\022)\n\037MessageType_TxAckPaym" +
      "entRequest\020%\032\004\220\265\030\001\022%\n\027MessageType_SignMe" +
      "ssage\020&\032\010\220\265\030\001\200\246\035\001\022\'\n\031MessageType_VerifyM" +
      "essage\020\'\032\010\220\265\030\001\200\246\035\001\022*\n\034MessageType_Messag" +
      "eSignature\020(\032\010\230\265\030\001\200\246\035\001\022(\n\032MessageType_Ge" +
      "tOwnershipId\020+\032\010\220\265\030\001\200\246\035\001\022%\n\027MessageType_" +
      "OwnershipId\020,\032\010\230\265\030\001\200\246\035\001\022+\n\035MessageType_G" +
      "etOwnershipProof\0201\032\010\220\265\030\001\200\246\035\001\022(\n\032MessageT" +
      "ype_OwnershipProof\0202\032\010\230\265\030\001\200\246\035\001\022+\n\035Messag" +
      "eType_AuthorizeCoinJoin\0203\032\010\220\265\030\001\200\246\035\001\022(\n\032M" +
      "essageType_CipherKeyValue\020\027\032\010\220\265\030\001\200\246\035\001\022*\n" +
      "\034MessageType_CipheredKeyValue\0200\032\010\230\265\030\001\200\246\035" +
      "\001\022&\n\030MessageType_SignIdentity\0205\032\010\220\265\030\001\200\246\035" +
      "\001\022(\n\032MessageType_SignedIdentity\0206\032\010\230\265\030\001\200" +
      "\246\035\001\022+\n\035MessageType_GetECDHSessionKey\020=\032\010" +
      "\220\265\030\001\200\246\035\001\022(\n\032MessageType_ECDHSessionKey\020>" +
      "\032\010\230\265\030\001\200\246\035\001\0223\n\035MessageType_DebugLinkDecis" +
      "ion\020d\032\020\240\265\030\001\260\265\030\001\300\265\030\001\200\246\035\001\022/\n\035MessageType_D" +
      "ebugLinkGetState\020e\032\014\240\265\030\001\260\265\030\001\200\246\035\001\022(\n\032Mess" +
      "ageType_DebugLinkState\020f\032\010\250\265\030\001\200\246\035\001\022\'\n\031Me" +
      "ssageType_DebugLinkStop\020g\032\010\240\265\030\001\200\246\035\001\022&\n\030M" +
      "essageType_DebugLinkLog\020h\032\010\250\265\030\001\200\246\035\001\022-\n\037M" +
      "essageType_DebugLinkMemoryRead\020n\032\010\240\265\030\001\200\246" +
      "\035\001\022)\n\033MessageType_DebugLinkMemory\020o\032\010\250\265\030" +
      "\001\200\246\035\001\022.\n MessageType_DebugLinkMemoryWrit" +
      "e\020p\032\010\240\265\030\001\200\246\035\001\022-\n\037MessageType_DebugLinkFl" +
      "ashErase\020q\032\010\240\265\030\001\200\246\035\001\022*\n\033MessageType_Debu" +
      "gLinkLayout\020\251F\032\010\250\265\030\001\200\246\035\001\0220\n!MessageType_" +
      "DebugLinkReseedRandom\020\252F\032\010\240\265\030\001\200\246\035\001\0220\n!Me" +
      "ssageType_DebugLinkRecordScreen\020\253F\032\010\240\265\030\001" +
      "\200\246\035\001\022/\n MessageType_DebugLinkEraseSdCard" +
      "\020\255F\032\010\240\265\030\001\200\246\035\001\022/\n MessageType_DebugLinkWa" +
      "tchLayout\020\256F\032\010\240\265\030\001\200\246\035\001\0224\n%MessageType_De" +
      "bugLinkResetDebugEvents\020\257F\032\010\240\265\030\001\200\246\035\001\0223\n$" +
      "MessageType_DebugLinkOptigaSetSecMax\020\260F\032" +
      "\010\240\265\030\001\200\246\035\001\022+\n MessageType_EthereumGetPubl" +
      "icKey\020\302\003\032\004\220\265\030\001\022(\n\035MessageType_EthereumPu" +
      "blicKey\020\303\003\032\004\230\265\030\001\022(\n\036MessageType_Ethereum" +
      "GetAddress\0208\032\004\220\265\030\001\022%\n\033MessageType_Ethere" +
      "umAddress\0209\032\004\230\265\030\001\022$\n\032MessageType_Ethereu" +
      "mSignTx\020:\032\004\220\265\030\001\022,\n!MessageType_EthereumS" +
      "ignTxEIP1559\020\304\003\032\004\220\265\030\001\022\'\n\035MessageType_Eth" +
      "ereumTxRequest\020;\032\004\230\265\030\001\022#\n\031MessageType_Et" +
      "hereumTxAck\020<\032\004\220\265\030\001\022)\n\037MessageType_Ether" +
      "eumSignMessage\020@\032\004\220\265\030\001\022+\n!MessageType_Et" +
      "hereumVerifyMessage\020A\032\004\220\265\030\001\022.\n$MessageTy" +
      "pe_EthereumMessageSignature\020B\032\004\230\265\030\001\022,\n!M" +
      "essageType_EthereumSignTypedData\020\320\003\032\004\220\265\030" +
      "\001\0225\n*MessageType_EthereumTypedDataStruct" +
      "Request\020\321\003\032\004\230\265\030\001\0221\n&MessageType_Ethereum" +
      "TypedDataStructAck\020\322\003\032\004\220\265\030\001\0224\n)MessageTy" +
      "pe_EthereumTypedDataValueRequest\020\323\003\032\004\230\265\030" +
      "\001\0220\n%MessageType_EthereumTypedDataValueA" +
      "ck\020\324\003\032\004\220\265\030\001\0221\n&MessageType_EthereumTyped" +
      "DataSignature\020\325\003\032\004\230\265\030\001\022,\n!MessageType_Et" +
      "hereumSignTypedHash\020\326\003\032\004\220\265\030\001\022#\n\031MessageT" +
      "ype_NEMGetAddress\020C\032\004\220\265\030\001\022 \n\026MessageType" +
      "_NEMAddress\020D\032\004\230\265\030\001\022\037\n\025MessageType_NEMSi" +
      "gnTx\020E\032\004\220\265\030\001\022!\n\027MessageType_NEMSignedTx\020" +
      "F\032\004\230\265\030\001\022\'\n\035MessageType_NEMDecryptMessage" +
      "\020K\032\004\220\265\030\001\022)\n\037MessageType_NEMDecryptedMess" +
      "age\020L\032\004\230\265\030\001\022&\n\033MessageType_TezosGetAddre" +
      "ss\020\226\001\032\004\220\265\030\001\022#\n\030MessageType_TezosAddress\020" +
      "\227\001\032\004\230\265\030\001\022\"\n\027MessageType_TezosSignTx\020\230\001\032\004" +
      "\220\265\030\001\022$\n\031MessageType_TezosSignedTx\020\231\001\032\004\230\265" +
      "\030\001\022(\n\035MessageType_TezosGetPublicKey\020\232\001\032\004" +
      "\220\265\030\001\022%\n\032MessageType_TezosPublicKey\020\233\001\032\004\230" +
      "\265\030\001\022$\n\031MessageType_StellarSignTx\020\312\001\032\004\220\265\030" +
      "\001\022)\n\036MessageType_StellarTxOpRequest\020\313\001\032\004" +
      "\230\265\030\001\022(\n\035MessageType_StellarGetAddress\020\317\001" +
      "\032\004\220\265\030\001\022%\n\032MessageType_StellarAddress\020\320\001\032" +
      "\004\230\265\030\001\022-\n\"MessageType_StellarCreateAccoun" +
      "tOp\020\322\001\032\004\220\265\030\001\022\'\n\034MessageType_StellarPayme" +
      "ntOp\020\323\001\032\004\220\265\030\001\0228\n-MessageType_StellarPath" +
      "PaymentStrictReceiveOp\020\324\001\032\004\220\265\030\001\022/\n$Messa" +
      "geType_StellarManageSellOfferOp\020\325\001\032\004\220\265\030\001" +
      "\0226\n+MessageType_StellarCreatePassiveSell" +
      "OfferOp\020\326\001\032\004\220\265\030\001\022*\n\037MessageType_StellarS" +
      "etOptionsOp\020\327\001\032\004\220\265\030\001\022+\n MessageType_Stel" +
      "larChangeTrustOp\020\330\001\032\004\220\265\030\001\022*\n\037MessageType" +
      "_StellarAllowTrustOp\020\331\001\032\004\220\265\030\001\022,\n!Message" +
      "Type_StellarAccountMergeOp\020\332\001\032\004\220\265\030\001\022*\n\037M" +
      "essageType_StellarManageDataOp\020\334\001\032\004\220\265\030\001\022" +
      ",\n!MessageType_StellarBumpSequenceOp\020\335\001\032" +
      "\004\220\265\030\001\022.\n#MessageType_StellarManageBuyOff" +
      "erOp\020\336\001\032\004\220\265\030\001\0225\n*MessageType_StellarPath" +
      "PaymentStrictSendOp\020\337\001\032\004\220\265\030\001\0225\n*MessageT" +
      "ype_StellarClaimClaimableBalanceOp\020\341\001\032\004\220" +
      "\265\030\001\022&\n\033MessageType_StellarSignedTx\020\346\001\032\004\230" +
      "\265\030\001\022*\n\037MessageType_CardanoGetPublicKey\020\261" +
      "\002\032\004\220\265\030\001\022\'\n\034MessageType_CardanoPublicKey\020" +
      "\262\002\032\004\230\265\030\001\022(\n\035MessageType_CardanoGetAddres" +
      "s\020\263\002\032\004\220\265\030\001\022%\n\032MessageType_CardanoAddress" +
      "\020\264\002\032\004\230\265\030\001\022\'\n\034MessageType_CardanoTxItemAc" +
      "k\020\271\002\032\004\230\265\030\001\0227\n,MessageType_CardanoTxAuxil" +
      "iaryDataSupplement\020\272\002\032\004\230\265\030\001\022.\n#MessageTy" +
      "pe_CardanoTxWitnessRequest\020\273\002\032\004\220\265\030\001\022/\n$M" +
      "essageType_CardanoTxWitnessResponse\020\274\002\032\004" +
      "\230\265\030\001\022\'\n\034MessageType_CardanoTxHostAck\020\275\002\032" +
      "\004\220\265\030\001\022(\n\035MessageType_CardanoTxBodyHash\020\276" +
      "\002\032\004\230\265\030\001\022,\n!MessageType_CardanoSignTxFini" +
      "shed\020\277\002\032\004\230\265\030\001\022(\n\035MessageType_CardanoSign" +
      "TxInit\020\300\002\032\004\220\265\030\001\022%\n\032MessageType_CardanoTx" +
      "Input\020\301\002\032\004\220\265\030\001\022&\n\033MessageType_CardanoTxO" +
      "utput\020\302\002\032\004\220\265\030\001\022(\n\035MessageType_CardanoAss" +
      "etGroup\020\303\002\032\004\220\265\030\001\022#\n\030MessageType_CardanoT" +
      "oken\020\304\002\032\004\220\265\030\001\022+\n MessageType_CardanoTxCe" +
      "rtificate\020\305\002\032\004\220\265\030\001\022*\n\037MessageType_Cardan" +
      "oTxWithdrawal\020\306\002\032\004\220\265\030\001\022-\n\"MessageType_Ca" +
      "rdanoTxAuxiliaryData\020\307\002\032\004\220\265\030\001\022\'\n\034Message" +
      "Type_CardanoPoolOwner\020\310\002\032\004\220\265\030\001\0221\n&Messag" +
      "eType_CardanoPoolRelayParameters\020\311\002\032\004\220\265\030" +
      "\001\0221\n&MessageType_CardanoGetNativeScriptH" +
      "ash\020\312\002\032\004\220\265\030\001\022.\n#MessageType_CardanoNativ" +
      "eScriptHash\020\313\002\032\004\230\265\030\001\022$\n\031MessageType_Card" +
      "anoTxMint\020\314\002\032\004\220\265\030\001\022/\n$MessageType_Cardan" +
      "oTxCollateralInput\020\315\002\032\004\220\265\030\001\022.\n#MessageTy" +
      "pe_CardanoTxRequiredSigner\020\316\002\032\004\220\265\030\001\0220\n%M" +
      "essageType_CardanoTxInlineDatumChunk\020\317\002\032" +
      "\004\220\265\030\001\0224\n)MessageType_CardanoTxReferenceS" +
      "criptChunk\020\320\002\032\004\220\265\030\001\022.\n#MessageType_Carda" +
      "noTxReferenceInput\020\321\002\032\004\220\265\030\001\022\'\n\034MessageTy" +
      "pe_RippleGetAddress\020\220\003\032\004\220\265\030\001\022$\n\031MessageT" +
      "ype_RippleAddress\020\221\003\032\004\230\265\030\001\022#\n\030MessageTyp" +
      "e_RippleSignTx\020\222\003\032\004\220\265\030\001\022%\n\032MessageType_R" +
      "ippleSignedTx\020\223\003\032\004\220\265\030\001\0223\n(MessageType_Mo" +
      "neroTransactionInitRequest\020\365\003\032\004\230\265\030\001\022/\n$M" +
      "essageType_MoneroTransactionInitAck\020\366\003\032\004" +
      "\230\265\030\001\0227\n,MessageType_MoneroTransactionSet" +
      "InputRequest\020\367\003\032\004\230\265\030\001\0223\n(MessageType_Mon" +
      "eroTransactionSetInputAck\020\370\003\032\004\230\265\030\001\0228\n-Me" +
      "ssageType_MoneroTransactionInputViniRequ" +
      "est\020\373\003\032\004\230\265\030\001\0224\n)MessageType_MoneroTransa" +
      "ctionInputViniAck\020\374\003\032\004\230\265\030\001\022;\n0MessageTyp" +
      "e_MoneroTransactionAllInputsSetRequest\020\375" +
      "\003\032\004\230\265\030\001\0227\n,MessageType_MoneroTransaction" +
      "AllInputsSetAck\020\376\003\032\004\230\265\030\001\0228\n-MessageType_" +
      "MoneroTransactionSetOutputRequest\020\377\003\032\004\230\265" +
      "\030\001\0224\n)MessageType_MoneroTransactionSetOu" +
      "tputAck\020\200\004\032\004\230\265\030\001\0228\n-MessageType_MoneroTr" +
      "ansactionAllOutSetRequest\020\201\004\032\004\230\265\030\001\0224\n)Me" +
      "ssageType_MoneroTransactionAllOutSetAck\020" +
      "\202\004\032\004\230\265\030\001\0228\n-MessageType_MoneroTransactio" +
      "nSignInputRequest\020\203\004\032\004\230\265\030\001\0224\n)MessageTyp" +
      "e_MoneroTransactionSignInputAck\020\204\004\032\004\230\265\030\001" +
      "\0224\n)MessageType_MoneroTransactionFinalRe" +
      "quest\020\205\004\032\004\230\265\030\001\0220\n%MessageType_MoneroTran" +
      "sactionFinalAck\020\206\004\032\004\230\265\030\001\0226\n+MessageType_" +
      "MoneroKeyImageExportInitRequest\020\222\004\032\004\230\265\030\001" +
      "\0222\n\'MessageType_MoneroKeyImageExportInit" +
      "Ack\020\223\004\032\004\230\265\030\001\0224\n)MessageType_MoneroKeyIma" +
      "geSyncStepRequest\020\224\004\032\004\230\265\030\001\0220\n%MessageTyp" +
      "e_MoneroKeyImageSyncStepAck\020\225\004\032\004\230\265\030\001\0225\n*" +
      "MessageType_MoneroKeyImageSyncFinalReque" +
      "st\020\226\004\032\004\230\265\030\001\0221\n&MessageType_MoneroKeyImag" +
      "eSyncFinalAck\020\227\004\032\004\230\265\030\001\022\'\n\034MessageType_Mo" +
      "neroGetAddress\020\234\004\032\004\220\265\030\001\022$\n\031MessageType_M" +
      "oneroAddress\020\235\004\032\004\230\265\030\001\022(\n\035MessageType_Mon" +
      "eroGetWatchKey\020\236\004\032\004\220\265\030\001\022%\n\032MessageType_M" +
      "oneroWatchKey\020\237\004\032\004\230\265\030\001\022-\n\"MessageType_De" +
      "bugMoneroDiagRequest\020\242\004\032\004\220\265\030\001\022)\n\036Message" +
      "Type_DebugMoneroDiagAck\020\243\004\032\004\230\265\030\001\022,\n!Mess" +
      "ageType_MoneroGetTxKeyRequest\020\246\004\032\004\220\265\030\001\022(" +
      "\n\035MessageType_MoneroGetTxKeyAck\020\247\004\032\004\230\265\030\001" +
      "\0224\n)MessageType_MoneroLiveRefreshStartRe" +
      "quest\020\250\004\032\004\220\265\030\001\0220\n%MessageType_MoneroLive" +
      "RefreshStartAck\020\251\004\032\004\230\265\030\001\0223\n(MessageType_" +
      "MoneroLiveRefreshStepRequest\020\252\004\032\004\220\265\030\001\022/\n" +
      "$MessageType_MoneroLiveRefreshStepAck\020\253\004" +
      "\032\004\230\265\030\001\0224\n)MessageType_MoneroLiveRefreshF" +
      "inalRequest\020\254\004\032\004\220\265\030\001\0220\n%MessageType_Mone" +
      "roLiveRefreshFinalAck\020\255\004\032\004\230\265\030\001\022&\n\033Messag" +
      "eType_EosGetPublicKey\020\330\004\032\004\220\265\030\001\022#\n\030Messag" +
      "eType_EosPublicKey\020\331\004\032\004\230\265\030\001\022 \n\025MessageTy" +
      "pe_EosSignTx\020\332\004\032\004\220\265\030\001\022)\n\036MessageType_Eos" +
      "TxActionRequest\020\333\004\032\004\230\265\030\001\022%\n\032MessageType_" +
      "EosTxActionAck\020\334\004\032\004\220\265\030\001\022\"\n\027MessageType_E" +
      "osSignedTx\020\335\004\032\004\230\265\030\001\022(\n\035MessageType_Binan" +
      "ceGetAddress\020\274\005\032\004\220\265\030\001\022%\n\032MessageType_Bin" +
      "anceAddress\020\275\005\032\004\230\265\030\001\022*\n\037MessageType_Bina" +
      "nceGetPublicKey\020\276\005\032\004\220\265\030\001\022\'\n\034MessageType_" +
      "BinancePublicKey\020\277\005\032\004\230\265\030\001\022$\n\031MessageType" +
      "_BinanceSignTx\020\300\005\032\004\220\265\030\001\022\'\n\034MessageType_B" +
      "inanceTxRequest\020\301\005\032\004\230\265\030\001\022)\n\036MessageType_" +
      "BinanceTransferMsg\020\302\005\032\004\220\265\030\001\022&\n\033MessageTy" +
      "pe_BinanceOrderMsg\020\303\005\032\004\220\265\030\001\022\'\n\034MessageTy" +
      "pe_BinanceCancelMsg\020\304\005\032\004\220\265\030\001\022&\n\033MessageT" +
      "ype_BinanceSignedTx\020\305\005\032\004\230\265\030\001\0226\n+MessageT" +
      "ype_WebAuthnListResidentCredentials\020\240\006\032\004" +
      "\220\265\030\001\022*\n\037MessageType_WebAuthnCredentials\020" +
      "\241\006\032\004\230\265\030\001\0224\n)MessageType_WebAuthnAddResid" +
      "entCredential\020\242\006\032\004\220\265\030\001\0227\n,MessageType_We" +
      "bAuthnRemoveResidentCredential\020\243\006\032\004\220\265\030\001\022" +
      ")\n\036MessageType_SolanaGetPublicKey\020\204\007\032\004\220\265" +
      "\030\001\022&\n\033MessageType_SolanaPublicKey\020\205\007\032\004\230\265" +
      "\030\001\022\'\n\034MessageType_SolanaGetAddress\020\206\007\032\004\220" +
      "\265\030\001\022$\n\031MessageType_SolanaAddress\020\207\007\032\004\230\265\030" +
      "\001\022#\n\030MessageType_SolanaSignTx\020\210\007\032\004\220\265\030\001\022(" +
      "\n\035MessageType_SolanaTxSignature\020\211\007\032\004\230\265\030\001" +
      "\022)\n\036MessageType_BenchmarkListNames\020\214G\032\004\200" +
      "\246\035\001\022%\n\032MessageType_BenchmarkNames\020\215G\032\004\200\246" +
      "\035\001\022#\n\030MessageType_BenchmarkRun\020\216G\032\004\200\246\035\001\022" +
      "&\n\033MessageType_BenchmarkResult\020\217G\032\004\200\246\035\001\032" +
      "\004\310\363\030\001\"\004\010Z\020\\\"\004\010G\020J\"\004\010r\020z\"\006\010\333\001\020\333\001\"\006\010\340\001\020\340\001\"" +
      "\006\010\254\002\020\260\002\"\006\010\265\002\020\270\002B<\n\'com.sparrowwallet.lar" +
      "k.trezor.generatedB\rTrezorMessage\200\246\035\001"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          TrezorOptions.getDescriptor(),
        });
    descriptor.resolveAllFeaturesImmutable();
    TrezorOptions.getDescriptor();
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(TrezorOptions.bitcoinOnly);
    registry.add(TrezorOptions.hasBitcoinOnlyValues);
    registry.add(TrezorOptions.includeInBitcoinOnly);
    registry.add(TrezorOptions.wireBootloader);
    registry.add(TrezorOptions.wireDebugIn);
    registry.add(TrezorOptions.wireDebugOut);
    registry.add(TrezorOptions.wireIn);
    registry.add(TrezorOptions.wireNoFsm);
    registry.add(TrezorOptions.wireOut);
    registry.add(TrezorOptions.wireTiny);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
