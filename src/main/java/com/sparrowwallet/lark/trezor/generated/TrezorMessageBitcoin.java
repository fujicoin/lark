// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: messages-bitcoin.proto
// Protobuf Java Version: 4.28.3

package com.sparrowwallet.lark.trezor.generated;

public final class TrezorMessageBitcoin {
  private TrezorMessageBitcoin() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 28,
      /* patch= */ 3,
      /* suffix= */ "",
      TrezorMessageBitcoin.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * *
   * Type of script which will be used for transaction input
   * </pre>
   *
   * Protobuf enum {@code hw.trezor.messages.bitcoin.InputScriptType}
   */
  public enum InputScriptType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * standard P2PKH address
     * </pre>
     *
     * <code>SPENDADDRESS = 0;</code>
     */
    SPENDADDRESS(0),
    /**
     * <pre>
     * P2SH multisig address
     * </pre>
     *
     * <code>SPENDMULTISIG = 1;</code>
     */
    SPENDMULTISIG(1),
    /**
     * <pre>
     * reserved for external inputs (coinjoin)
     * </pre>
     *
     * <code>EXTERNAL = 2;</code>
     */
    EXTERNAL(2),
    /**
     * <pre>
     * native SegWit
     * </pre>
     *
     * <code>SPENDWITNESS = 3;</code>
     */
    SPENDWITNESS(3),
    /**
     * <pre>
     * SegWit over P2SH (backward compatible)
     * </pre>
     *
     * <code>SPENDP2SHWITNESS = 4;</code>
     */
    SPENDP2SHWITNESS(4),
    /**
     * <pre>
     * Taproot
     * </pre>
     *
     * <code>SPENDTAPROOT = 5;</code>
     */
    SPENDTAPROOT(5),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        InputScriptType.class.getName());
    }
    /**
     * <pre>
     * standard P2PKH address
     * </pre>
     *
     * <code>SPENDADDRESS = 0;</code>
     */
    public static final int SPENDADDRESS_VALUE = 0;
    /**
     * <pre>
     * P2SH multisig address
     * </pre>
     *
     * <code>SPENDMULTISIG = 1;</code>
     */
    public static final int SPENDMULTISIG_VALUE = 1;
    /**
     * <pre>
     * reserved for external inputs (coinjoin)
     * </pre>
     *
     * <code>EXTERNAL = 2;</code>
     */
    public static final int EXTERNAL_VALUE = 2;
    /**
     * <pre>
     * native SegWit
     * </pre>
     *
     * <code>SPENDWITNESS = 3;</code>
     */
    public static final int SPENDWITNESS_VALUE = 3;
    /**
     * <pre>
     * SegWit over P2SH (backward compatible)
     * </pre>
     *
     * <code>SPENDP2SHWITNESS = 4;</code>
     */
    public static final int SPENDP2SHWITNESS_VALUE = 4;
    /**
     * <pre>
     * Taproot
     * </pre>
     *
     * <code>SPENDTAPROOT = 5;</code>
     */
    public static final int SPENDTAPROOT_VALUE = 5;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static InputScriptType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static InputScriptType forNumber(int value) {
      switch (value) {
        case 0: return SPENDADDRESS;
        case 1: return SPENDMULTISIG;
        case 2: return EXTERNAL;
        case 3: return SPENDWITNESS;
        case 4: return SPENDP2SHWITNESS;
        case 5: return SPENDTAPROOT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<InputScriptType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        InputScriptType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<InputScriptType>() {
            public InputScriptType findValueByNumber(int number) {
              return InputScriptType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.getDescriptor().getEnumTypes().get(0);
    }

    private static final InputScriptType[] VALUES = values();

    public static InputScriptType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private InputScriptType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:hw.trezor.messages.bitcoin.InputScriptType)
  }

  /**
   * <pre>
   * *
   * Type of script which will be used for transaction output
   * </pre>
   *
   * Protobuf enum {@code hw.trezor.messages.bitcoin.OutputScriptType}
   */
  public enum OutputScriptType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * used for all addresses (bitcoin, p2sh, witness)
     * </pre>
     *
     * <code>PAYTOADDRESS = 0;</code>
     */
    PAYTOADDRESS(0),
    /**
     * <pre>
     * p2sh address (deprecated; use PAYTOADDRESS)
     * </pre>
     *
     * <code>PAYTOSCRIPTHASH = 1;</code>
     */
    PAYTOSCRIPTHASH(1),
    /**
     * <pre>
     * only for change output
     * </pre>
     *
     * <code>PAYTOMULTISIG = 2;</code>
     */
    PAYTOMULTISIG(2),
    /**
     * <pre>
     * op_return
     * </pre>
     *
     * <code>PAYTOOPRETURN = 3;</code>
     */
    PAYTOOPRETURN(3),
    /**
     * <pre>
     * only for change output
     * </pre>
     *
     * <code>PAYTOWITNESS = 4;</code>
     */
    PAYTOWITNESS(4),
    /**
     * <pre>
     * only for change output
     * </pre>
     *
     * <code>PAYTOP2SHWITNESS = 5;</code>
     */
    PAYTOP2SHWITNESS(5),
    /**
     * <pre>
     * only for change output
     * </pre>
     *
     * <code>PAYTOTAPROOT = 6;</code>
     */
    PAYTOTAPROOT(6),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        OutputScriptType.class.getName());
    }
    /**
     * <pre>
     * used for all addresses (bitcoin, p2sh, witness)
     * </pre>
     *
     * <code>PAYTOADDRESS = 0;</code>
     */
    public static final int PAYTOADDRESS_VALUE = 0;
    /**
     * <pre>
     * p2sh address (deprecated; use PAYTOADDRESS)
     * </pre>
     *
     * <code>PAYTOSCRIPTHASH = 1;</code>
     */
    public static final int PAYTOSCRIPTHASH_VALUE = 1;
    /**
     * <pre>
     * only for change output
     * </pre>
     *
     * <code>PAYTOMULTISIG = 2;</code>
     */
    public static final int PAYTOMULTISIG_VALUE = 2;
    /**
     * <pre>
     * op_return
     * </pre>
     *
     * <code>PAYTOOPRETURN = 3;</code>
     */
    public static final int PAYTOOPRETURN_VALUE = 3;
    /**
     * <pre>
     * only for change output
     * </pre>
     *
     * <code>PAYTOWITNESS = 4;</code>
     */
    public static final int PAYTOWITNESS_VALUE = 4;
    /**
     * <pre>
     * only for change output
     * </pre>
     *
     * <code>PAYTOP2SHWITNESS = 5;</code>
     */
    public static final int PAYTOP2SHWITNESS_VALUE = 5;
    /**
     * <pre>
     * only for change output
     * </pre>
     *
     * <code>PAYTOTAPROOT = 6;</code>
     */
    public static final int PAYTOTAPROOT_VALUE = 6;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OutputScriptType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static OutputScriptType forNumber(int value) {
      switch (value) {
        case 0: return PAYTOADDRESS;
        case 1: return PAYTOSCRIPTHASH;
        case 2: return PAYTOMULTISIG;
        case 3: return PAYTOOPRETURN;
        case 4: return PAYTOWITNESS;
        case 5: return PAYTOP2SHWITNESS;
        case 6: return PAYTOTAPROOT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OutputScriptType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OutputScriptType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OutputScriptType>() {
            public OutputScriptType findValueByNumber(int number) {
              return OutputScriptType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.getDescriptor().getEnumTypes().get(1);
    }

    private static final OutputScriptType[] VALUES = values();

    public static OutputScriptType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OutputScriptType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:hw.trezor.messages.bitcoin.OutputScriptType)
  }

  /**
   * <pre>
   * *
   * Type of script which will be used for decred stake transaction input
   * </pre>
   *
   * Protobuf enum {@code hw.trezor.messages.bitcoin.DecredStakingSpendType}
   */
  public enum DecredStakingSpendType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SSGen = 0;</code>
     */
    SSGen(0),
    /**
     * <code>SSRTX = 1;</code>
     */
    SSRTX(1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        DecredStakingSpendType.class.getName());
    }
    /**
     * <code>SSGen = 0;</code>
     */
    public static final int SSGen_VALUE = 0;
    /**
     * <code>SSRTX = 1;</code>
     */
    public static final int SSRTX_VALUE = 1;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DecredStakingSpendType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DecredStakingSpendType forNumber(int value) {
      switch (value) {
        case 0: return SSGen;
        case 1: return SSRTX;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DecredStakingSpendType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DecredStakingSpendType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DecredStakingSpendType>() {
            public DecredStakingSpendType findValueByNumber(int number) {
              return DecredStakingSpendType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.getDescriptor().getEnumTypes().get(2);
    }

    private static final DecredStakingSpendType[] VALUES = values();

    public static DecredStakingSpendType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DecredStakingSpendType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:hw.trezor.messages.bitcoin.DecredStakingSpendType)
  }

  /**
   * <pre>
   * *
   * Unit to be used when showing amounts on the display
   * </pre>
   *
   * Protobuf enum {@code hw.trezor.messages.bitcoin.AmountUnit}
   */
  public enum AmountUnit
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * BTC
     * </pre>
     *
     * <code>BITCOIN = 0;</code>
     */
    BITCOIN(0),
    /**
     * <pre>
     * mBTC
     * </pre>
     *
     * <code>MILLIBITCOIN = 1;</code>
     */
    MILLIBITCOIN(1),
    /**
     * <pre>
     * uBTC
     * </pre>
     *
     * <code>MICROBITCOIN = 2;</code>
     */
    MICROBITCOIN(2),
    /**
     * <pre>
     * sat
     * </pre>
     *
     * <code>SATOSHI = 3;</code>
     */
    SATOSHI(3),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        AmountUnit.class.getName());
    }
    /**
     * <pre>
     * BTC
     * </pre>
     *
     * <code>BITCOIN = 0;</code>
     */
    public static final int BITCOIN_VALUE = 0;
    /**
     * <pre>
     * mBTC
     * </pre>
     *
     * <code>MILLIBITCOIN = 1;</code>
     */
    public static final int MILLIBITCOIN_VALUE = 1;
    /**
     * <pre>
     * uBTC
     * </pre>
     *
     * <code>MICROBITCOIN = 2;</code>
     */
    public static final int MICROBITCOIN_VALUE = 2;
    /**
     * <pre>
     * sat
     * </pre>
     *
     * <code>SATOSHI = 3;</code>
     */
    public static final int SATOSHI_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AmountUnit valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static AmountUnit forNumber(int value) {
      switch (value) {
        case 0: return BITCOIN;
        case 1: return MILLIBITCOIN;
        case 2: return MICROBITCOIN;
        case 3: return SATOSHI;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AmountUnit>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AmountUnit> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AmountUnit>() {
            public AmountUnit findValueByNumber(int number) {
              return AmountUnit.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.getDescriptor().getEnumTypes().get(3);
    }

    private static final AmountUnit[] VALUES = values();

    public static AmountUnit valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private AmountUnit(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:hw.trezor.messages.bitcoin.AmountUnit)
  }

  public interface MultisigRedeemScriptTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.MultisigRedeemScriptType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * pubkeys from multisig address (sorted lexicographically)
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
     */
    java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType> 
        getPubkeysList();
    /**
     * <pre>
     * pubkeys from multisig address (sorted lexicographically)
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType getPubkeys(int index);
    /**
     * <pre>
     * pubkeys from multisig address (sorted lexicographically)
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
     */
    int getPubkeysCount();
    /**
     * <pre>
     * pubkeys from multisig address (sorted lexicographically)
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
     */
    java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathTypeOrBuilder> 
        getPubkeysOrBuilderList();
    /**
     * <pre>
     * pubkeys from multisig address (sorted lexicographically)
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathTypeOrBuilder getPubkeysOrBuilder(
        int index);

    /**
     * <pre>
     * existing signatures for partially signed input
     * </pre>
     *
     * <code>repeated bytes signatures = 2;</code>
     * @return A list containing the signatures.
     */
    java.util.List<com.google.protobuf.ByteString> getSignaturesList();
    /**
     * <pre>
     * existing signatures for partially signed input
     * </pre>
     *
     * <code>repeated bytes signatures = 2;</code>
     * @return The count of signatures.
     */
    int getSignaturesCount();
    /**
     * <pre>
     * existing signatures for partially signed input
     * </pre>
     *
     * <code>repeated bytes signatures = 2;</code>
     * @param index The index of the element to return.
     * @return The signatures at the given index.
     */
    com.google.protobuf.ByteString getSignatures(int index);

    /**
     * <pre>
     * "m" from n, how many valid signatures is necessary for spending
     * </pre>
     *
     * <code>required uint32 m = 3;</code>
     * @return Whether the m field is set.
     */
    boolean hasM();
    /**
     * <pre>
     * "m" from n, how many valid signatures is necessary for spending
     * </pre>
     *
     * <code>required uint32 m = 3;</code>
     * @return The m.
     */
    int getM();

    /**
     * <pre>
     * simplified way how to specify pubkeys if they share the same address_n path
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
     */
    java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType> 
        getNodesList();
    /**
     * <pre>
     * simplified way how to specify pubkeys if they share the same address_n path
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType getNodes(int index);
    /**
     * <pre>
     * simplified way how to specify pubkeys if they share the same address_n path
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
     */
    int getNodesCount();
    /**
     * <pre>
     * simplified way how to specify pubkeys if they share the same address_n path
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
     */
    java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder> 
        getNodesOrBuilderList();
    /**
     * <pre>
     * simplified way how to specify pubkeys if they share the same address_n path
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder getNodesOrBuilder(
        int index);

    /**
     * <pre>
     * use only field 1 or fields 4+5, if fields 4+5 are used, field 1 is ignored
     * </pre>
     *
     * <code>repeated uint32 address_n = 5;</code>
     * @return A list containing the addressN.
     */
    java.util.List<java.lang.Integer> getAddressNList();
    /**
     * <pre>
     * use only field 1 or fields 4+5, if fields 4+5 are used, field 1 is ignored
     * </pre>
     *
     * <code>repeated uint32 address_n = 5;</code>
     * @return The count of addressN.
     */
    int getAddressNCount();
    /**
     * <pre>
     * use only field 1 or fields 4+5, if fields 4+5 are used, field 1 is ignored
     * </pre>
     *
     * <code>repeated uint32 address_n = 5;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    int getAddressN(int index);
  }
  /**
   * <pre>
   * *
   * Type of redeem script used in input
   * &#64;embed
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.MultisigRedeemScriptType}
   */
  public static final class MultisigRedeemScriptType extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.MultisigRedeemScriptType)
      MultisigRedeemScriptTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        MultisigRedeemScriptType.class.getName());
    }
    // Use MultisigRedeemScriptType.newBuilder() to construct.
    private MultisigRedeemScriptType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private MultisigRedeemScriptType() {
      pubkeys_ = java.util.Collections.emptyList();
      signatures_ = emptyList(com.google.protobuf.ByteString.class);
      nodes_ = java.util.Collections.emptyList();
      addressN_ = emptyIntList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder.class);
    }

    public interface HDNodePathTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * BIP-32 node in deserialized form
       * </pre>
       *
       * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
       * @return Whether the node field is set.
       */
      boolean hasNode();
      /**
       * <pre>
       * BIP-32 node in deserialized form
       * </pre>
       *
       * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
       * @return The node.
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType getNode();
      /**
       * <pre>
       * BIP-32 node in deserialized form
       * </pre>
       *
       * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder getNodeOrBuilder();

      /**
       * <pre>
       * BIP-32 path to derive the key from node
       * </pre>
       *
       * <code>repeated uint32 address_n = 2;</code>
       * @return A list containing the addressN.
       */
      java.util.List<java.lang.Integer> getAddressNList();
      /**
       * <pre>
       * BIP-32 path to derive the key from node
       * </pre>
       *
       * <code>repeated uint32 address_n = 2;</code>
       * @return The count of addressN.
       */
      int getAddressNCount();
      /**
       * <pre>
       * BIP-32 path to derive the key from node
       * </pre>
       *
       * <code>repeated uint32 address_n = 2;</code>
       * @param index The index of the element to return.
       * @return The addressN at the given index.
       */
      int getAddressN(int index);
    }
    /**
     * <pre>
     * *
     * Structure representing HDNode + Path
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType}
     */
    public static final class HDNodePathType extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType)
        HDNodePathTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          HDNodePathType.class.getName());
      }
      // Use HDNodePathType.newBuilder() to construct.
      private HDNodePathType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private HDNodePathType() {
        addressN_ = emptyIntList();
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_HDNodePathType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_HDNodePathType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.Builder.class);
      }

      private int bitField0_;
      public static final int NODE_FIELD_NUMBER = 1;
      private com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType node_;
      /**
       * <pre>
       * BIP-32 node in deserialized form
       * </pre>
       *
       * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
       * @return Whether the node field is set.
       */
      @java.lang.Override
      public boolean hasNode() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * BIP-32 node in deserialized form
       * </pre>
       *
       * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
       * @return The node.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType getNode() {
        return node_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.getDefaultInstance() : node_;
      }
      /**
       * <pre>
       * BIP-32 node in deserialized form
       * </pre>
       *
       * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder getNodeOrBuilder() {
        return node_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.getDefaultInstance() : node_;
      }

      public static final int ADDRESS_N_FIELD_NUMBER = 2;
      @SuppressWarnings("serial")
      private com.google.protobuf.Internal.IntList addressN_ =
          emptyIntList();
      /**
       * <pre>
       * BIP-32 path to derive the key from node
       * </pre>
       *
       * <code>repeated uint32 address_n = 2;</code>
       * @return A list containing the addressN.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getAddressNList() {
        return addressN_;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from node
       * </pre>
       *
       * <code>repeated uint32 address_n = 2;</code>
       * @return The count of addressN.
       */
      public int getAddressNCount() {
        return addressN_.size();
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from node
       * </pre>
       *
       * <code>repeated uint32 address_n = 2;</code>
       * @param index The index of the element to return.
       * @return The addressN at the given index.
       */
      public int getAddressN(int index) {
        return addressN_.getInt(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasNode()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!getNode().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeMessage(1, getNode());
        }
        for (int i = 0; i < addressN_.size(); i++) {
          output.writeUInt32(2, addressN_.getInt(i));
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getNode());
        }
        {
          int dataSize = 0;
          for (int i = 0; i < addressN_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(addressN_.getInt(i));
          }
          size += dataSize;
          size += 1 * getAddressNList().size();
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType) obj;

        if (hasNode() != other.hasNode()) return false;
        if (hasNode()) {
          if (!getNode()
              .equals(other.getNode())) return false;
        }
        if (!getAddressNList()
            .equals(other.getAddressNList())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasNode()) {
          hash = (37 * hash) + NODE_FIELD_NUMBER;
          hash = (53 * hash) + getNode().hashCode();
        }
        if (getAddressNCount() > 0) {
          hash = (37 * hash) + ADDRESS_N_FIELD_NUMBER;
          hash = (53 * hash) + getAddressNList().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * *
       * Structure representing HDNode + Path
       * </pre>
       *
       * Protobuf type {@code hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType)
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_HDNodePathType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_HDNodePathType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage
                  .alwaysUseFieldBuilders) {
            getNodeFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          node_ = null;
          if (nodeBuilder_ != null) {
            nodeBuilder_.dispose();
            nodeBuilder_ = null;
          }
          addressN_ = emptyIntList();
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_HDNodePathType_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType getDefaultInstanceForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType build() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType buildPartial() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.node_ = nodeBuilder_ == null
                ? node_
                : nodeBuilder_.build();
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            addressN_.makeImmutable();
            result.addressN_ = addressN_;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType) {
            return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType other) {
          if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.getDefaultInstance()) return this;
          if (other.hasNode()) {
            mergeNode(other.getNode());
          }
          if (!other.addressN_.isEmpty()) {
            if (addressN_.isEmpty()) {
              addressN_ = other.addressN_;
              addressN_.makeImmutable();
              bitField0_ |= 0x00000002;
            } else {
              ensureAddressNIsMutable();
              addressN_.addAll(other.addressN_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          if (!hasNode()) {
            return false;
          }
          if (!getNode().isInitialized()) {
            return false;
          }
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getNodeFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                case 16: {
                  int v = input.readUInt32();
                  ensureAddressNIsMutable();
                  addressN_.addInt(v);
                  break;
                } // case 16
                case 18: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  ensureAddressNIsMutable();
                  while (input.getBytesUntilLimit() > 0) {
                    addressN_.addInt(input.readUInt32());
                  }
                  input.popLimit(limit);
                  break;
                } // case 18
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType node_;
        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder> nodeBuilder_;
        /**
         * <pre>
         * BIP-32 node in deserialized form
         * </pre>
         *
         * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
         * @return Whether the node field is set.
         */
        public boolean hasNode() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * BIP-32 node in deserialized form
         * </pre>
         *
         * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
         * @return The node.
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType getNode() {
          if (nodeBuilder_ == null) {
            return node_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.getDefaultInstance() : node_;
          } else {
            return nodeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * BIP-32 node in deserialized form
         * </pre>
         *
         * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
         */
        public Builder setNode(com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType value) {
          if (nodeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            node_ = value;
          } else {
            nodeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * BIP-32 node in deserialized form
         * </pre>
         *
         * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
         */
        public Builder setNode(
            com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder builderForValue) {
          if (nodeBuilder_ == null) {
            node_ = builderForValue.build();
          } else {
            nodeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * BIP-32 node in deserialized form
         * </pre>
         *
         * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
         */
        public Builder mergeNode(com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType value) {
          if (nodeBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0) &&
              node_ != null &&
              node_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.getDefaultInstance()) {
              getNodeBuilder().mergeFrom(value);
            } else {
              node_ = value;
            }
          } else {
            nodeBuilder_.mergeFrom(value);
          }
          if (node_ != null) {
            bitField0_ |= 0x00000001;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * BIP-32 node in deserialized form
         * </pre>
         *
         * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
         */
        public Builder clearNode() {
          bitField0_ = (bitField0_ & ~0x00000001);
          node_ = null;
          if (nodeBuilder_ != null) {
            nodeBuilder_.dispose();
            nodeBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * BIP-32 node in deserialized form
         * </pre>
         *
         * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder getNodeBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getNodeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * BIP-32 node in deserialized form
         * </pre>
         *
         * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder getNodeOrBuilder() {
          if (nodeBuilder_ != null) {
            return nodeBuilder_.getMessageOrBuilder();
          } else {
            return node_ == null ?
                com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.getDefaultInstance() : node_;
          }
        }
        /**
         * <pre>
         * BIP-32 node in deserialized form
         * </pre>
         *
         * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder> 
            getNodeFieldBuilder() {
          if (nodeBuilder_ == null) {
            nodeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder>(
                    getNode(),
                    getParentForChildren(),
                    isClean());
            node_ = null;
          }
          return nodeBuilder_;
        }

        private com.google.protobuf.Internal.IntList addressN_ = emptyIntList();
        private void ensureAddressNIsMutable() {
          if (!addressN_.isModifiable()) {
            addressN_ = makeMutableCopy(addressN_);
          }
          bitField0_ |= 0x00000002;
        }
        /**
         * <pre>
         * BIP-32 path to derive the key from node
         * </pre>
         *
         * <code>repeated uint32 address_n = 2;</code>
         * @return A list containing the addressN.
         */
        public java.util.List<java.lang.Integer>
            getAddressNList() {
          addressN_.makeImmutable();
          return addressN_;
        }
        /**
         * <pre>
         * BIP-32 path to derive the key from node
         * </pre>
         *
         * <code>repeated uint32 address_n = 2;</code>
         * @return The count of addressN.
         */
        public int getAddressNCount() {
          return addressN_.size();
        }
        /**
         * <pre>
         * BIP-32 path to derive the key from node
         * </pre>
         *
         * <code>repeated uint32 address_n = 2;</code>
         * @param index The index of the element to return.
         * @return The addressN at the given index.
         */
        public int getAddressN(int index) {
          return addressN_.getInt(index);
        }
        /**
         * <pre>
         * BIP-32 path to derive the key from node
         * </pre>
         *
         * <code>repeated uint32 address_n = 2;</code>
         * @param index The index to set the value at.
         * @param value The addressN to set.
         * @return This builder for chaining.
         */
        public Builder setAddressN(
            int index, int value) {

          ensureAddressNIsMutable();
          addressN_.setInt(index, value);
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * BIP-32 path to derive the key from node
         * </pre>
         *
         * <code>repeated uint32 address_n = 2;</code>
         * @param value The addressN to add.
         * @return This builder for chaining.
         */
        public Builder addAddressN(int value) {

          ensureAddressNIsMutable();
          addressN_.addInt(value);
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * BIP-32 path to derive the key from node
         * </pre>
         *
         * <code>repeated uint32 address_n = 2;</code>
         * @param values The addressN to add.
         * @return This builder for chaining.
         */
        public Builder addAllAddressN(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureAddressNIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, addressN_);
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * BIP-32 path to derive the key from node
         * </pre>
         *
         * <code>repeated uint32 address_n = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearAddressN() {
          addressN_ = emptyIntList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType)
      }

      // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType)
      private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType();
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<HDNodePathType>
          PARSER = new com.google.protobuf.AbstractParser<HDNodePathType>() {
        @java.lang.Override
        public HDNodePathType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<HDNodePathType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<HDNodePathType> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int PUBKEYS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType> pubkeys_;
    /**
     * <pre>
     * pubkeys from multisig address (sorted lexicographically)
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
     */
    @java.lang.Override
    public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType> getPubkeysList() {
      return pubkeys_;
    }
    /**
     * <pre>
     * pubkeys from multisig address (sorted lexicographically)
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathTypeOrBuilder> 
        getPubkeysOrBuilderList() {
      return pubkeys_;
    }
    /**
     * <pre>
     * pubkeys from multisig address (sorted lexicographically)
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
     */
    @java.lang.Override
    public int getPubkeysCount() {
      return pubkeys_.size();
    }
    /**
     * <pre>
     * pubkeys from multisig address (sorted lexicographically)
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType getPubkeys(int index) {
      return pubkeys_.get(index);
    }
    /**
     * <pre>
     * pubkeys from multisig address (sorted lexicographically)
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathTypeOrBuilder getPubkeysOrBuilder(
        int index) {
      return pubkeys_.get(index);
    }

    public static final int SIGNATURES_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> signatures_ =
        emptyList(com.google.protobuf.ByteString.class);
    /**
     * <pre>
     * existing signatures for partially signed input
     * </pre>
     *
     * <code>repeated bytes signatures = 2;</code>
     * @return A list containing the signatures.
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.ByteString>
        getSignaturesList() {
      return signatures_;
    }
    /**
     * <pre>
     * existing signatures for partially signed input
     * </pre>
     *
     * <code>repeated bytes signatures = 2;</code>
     * @return The count of signatures.
     */
    public int getSignaturesCount() {
      return signatures_.size();
    }
    /**
     * <pre>
     * existing signatures for partially signed input
     * </pre>
     *
     * <code>repeated bytes signatures = 2;</code>
     * @param index The index of the element to return.
     * @return The signatures at the given index.
     */
    public com.google.protobuf.ByteString getSignatures(int index) {
      return signatures_.get(index);
    }

    public static final int M_FIELD_NUMBER = 3;
    private int m_ = 0;
    /**
     * <pre>
     * "m" from n, how many valid signatures is necessary for spending
     * </pre>
     *
     * <code>required uint32 m = 3;</code>
     * @return Whether the m field is set.
     */
    @java.lang.Override
    public boolean hasM() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * "m" from n, how many valid signatures is necessary for spending
     * </pre>
     *
     * <code>required uint32 m = 3;</code>
     * @return The m.
     */
    @java.lang.Override
    public int getM() {
      return m_;
    }

    public static final int NODES_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType> nodes_;
    /**
     * <pre>
     * simplified way how to specify pubkeys if they share the same address_n path
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
     */
    @java.lang.Override
    public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType> getNodesList() {
      return nodes_;
    }
    /**
     * <pre>
     * simplified way how to specify pubkeys if they share the same address_n path
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder> 
        getNodesOrBuilderList() {
      return nodes_;
    }
    /**
     * <pre>
     * simplified way how to specify pubkeys if they share the same address_n path
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
     */
    @java.lang.Override
    public int getNodesCount() {
      return nodes_.size();
    }
    /**
     * <pre>
     * simplified way how to specify pubkeys if they share the same address_n path
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType getNodes(int index) {
      return nodes_.get(index);
    }
    /**
     * <pre>
     * simplified way how to specify pubkeys if they share the same address_n path
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder getNodesOrBuilder(
        int index) {
      return nodes_.get(index);
    }

    public static final int ADDRESS_N_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList addressN_ =
        emptyIntList();
    /**
     * <pre>
     * use only field 1 or fields 4+5, if fields 4+5 are used, field 1 is ignored
     * </pre>
     *
     * <code>repeated uint32 address_n = 5;</code>
     * @return A list containing the addressN.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getAddressNList() {
      return addressN_;
    }
    /**
     * <pre>
     * use only field 1 or fields 4+5, if fields 4+5 are used, field 1 is ignored
     * </pre>
     *
     * <code>repeated uint32 address_n = 5;</code>
     * @return The count of addressN.
     */
    public int getAddressNCount() {
      return addressN_.size();
    }
    /**
     * <pre>
     * use only field 1 or fields 4+5, if fields 4+5 are used, field 1 is ignored
     * </pre>
     *
     * <code>repeated uint32 address_n = 5;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    public int getAddressN(int index) {
      return addressN_.getInt(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasM()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getPubkeysCount(); i++) {
        if (!getPubkeys(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getNodesCount(); i++) {
        if (!getNodes(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < pubkeys_.size(); i++) {
        output.writeMessage(1, pubkeys_.get(i));
      }
      for (int i = 0; i < signatures_.size(); i++) {
        output.writeBytes(2, signatures_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(3, m_);
      }
      for (int i = 0; i < nodes_.size(); i++) {
        output.writeMessage(4, nodes_.get(i));
      }
      for (int i = 0; i < addressN_.size(); i++) {
        output.writeUInt32(5, addressN_.getInt(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < pubkeys_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, pubkeys_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < signatures_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(signatures_.get(i));
        }
        size += dataSize;
        size += 1 * getSignaturesList().size();
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, m_);
      }
      for (int i = 0; i < nodes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, nodes_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < addressN_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(addressN_.getInt(i));
        }
        size += dataSize;
        size += 1 * getAddressNList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType) obj;

      if (!getPubkeysList()
          .equals(other.getPubkeysList())) return false;
      if (!getSignaturesList()
          .equals(other.getSignaturesList())) return false;
      if (hasM() != other.hasM()) return false;
      if (hasM()) {
        if (getM()
            != other.getM()) return false;
      }
      if (!getNodesList()
          .equals(other.getNodesList())) return false;
      if (!getAddressNList()
          .equals(other.getAddressNList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getPubkeysCount() > 0) {
        hash = (37 * hash) + PUBKEYS_FIELD_NUMBER;
        hash = (53 * hash) + getPubkeysList().hashCode();
      }
      if (getSignaturesCount() > 0) {
        hash = (37 * hash) + SIGNATURES_FIELD_NUMBER;
        hash = (53 * hash) + getSignaturesList().hashCode();
      }
      if (hasM()) {
        hash = (37 * hash) + M_FIELD_NUMBER;
        hash = (53 * hash) + getM();
      }
      if (getNodesCount() > 0) {
        hash = (37 * hash) + NODES_FIELD_NUMBER;
        hash = (53 * hash) + getNodesList().hashCode();
      }
      if (getAddressNCount() > 0) {
        hash = (37 * hash) + ADDRESS_N_FIELD_NUMBER;
        hash = (53 * hash) + getAddressNList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Type of redeem script used in input
     * &#64;embed
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.MultisigRedeemScriptType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.MultisigRedeemScriptType)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (pubkeysBuilder_ == null) {
          pubkeys_ = java.util.Collections.emptyList();
        } else {
          pubkeys_ = null;
          pubkeysBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        signatures_ = emptyList(com.google.protobuf.ByteString.class);
        m_ = 0;
        if (nodesBuilder_ == null) {
          nodes_ = java.util.Collections.emptyList();
        } else {
          nodes_ = null;
          nodesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        addressN_ = emptyIntList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType result) {
        if (pubkeysBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            pubkeys_ = java.util.Collections.unmodifiableList(pubkeys_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.pubkeys_ = pubkeys_;
        } else {
          result.pubkeys_ = pubkeysBuilder_.build();
        }
        if (nodesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            nodes_ = java.util.Collections.unmodifiableList(nodes_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.nodes_ = nodes_;
        } else {
          result.nodes_ = nodesBuilder_.build();
        }
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          signatures_.makeImmutable();
          result.signatures_ = signatures_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.m_ = m_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          addressN_.makeImmutable();
          result.addressN_ = addressN_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance()) return this;
        if (pubkeysBuilder_ == null) {
          if (!other.pubkeys_.isEmpty()) {
            if (pubkeys_.isEmpty()) {
              pubkeys_ = other.pubkeys_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePubkeysIsMutable();
              pubkeys_.addAll(other.pubkeys_);
            }
            onChanged();
          }
        } else {
          if (!other.pubkeys_.isEmpty()) {
            if (pubkeysBuilder_.isEmpty()) {
              pubkeysBuilder_.dispose();
              pubkeysBuilder_ = null;
              pubkeys_ = other.pubkeys_;
              bitField0_ = (bitField0_ & ~0x00000001);
              pubkeysBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPubkeysFieldBuilder() : null;
            } else {
              pubkeysBuilder_.addAllMessages(other.pubkeys_);
            }
          }
        }
        if (!other.signatures_.isEmpty()) {
          if (signatures_.isEmpty()) {
            signatures_ = other.signatures_;
            signatures_.makeImmutable();
            bitField0_ |= 0x00000002;
          } else {
            ensureSignaturesIsMutable();
            signatures_.addAll(other.signatures_);
          }
          onChanged();
        }
        if (other.hasM()) {
          setM(other.getM());
        }
        if (nodesBuilder_ == null) {
          if (!other.nodes_.isEmpty()) {
            if (nodes_.isEmpty()) {
              nodes_ = other.nodes_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureNodesIsMutable();
              nodes_.addAll(other.nodes_);
            }
            onChanged();
          }
        } else {
          if (!other.nodes_.isEmpty()) {
            if (nodesBuilder_.isEmpty()) {
              nodesBuilder_.dispose();
              nodesBuilder_ = null;
              nodes_ = other.nodes_;
              bitField0_ = (bitField0_ & ~0x00000008);
              nodesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getNodesFieldBuilder() : null;
            } else {
              nodesBuilder_.addAllMessages(other.nodes_);
            }
          }
        }
        if (!other.addressN_.isEmpty()) {
          if (addressN_.isEmpty()) {
            addressN_ = other.addressN_;
            addressN_.makeImmutable();
            bitField0_ |= 0x00000010;
          } else {
            ensureAddressNIsMutable();
            addressN_.addAll(other.addressN_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasM()) {
          return false;
        }
        for (int i = 0; i < getPubkeysCount(); i++) {
          if (!getPubkeys(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getNodesCount(); i++) {
          if (!getNodes(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType m =
                    input.readMessage(
                        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.parser(),
                        extensionRegistry);
                if (pubkeysBuilder_ == null) {
                  ensurePubkeysIsMutable();
                  pubkeys_.add(m);
                } else {
                  pubkeysBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 18: {
                com.google.protobuf.ByteString v = input.readBytes();
                ensureSignaturesIsMutable();
                signatures_.add(v);
                break;
              } // case 18
              case 24: {
                m_ = input.readUInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType m =
                    input.readMessage(
                        com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.parser(),
                        extensionRegistry);
                if (nodesBuilder_ == null) {
                  ensureNodesIsMutable();
                  nodes_.add(m);
                } else {
                  nodesBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 40: {
                int v = input.readUInt32();
                ensureAddressNIsMutable();
                addressN_.addInt(v);
                break;
              } // case 40
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureAddressNIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  addressN_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType> pubkeys_ =
        java.util.Collections.emptyList();
      private void ensurePubkeysIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          pubkeys_ = new java.util.ArrayList<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType>(pubkeys_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathTypeOrBuilder> pubkeysBuilder_;

      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType> getPubkeysList() {
        if (pubkeysBuilder_ == null) {
          return java.util.Collections.unmodifiableList(pubkeys_);
        } else {
          return pubkeysBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public int getPubkeysCount() {
        if (pubkeysBuilder_ == null) {
          return pubkeys_.size();
        } else {
          return pubkeysBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType getPubkeys(int index) {
        if (pubkeysBuilder_ == null) {
          return pubkeys_.get(index);
        } else {
          return pubkeysBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public Builder setPubkeys(
          int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType value) {
        if (pubkeysBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePubkeysIsMutable();
          pubkeys_.set(index, value);
          onChanged();
        } else {
          pubkeysBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public Builder setPubkeys(
          int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.Builder builderForValue) {
        if (pubkeysBuilder_ == null) {
          ensurePubkeysIsMutable();
          pubkeys_.set(index, builderForValue.build());
          onChanged();
        } else {
          pubkeysBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public Builder addPubkeys(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType value) {
        if (pubkeysBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePubkeysIsMutable();
          pubkeys_.add(value);
          onChanged();
        } else {
          pubkeysBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public Builder addPubkeys(
          int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType value) {
        if (pubkeysBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePubkeysIsMutable();
          pubkeys_.add(index, value);
          onChanged();
        } else {
          pubkeysBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public Builder addPubkeys(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.Builder builderForValue) {
        if (pubkeysBuilder_ == null) {
          ensurePubkeysIsMutable();
          pubkeys_.add(builderForValue.build());
          onChanged();
        } else {
          pubkeysBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public Builder addPubkeys(
          int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.Builder builderForValue) {
        if (pubkeysBuilder_ == null) {
          ensurePubkeysIsMutable();
          pubkeys_.add(index, builderForValue.build());
          onChanged();
        } else {
          pubkeysBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public Builder addAllPubkeys(
          java.lang.Iterable<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType> values) {
        if (pubkeysBuilder_ == null) {
          ensurePubkeysIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, pubkeys_);
          onChanged();
        } else {
          pubkeysBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public Builder clearPubkeys() {
        if (pubkeysBuilder_ == null) {
          pubkeys_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          pubkeysBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public Builder removePubkeys(int index) {
        if (pubkeysBuilder_ == null) {
          ensurePubkeysIsMutable();
          pubkeys_.remove(index);
          onChanged();
        } else {
          pubkeysBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.Builder getPubkeysBuilder(
          int index) {
        return getPubkeysFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathTypeOrBuilder getPubkeysOrBuilder(
          int index) {
        if (pubkeysBuilder_ == null) {
          return pubkeys_.get(index);  } else {
          return pubkeysBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathTypeOrBuilder> 
           getPubkeysOrBuilderList() {
        if (pubkeysBuilder_ != null) {
          return pubkeysBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(pubkeys_);
        }
      }
      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.Builder addPubkeysBuilder() {
        return getPubkeysFieldBuilder().addBuilder(
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.getDefaultInstance());
      }
      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.Builder addPubkeysBuilder(
          int index) {
        return getPubkeysFieldBuilder().addBuilder(
            index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.getDefaultInstance());
      }
      /**
       * <pre>
       * pubkeys from multisig address (sorted lexicographically)
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType pubkeys = 1;</code>
       */
      public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.Builder> 
           getPubkeysBuilderList() {
        return getPubkeysFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathTypeOrBuilder> 
          getPubkeysFieldBuilder() {
        if (pubkeysBuilder_ == null) {
          pubkeysBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.HDNodePathTypeOrBuilder>(
                  pubkeys_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          pubkeys_ = null;
        }
        return pubkeysBuilder_;
      }

      private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> signatures_ = emptyList(com.google.protobuf.ByteString.class);
      private void ensureSignaturesIsMutable() {
        if (!signatures_.isModifiable()) {
          signatures_ = makeMutableCopy(signatures_);
        }
        bitField0_ |= 0x00000002;
      }
      /**
       * <pre>
       * existing signatures for partially signed input
       * </pre>
       *
       * <code>repeated bytes signatures = 2;</code>
       * @return A list containing the signatures.
       */
      public java.util.List<com.google.protobuf.ByteString>
          getSignaturesList() {
        signatures_.makeImmutable();
        return signatures_;
      }
      /**
       * <pre>
       * existing signatures for partially signed input
       * </pre>
       *
       * <code>repeated bytes signatures = 2;</code>
       * @return The count of signatures.
       */
      public int getSignaturesCount() {
        return signatures_.size();
      }
      /**
       * <pre>
       * existing signatures for partially signed input
       * </pre>
       *
       * <code>repeated bytes signatures = 2;</code>
       * @param index The index of the element to return.
       * @return The signatures at the given index.
       */
      public com.google.protobuf.ByteString getSignatures(int index) {
        return signatures_.get(index);
      }
      /**
       * <pre>
       * existing signatures for partially signed input
       * </pre>
       *
       * <code>repeated bytes signatures = 2;</code>
       * @param index The index to set the value at.
       * @param value The signatures to set.
       * @return This builder for chaining.
       */
      public Builder setSignatures(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureSignaturesIsMutable();
        signatures_.set(index, value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * existing signatures for partially signed input
       * </pre>
       *
       * <code>repeated bytes signatures = 2;</code>
       * @param value The signatures to add.
       * @return This builder for chaining.
       */
      public Builder addSignatures(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureSignaturesIsMutable();
        signatures_.add(value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * existing signatures for partially signed input
       * </pre>
       *
       * <code>repeated bytes signatures = 2;</code>
       * @param values The signatures to add.
       * @return This builder for chaining.
       */
      public Builder addAllSignatures(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureSignaturesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, signatures_);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * existing signatures for partially signed input
       * </pre>
       *
       * <code>repeated bytes signatures = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSignatures() {
        signatures_ = emptyList(com.google.protobuf.ByteString.class);
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private int m_ ;
      /**
       * <pre>
       * "m" from n, how many valid signatures is necessary for spending
       * </pre>
       *
       * <code>required uint32 m = 3;</code>
       * @return Whether the m field is set.
       */
      @java.lang.Override
      public boolean hasM() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * "m" from n, how many valid signatures is necessary for spending
       * </pre>
       *
       * <code>required uint32 m = 3;</code>
       * @return The m.
       */
      @java.lang.Override
      public int getM() {
        return m_;
      }
      /**
       * <pre>
       * "m" from n, how many valid signatures is necessary for spending
       * </pre>
       *
       * <code>required uint32 m = 3;</code>
       * @param value The m to set.
       * @return This builder for chaining.
       */
      public Builder setM(int value) {

        m_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * "m" from n, how many valid signatures is necessary for spending
       * </pre>
       *
       * <code>required uint32 m = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearM() {
        bitField0_ = (bitField0_ & ~0x00000004);
        m_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType> nodes_ =
        java.util.Collections.emptyList();
      private void ensureNodesIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          nodes_ = new java.util.ArrayList<com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType>(nodes_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder> nodesBuilder_;

      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType> getNodesList() {
        if (nodesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(nodes_);
        } else {
          return nodesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public int getNodesCount() {
        if (nodesBuilder_ == null) {
          return nodes_.size();
        } else {
          return nodesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType getNodes(int index) {
        if (nodesBuilder_ == null) {
          return nodes_.get(index);
        } else {
          return nodesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public Builder setNodes(
          int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType value) {
        if (nodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodesIsMutable();
          nodes_.set(index, value);
          onChanged();
        } else {
          nodesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public Builder setNodes(
          int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder builderForValue) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          nodes_.set(index, builderForValue.build());
          onChanged();
        } else {
          nodesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public Builder addNodes(com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType value) {
        if (nodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodesIsMutable();
          nodes_.add(value);
          onChanged();
        } else {
          nodesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public Builder addNodes(
          int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType value) {
        if (nodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodesIsMutable();
          nodes_.add(index, value);
          onChanged();
        } else {
          nodesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public Builder addNodes(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder builderForValue) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          nodes_.add(builderForValue.build());
          onChanged();
        } else {
          nodesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public Builder addNodes(
          int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder builderForValue) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          nodes_.add(index, builderForValue.build());
          onChanged();
        } else {
          nodesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public Builder addAllNodes(
          java.lang.Iterable<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType> values) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, nodes_);
          onChanged();
        } else {
          nodesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public Builder clearNodes() {
        if (nodesBuilder_ == null) {
          nodes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          nodesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public Builder removeNodes(int index) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          nodes_.remove(index);
          onChanged();
        } else {
          nodesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder getNodesBuilder(
          int index) {
        return getNodesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder getNodesOrBuilder(
          int index) {
        if (nodesBuilder_ == null) {
          return nodes_.get(index);  } else {
          return nodesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder> 
           getNodesOrBuilderList() {
        if (nodesBuilder_ != null) {
          return nodesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(nodes_);
        }
      }
      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder addNodesBuilder() {
        return getNodesFieldBuilder().addBuilder(
            com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.getDefaultInstance());
      }
      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder addNodesBuilder(
          int index) {
        return getNodesFieldBuilder().addBuilder(
            index, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.getDefaultInstance());
      }
      /**
       * <pre>
       * simplified way how to specify pubkeys if they share the same address_n path
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.common.HDNodeType nodes = 4;</code>
       */
      public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder> 
           getNodesBuilderList() {
        return getNodesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder> 
          getNodesFieldBuilder() {
        if (nodesBuilder_ == null) {
          nodesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder>(
                  nodes_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          nodes_ = null;
        }
        return nodesBuilder_;
      }

      private com.google.protobuf.Internal.IntList addressN_ = emptyIntList();
      private void ensureAddressNIsMutable() {
        if (!addressN_.isModifiable()) {
          addressN_ = makeMutableCopy(addressN_);
        }
        bitField0_ |= 0x00000010;
      }
      /**
       * <pre>
       * use only field 1 or fields 4+5, if fields 4+5 are used, field 1 is ignored
       * </pre>
       *
       * <code>repeated uint32 address_n = 5;</code>
       * @return A list containing the addressN.
       */
      public java.util.List<java.lang.Integer>
          getAddressNList() {
        addressN_.makeImmutable();
        return addressN_;
      }
      /**
       * <pre>
       * use only field 1 or fields 4+5, if fields 4+5 are used, field 1 is ignored
       * </pre>
       *
       * <code>repeated uint32 address_n = 5;</code>
       * @return The count of addressN.
       */
      public int getAddressNCount() {
        return addressN_.size();
      }
      /**
       * <pre>
       * use only field 1 or fields 4+5, if fields 4+5 are used, field 1 is ignored
       * </pre>
       *
       * <code>repeated uint32 address_n = 5;</code>
       * @param index The index of the element to return.
       * @return The addressN at the given index.
       */
      public int getAddressN(int index) {
        return addressN_.getInt(index);
      }
      /**
       * <pre>
       * use only field 1 or fields 4+5, if fields 4+5 are used, field 1 is ignored
       * </pre>
       *
       * <code>repeated uint32 address_n = 5;</code>
       * @param index The index to set the value at.
       * @param value The addressN to set.
       * @return This builder for chaining.
       */
      public Builder setAddressN(
          int index, int value) {

        ensureAddressNIsMutable();
        addressN_.setInt(index, value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * use only field 1 or fields 4+5, if fields 4+5 are used, field 1 is ignored
       * </pre>
       *
       * <code>repeated uint32 address_n = 5;</code>
       * @param value The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAddressN(int value) {

        ensureAddressNIsMutable();
        addressN_.addInt(value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * use only field 1 or fields 4+5, if fields 4+5 are used, field 1 is ignored
       * </pre>
       *
       * <code>repeated uint32 address_n = 5;</code>
       * @param values The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAllAddressN(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAddressNIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, addressN_);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * use only field 1 or fields 4+5, if fields 4+5 are used, field 1 is ignored
       * </pre>
       *
       * <code>repeated uint32 address_n = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearAddressN() {
        addressN_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.MultisigRedeemScriptType)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.MultisigRedeemScriptType)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MultisigRedeemScriptType>
        PARSER = new com.google.protobuf.AbstractParser<MultisigRedeemScriptType>() {
      @java.lang.Override
      public MultisigRedeemScriptType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<MultisigRedeemScriptType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MultisigRedeemScriptType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GetPublicKeyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.GetPublicKey)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return A list containing the addressN.
     */
    java.util.List<java.lang.Integer> getAddressNList();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return The count of addressN.
     */
    int getAddressNCount();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    int getAddressN(int index);

    /**
     * <pre>
     * ECDSA curve name to use
     * </pre>
     *
     * <code>optional string ecdsa_curve_name = 2;</code>
     * @return Whether the ecdsaCurveName field is set.
     */
    boolean hasEcdsaCurveName();
    /**
     * <pre>
     * ECDSA curve name to use
     * </pre>
     *
     * <code>optional string ecdsa_curve_name = 2;</code>
     * @return The ecdsaCurveName.
     */
    java.lang.String getEcdsaCurveName();
    /**
     * <pre>
     * ECDSA curve name to use
     * </pre>
     *
     * <code>optional string ecdsa_curve_name = 2;</code>
     * @return The bytes for ecdsaCurveName.
     */
    com.google.protobuf.ByteString
        getEcdsaCurveNameBytes();

    /**
     * <pre>
     * optionally show on display before sending the result
     * </pre>
     *
     * <code>optional bool show_display = 3;</code>
     * @return Whether the showDisplay field is set.
     */
    boolean hasShowDisplay();
    /**
     * <pre>
     * optionally show on display before sending the result
     * </pre>
     *
     * <code>optional bool show_display = 3;</code>
     * @return The showDisplay.
     */
    boolean getShowDisplay();

    /**
     * <pre>
     * coin to use for verifying
     * </pre>
     *
     * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
     * @return Whether the coinName field is set.
     */
    boolean hasCoinName();
    /**
     * <pre>
     * coin to use for verifying
     * </pre>
     *
     * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
     * @return The coinName.
     */
    java.lang.String getCoinName();
    /**
     * <pre>
     * coin to use for verifying
     * </pre>
     *
     * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
     * @return The bytes for coinName.
     */
    com.google.protobuf.ByteString
        getCoinNameBytes();

    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 5 [default = SPENDADDRESS];</code>
     * @return Whether the scriptType field is set.
     */
    boolean hasScriptType();
    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 5 [default = SPENDADDRESS];</code>
     * @return The scriptType.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType();

    /**
     * <pre>
     * ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
     * </pre>
     *
     * <code>optional bool ignore_xpub_magic = 6;</code>
     * @return Whether the ignoreXpubMagic field is set.
     */
    boolean hasIgnoreXpubMagic();
    /**
     * <pre>
     * ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
     * </pre>
     *
     * <code>optional bool ignore_xpub_magic = 6;</code>
     * @return The ignoreXpubMagic.
     */
    boolean getIgnoreXpubMagic();
  }
  /**
   * <pre>
   * *
   * Request: Ask device for public key corresponding to address_n path
   * &#64;start
   * &#64;next PublicKey
   * &#64;next Failure
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.GetPublicKey}
   */
  public static final class GetPublicKey extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.GetPublicKey)
      GetPublicKeyOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        GetPublicKey.class.getName());
    }
    // Use GetPublicKey.newBuilder() to construct.
    private GetPublicKey(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private GetPublicKey() {
      addressN_ = emptyIntList();
      ecdsaCurveName_ = "";
      coinName_ = "Bitcoin";
      scriptType_ = 0;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetPublicKey_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetPublicKey_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey.Builder.class);
    }

    private int bitField0_;
    public static final int ADDRESS_N_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList addressN_ =
        emptyIntList();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return A list containing the addressN.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getAddressNList() {
      return addressN_;
    }
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return The count of addressN.
     */
    public int getAddressNCount() {
      return addressN_.size();
    }
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    public int getAddressN(int index) {
      return addressN_.getInt(index);
    }

    public static final int ECDSA_CURVE_NAME_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object ecdsaCurveName_ = "";
    /**
     * <pre>
     * ECDSA curve name to use
     * </pre>
     *
     * <code>optional string ecdsa_curve_name = 2;</code>
     * @return Whether the ecdsaCurveName field is set.
     */
    @java.lang.Override
    public boolean hasEcdsaCurveName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * ECDSA curve name to use
     * </pre>
     *
     * <code>optional string ecdsa_curve_name = 2;</code>
     * @return The ecdsaCurveName.
     */
    @java.lang.Override
    public java.lang.String getEcdsaCurveName() {
      java.lang.Object ref = ecdsaCurveName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ecdsaCurveName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * ECDSA curve name to use
     * </pre>
     *
     * <code>optional string ecdsa_curve_name = 2;</code>
     * @return The bytes for ecdsaCurveName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getEcdsaCurveNameBytes() {
      java.lang.Object ref = ecdsaCurveName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ecdsaCurveName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SHOW_DISPLAY_FIELD_NUMBER = 3;
    private boolean showDisplay_ = false;
    /**
     * <pre>
     * optionally show on display before sending the result
     * </pre>
     *
     * <code>optional bool show_display = 3;</code>
     * @return Whether the showDisplay field is set.
     */
    @java.lang.Override
    public boolean hasShowDisplay() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * optionally show on display before sending the result
     * </pre>
     *
     * <code>optional bool show_display = 3;</code>
     * @return The showDisplay.
     */
    @java.lang.Override
    public boolean getShowDisplay() {
      return showDisplay_;
    }

    public static final int COIN_NAME_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object coinName_ = "Bitcoin";
    /**
     * <pre>
     * coin to use for verifying
     * </pre>
     *
     * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
     * @return Whether the coinName field is set.
     */
    @java.lang.Override
    public boolean hasCoinName() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * coin to use for verifying
     * </pre>
     *
     * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
     * @return The coinName.
     */
    @java.lang.Override
    public java.lang.String getCoinName() {
      java.lang.Object ref = coinName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          coinName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * coin to use for verifying
     * </pre>
     *
     * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
     * @return The bytes for coinName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCoinNameBytes() {
      java.lang.Object ref = coinName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        coinName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCRIPT_TYPE_FIELD_NUMBER = 5;
    private int scriptType_ = 0;
    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 5 [default = SPENDADDRESS];</code>
     * @return Whether the scriptType field is set.
     */
    @java.lang.Override public boolean hasScriptType() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 5 [default = SPENDADDRESS];</code>
     * @return The scriptType.
     */
    @java.lang.Override public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType() {
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(scriptType_);
      return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.SPENDADDRESS : result;
    }

    public static final int IGNORE_XPUB_MAGIC_FIELD_NUMBER = 6;
    private boolean ignoreXpubMagic_ = false;
    /**
     * <pre>
     * ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
     * </pre>
     *
     * <code>optional bool ignore_xpub_magic = 6;</code>
     * @return Whether the ignoreXpubMagic field is set.
     */
    @java.lang.Override
    public boolean hasIgnoreXpubMagic() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
     * </pre>
     *
     * <code>optional bool ignore_xpub_magic = 6;</code>
     * @return The ignoreXpubMagic.
     */
    @java.lang.Override
    public boolean getIgnoreXpubMagic() {
      return ignoreXpubMagic_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < addressN_.size(); i++) {
        output.writeUInt32(1, addressN_.getInt(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, ecdsaCurveName_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(3, showDisplay_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 4, coinName_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeEnum(5, scriptType_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBool(6, ignoreXpubMagic_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < addressN_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(addressN_.getInt(i));
        }
        size += dataSize;
        size += 1 * getAddressNList().size();
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, ecdsaCurveName_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, showDisplay_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(4, coinName_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, scriptType_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, ignoreXpubMagic_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey) obj;

      if (!getAddressNList()
          .equals(other.getAddressNList())) return false;
      if (hasEcdsaCurveName() != other.hasEcdsaCurveName()) return false;
      if (hasEcdsaCurveName()) {
        if (!getEcdsaCurveName()
            .equals(other.getEcdsaCurveName())) return false;
      }
      if (hasShowDisplay() != other.hasShowDisplay()) return false;
      if (hasShowDisplay()) {
        if (getShowDisplay()
            != other.getShowDisplay()) return false;
      }
      if (hasCoinName() != other.hasCoinName()) return false;
      if (hasCoinName()) {
        if (!getCoinName()
            .equals(other.getCoinName())) return false;
      }
      if (hasScriptType() != other.hasScriptType()) return false;
      if (hasScriptType()) {
        if (scriptType_ != other.scriptType_) return false;
      }
      if (hasIgnoreXpubMagic() != other.hasIgnoreXpubMagic()) return false;
      if (hasIgnoreXpubMagic()) {
        if (getIgnoreXpubMagic()
            != other.getIgnoreXpubMagic()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getAddressNCount() > 0) {
        hash = (37 * hash) + ADDRESS_N_FIELD_NUMBER;
        hash = (53 * hash) + getAddressNList().hashCode();
      }
      if (hasEcdsaCurveName()) {
        hash = (37 * hash) + ECDSA_CURVE_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getEcdsaCurveName().hashCode();
      }
      if (hasShowDisplay()) {
        hash = (37 * hash) + SHOW_DISPLAY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getShowDisplay());
      }
      if (hasCoinName()) {
        hash = (37 * hash) + COIN_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getCoinName().hashCode();
      }
      if (hasScriptType()) {
        hash = (37 * hash) + SCRIPT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + scriptType_;
      }
      if (hasIgnoreXpubMagic()) {
        hash = (37 * hash) + IGNORE_XPUB_MAGIC_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIgnoreXpubMagic());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Request: Ask device for public key corresponding to address_n path
     * &#64;start
     * &#64;next PublicKey
     * &#64;next Failure
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.GetPublicKey}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.GetPublicKey)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKeyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetPublicKey_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetPublicKey_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        addressN_ = emptyIntList();
        ecdsaCurveName_ = "";
        showDisplay_ = false;
        coinName_ = "Bitcoin";
        scriptType_ = 0;
        ignoreXpubMagic_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetPublicKey_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          addressN_.makeImmutable();
          result.addressN_ = addressN_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.ecdsaCurveName_ = ecdsaCurveName_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.showDisplay_ = showDisplay_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.coinName_ = coinName_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.scriptType_ = scriptType_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.ignoreXpubMagic_ = ignoreXpubMagic_;
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey.getDefaultInstance()) return this;
        if (!other.addressN_.isEmpty()) {
          if (addressN_.isEmpty()) {
            addressN_ = other.addressN_;
            addressN_.makeImmutable();
            bitField0_ |= 0x00000001;
          } else {
            ensureAddressNIsMutable();
            addressN_.addAll(other.addressN_);
          }
          onChanged();
        }
        if (other.hasEcdsaCurveName()) {
          ecdsaCurveName_ = other.ecdsaCurveName_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasShowDisplay()) {
          setShowDisplay(other.getShowDisplay());
        }
        if (other.hasCoinName()) {
          coinName_ = other.coinName_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        if (other.hasScriptType()) {
          setScriptType(other.getScriptType());
        }
        if (other.hasIgnoreXpubMagic()) {
          setIgnoreXpubMagic(other.getIgnoreXpubMagic());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int v = input.readUInt32();
                ensureAddressNIsMutable();
                addressN_.addInt(v);
                break;
              } // case 8
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureAddressNIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  addressN_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 10
              case 18: {
                ecdsaCurveName_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                showDisplay_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                coinName_ = input.readBytes();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 40: {
                int tmpRaw = input.readEnum();
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType tmpValue =
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(5, tmpRaw);
                } else {
                  scriptType_ = tmpRaw;
                  bitField0_ |= 0x00000010;
                }
                break;
              } // case 40
              case 48: {
                ignoreXpubMagic_ = input.readBool();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.IntList addressN_ = emptyIntList();
      private void ensureAddressNIsMutable() {
        if (!addressN_.isModifiable()) {
          addressN_ = makeMutableCopy(addressN_);
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return A list containing the addressN.
       */
      public java.util.List<java.lang.Integer>
          getAddressNList() {
        addressN_.makeImmutable();
        return addressN_;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return The count of addressN.
       */
      public int getAddressNCount() {
        return addressN_.size();
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param index The index of the element to return.
       * @return The addressN at the given index.
       */
      public int getAddressN(int index) {
        return addressN_.getInt(index);
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param index The index to set the value at.
       * @param value The addressN to set.
       * @return This builder for chaining.
       */
      public Builder setAddressN(
          int index, int value) {

        ensureAddressNIsMutable();
        addressN_.setInt(index, value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param value The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAddressN(int value) {

        ensureAddressNIsMutable();
        addressN_.addInt(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param values The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAllAddressN(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAddressNIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, addressN_);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAddressN() {
        addressN_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.lang.Object ecdsaCurveName_ = "";
      /**
       * <pre>
       * ECDSA curve name to use
       * </pre>
       *
       * <code>optional string ecdsa_curve_name = 2;</code>
       * @return Whether the ecdsaCurveName field is set.
       */
      public boolean hasEcdsaCurveName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * ECDSA curve name to use
       * </pre>
       *
       * <code>optional string ecdsa_curve_name = 2;</code>
       * @return The ecdsaCurveName.
       */
      public java.lang.String getEcdsaCurveName() {
        java.lang.Object ref = ecdsaCurveName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            ecdsaCurveName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * ECDSA curve name to use
       * </pre>
       *
       * <code>optional string ecdsa_curve_name = 2;</code>
       * @return The bytes for ecdsaCurveName.
       */
      public com.google.protobuf.ByteString
          getEcdsaCurveNameBytes() {
        java.lang.Object ref = ecdsaCurveName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ecdsaCurveName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * ECDSA curve name to use
       * </pre>
       *
       * <code>optional string ecdsa_curve_name = 2;</code>
       * @param value The ecdsaCurveName to set.
       * @return This builder for chaining.
       */
      public Builder setEcdsaCurveName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ecdsaCurveName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ECDSA curve name to use
       * </pre>
       *
       * <code>optional string ecdsa_curve_name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearEcdsaCurveName() {
        ecdsaCurveName_ = getDefaultInstance().getEcdsaCurveName();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ECDSA curve name to use
       * </pre>
       *
       * <code>optional string ecdsa_curve_name = 2;</code>
       * @param value The bytes for ecdsaCurveName to set.
       * @return This builder for chaining.
       */
      public Builder setEcdsaCurveNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ecdsaCurveName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private boolean showDisplay_ ;
      /**
       * <pre>
       * optionally show on display before sending the result
       * </pre>
       *
       * <code>optional bool show_display = 3;</code>
       * @return Whether the showDisplay field is set.
       */
      @java.lang.Override
      public boolean hasShowDisplay() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * optionally show on display before sending the result
       * </pre>
       *
       * <code>optional bool show_display = 3;</code>
       * @return The showDisplay.
       */
      @java.lang.Override
      public boolean getShowDisplay() {
        return showDisplay_;
      }
      /**
       * <pre>
       * optionally show on display before sending the result
       * </pre>
       *
       * <code>optional bool show_display = 3;</code>
       * @param value The showDisplay to set.
       * @return This builder for chaining.
       */
      public Builder setShowDisplay(boolean value) {

        showDisplay_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * optionally show on display before sending the result
       * </pre>
       *
       * <code>optional bool show_display = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearShowDisplay() {
        bitField0_ = (bitField0_ & ~0x00000004);
        showDisplay_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object coinName_ = "Bitcoin";
      /**
       * <pre>
       * coin to use for verifying
       * </pre>
       *
       * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
       * @return Whether the coinName field is set.
       */
      public boolean hasCoinName() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * coin to use for verifying
       * </pre>
       *
       * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
       * @return The coinName.
       */
      public java.lang.String getCoinName() {
        java.lang.Object ref = coinName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            coinName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * coin to use for verifying
       * </pre>
       *
       * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
       * @return The bytes for coinName.
       */
      public com.google.protobuf.ByteString
          getCoinNameBytes() {
        java.lang.Object ref = coinName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          coinName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * coin to use for verifying
       * </pre>
       *
       * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
       * @param value The coinName to set.
       * @return This builder for chaining.
       */
      public Builder setCoinName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        coinName_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coin to use for verifying
       * </pre>
       *
       * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
       * @return This builder for chaining.
       */
      public Builder clearCoinName() {
        coinName_ = getDefaultInstance().getCoinName();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coin to use for verifying
       * </pre>
       *
       * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
       * @param value The bytes for coinName to set.
       * @return This builder for chaining.
       */
      public Builder setCoinNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        coinName_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      private int scriptType_ = 0;
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 5 [default = SPENDADDRESS];</code>
       * @return Whether the scriptType field is set.
       */
      @java.lang.Override public boolean hasScriptType() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 5 [default = SPENDADDRESS];</code>
       * @return The scriptType.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(scriptType_);
        return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.SPENDADDRESS : result;
      }
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 5 [default = SPENDADDRESS];</code>
       * @param value The scriptType to set.
       * @return This builder for chaining.
       */
      public Builder setScriptType(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        scriptType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 5 [default = SPENDADDRESS];</code>
       * @return This builder for chaining.
       */
      public Builder clearScriptType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        scriptType_ = 0;
        onChanged();
        return this;
      }

      private boolean ignoreXpubMagic_ ;
      /**
       * <pre>
       * ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
       * </pre>
       *
       * <code>optional bool ignore_xpub_magic = 6;</code>
       * @return Whether the ignoreXpubMagic field is set.
       */
      @java.lang.Override
      public boolean hasIgnoreXpubMagic() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
       * </pre>
       *
       * <code>optional bool ignore_xpub_magic = 6;</code>
       * @return The ignoreXpubMagic.
       */
      @java.lang.Override
      public boolean getIgnoreXpubMagic() {
        return ignoreXpubMagic_;
      }
      /**
       * <pre>
       * ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
       * </pre>
       *
       * <code>optional bool ignore_xpub_magic = 6;</code>
       * @param value The ignoreXpubMagic to set.
       * @return This builder for chaining.
       */
      public Builder setIgnoreXpubMagic(boolean value) {

        ignoreXpubMagic_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
       * </pre>
       *
       * <code>optional bool ignore_xpub_magic = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearIgnoreXpubMagic() {
        bitField0_ = (bitField0_ & ~0x00000020);
        ignoreXpubMagic_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.GetPublicKey)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.GetPublicKey)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GetPublicKey>
        PARSER = new com.google.protobuf.AbstractParser<GetPublicKey>() {
      @java.lang.Override
      public GetPublicKey parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<GetPublicKey> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GetPublicKey> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetPublicKey getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PublicKeyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.PublicKey)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * BIP-32 public node
     * </pre>
     *
     * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
     * @return Whether the node field is set.
     */
    boolean hasNode();
    /**
     * <pre>
     * BIP-32 public node
     * </pre>
     *
     * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
     * @return The node.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType getNode();
    /**
     * <pre>
     * BIP-32 public node
     * </pre>
     *
     * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder getNodeOrBuilder();

    /**
     * <pre>
     * serialized form of public node
     * </pre>
     *
     * <code>required string xpub = 2;</code>
     * @return Whether the xpub field is set.
     */
    boolean hasXpub();
    /**
     * <pre>
     * serialized form of public node
     * </pre>
     *
     * <code>required string xpub = 2;</code>
     * @return The xpub.
     */
    java.lang.String getXpub();
    /**
     * <pre>
     * serialized form of public node
     * </pre>
     *
     * <code>required string xpub = 2;</code>
     * @return The bytes for xpub.
     */
    com.google.protobuf.ByteString
        getXpubBytes();

    /**
     * <pre>
     * master root node fingerprint
     * </pre>
     *
     * <code>optional uint32 root_fingerprint = 3;</code>
     * @return Whether the rootFingerprint field is set.
     */
    boolean hasRootFingerprint();
    /**
     * <pre>
     * master root node fingerprint
     * </pre>
     *
     * <code>optional uint32 root_fingerprint = 3;</code>
     * @return The rootFingerprint.
     */
    int getRootFingerprint();

    /**
     * <pre>
     * BIP-380 descriptor
     * </pre>
     *
     * <code>optional string descriptor_field = 4;</code>
     * @return Whether the descriptorField field is set.
     */
    boolean hasDescriptorField();
    /**
     * <pre>
     * BIP-380 descriptor
     * </pre>
     *
     * <code>optional string descriptor_field = 4;</code>
     * @return The descriptorField.
     */
    java.lang.String getDescriptorField();
    /**
     * <pre>
     * BIP-380 descriptor
     * </pre>
     *
     * <code>optional string descriptor_field = 4;</code>
     * @return The bytes for descriptorField.
     */
    com.google.protobuf.ByteString
        getDescriptorFieldBytes();
  }
  /**
   * <pre>
   * *
   * Response: Contains public key derived from device private seed
   * &#64;end
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.PublicKey}
   */
  public static final class PublicKey extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.PublicKey)
      PublicKeyOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        PublicKey.class.getName());
    }
    // Use PublicKey.newBuilder() to construct.
    private PublicKey(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private PublicKey() {
      xpub_ = "";
      descriptorField_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PublicKey_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PublicKey_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey.Builder.class);
    }

    private int bitField0_;
    public static final int NODE_FIELD_NUMBER = 1;
    private com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType node_;
    /**
     * <pre>
     * BIP-32 public node
     * </pre>
     *
     * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
     * @return Whether the node field is set.
     */
    @java.lang.Override
    public boolean hasNode() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * BIP-32 public node
     * </pre>
     *
     * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
     * @return The node.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType getNode() {
      return node_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.getDefaultInstance() : node_;
    }
    /**
     * <pre>
     * BIP-32 public node
     * </pre>
     *
     * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder getNodeOrBuilder() {
      return node_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.getDefaultInstance() : node_;
    }

    public static final int XPUB_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object xpub_ = "";
    /**
     * <pre>
     * serialized form of public node
     * </pre>
     *
     * <code>required string xpub = 2;</code>
     * @return Whether the xpub field is set.
     */
    @java.lang.Override
    public boolean hasXpub() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * serialized form of public node
     * </pre>
     *
     * <code>required string xpub = 2;</code>
     * @return The xpub.
     */
    @java.lang.Override
    public java.lang.String getXpub() {
      java.lang.Object ref = xpub_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          xpub_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * serialized form of public node
     * </pre>
     *
     * <code>required string xpub = 2;</code>
     * @return The bytes for xpub.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getXpubBytes() {
      java.lang.Object ref = xpub_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        xpub_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ROOT_FINGERPRINT_FIELD_NUMBER = 3;
    private int rootFingerprint_ = 0;
    /**
     * <pre>
     * master root node fingerprint
     * </pre>
     *
     * <code>optional uint32 root_fingerprint = 3;</code>
     * @return Whether the rootFingerprint field is set.
     */
    @java.lang.Override
    public boolean hasRootFingerprint() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * master root node fingerprint
     * </pre>
     *
     * <code>optional uint32 root_fingerprint = 3;</code>
     * @return The rootFingerprint.
     */
    @java.lang.Override
    public int getRootFingerprint() {
      return rootFingerprint_;
    }

    public static final int DESCRIPTOR_FIELD_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object descriptorField_ = "";
    /**
     * <pre>
     * BIP-380 descriptor
     * </pre>
     *
     * <code>optional string descriptor_field = 4;</code>
     * @return Whether the descriptorField field is set.
     */
    @java.lang.Override
    public boolean hasDescriptorField() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * BIP-380 descriptor
     * </pre>
     *
     * <code>optional string descriptor_field = 4;</code>
     * @return The descriptorField.
     */
    @java.lang.Override
    public java.lang.String getDescriptorField() {
      java.lang.Object ref = descriptorField_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          descriptorField_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * BIP-380 descriptor
     * </pre>
     *
     * <code>optional string descriptor_field = 4;</code>
     * @return The bytes for descriptorField.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDescriptorFieldBytes() {
      java.lang.Object ref = descriptorField_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        descriptorField_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasNode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasXpub()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getNode().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getNode());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, xpub_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeUInt32(3, rootFingerprint_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 4, descriptorField_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getNode());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, xpub_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, rootFingerprint_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(4, descriptorField_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey) obj;

      if (hasNode() != other.hasNode()) return false;
      if (hasNode()) {
        if (!getNode()
            .equals(other.getNode())) return false;
      }
      if (hasXpub() != other.hasXpub()) return false;
      if (hasXpub()) {
        if (!getXpub()
            .equals(other.getXpub())) return false;
      }
      if (hasRootFingerprint() != other.hasRootFingerprint()) return false;
      if (hasRootFingerprint()) {
        if (getRootFingerprint()
            != other.getRootFingerprint()) return false;
      }
      if (hasDescriptorField() != other.hasDescriptorField()) return false;
      if (hasDescriptorField()) {
        if (!getDescriptorField()
            .equals(other.getDescriptorField())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasNode()) {
        hash = (37 * hash) + NODE_FIELD_NUMBER;
        hash = (53 * hash) + getNode().hashCode();
      }
      if (hasXpub()) {
        hash = (37 * hash) + XPUB_FIELD_NUMBER;
        hash = (53 * hash) + getXpub().hashCode();
      }
      if (hasRootFingerprint()) {
        hash = (37 * hash) + ROOT_FINGERPRINT_FIELD_NUMBER;
        hash = (53 * hash) + getRootFingerprint();
      }
      if (hasDescriptorField()) {
        hash = (37 * hash) + DESCRIPTOR_FIELD_FIELD_NUMBER;
        hash = (53 * hash) + getDescriptorField().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Response: Contains public key derived from device private seed
     * &#64;end
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.PublicKey}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.PublicKey)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKeyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PublicKey_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PublicKey_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getNodeFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        node_ = null;
        if (nodeBuilder_ != null) {
          nodeBuilder_.dispose();
          nodeBuilder_ = null;
        }
        xpub_ = "";
        rootFingerprint_ = 0;
        descriptorField_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PublicKey_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.node_ = nodeBuilder_ == null
              ? node_
              : nodeBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.xpub_ = xpub_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.rootFingerprint_ = rootFingerprint_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.descriptorField_ = descriptorField_;
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey.getDefaultInstance()) return this;
        if (other.hasNode()) {
          mergeNode(other.getNode());
        }
        if (other.hasXpub()) {
          xpub_ = other.xpub_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasRootFingerprint()) {
          setRootFingerprint(other.getRootFingerprint());
        }
        if (other.hasDescriptorField()) {
          descriptorField_ = other.descriptorField_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasNode()) {
          return false;
        }
        if (!hasXpub()) {
          return false;
        }
        if (!getNode().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getNodeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                xpub_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                rootFingerprint_ = input.readUInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                descriptorField_ = input.readBytes();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType node_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder> nodeBuilder_;
      /**
       * <pre>
       * BIP-32 public node
       * </pre>
       *
       * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
       * @return Whether the node field is set.
       */
      public boolean hasNode() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * BIP-32 public node
       * </pre>
       *
       * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
       * @return The node.
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType getNode() {
        if (nodeBuilder_ == null) {
          return node_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.getDefaultInstance() : node_;
        } else {
          return nodeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * BIP-32 public node
       * </pre>
       *
       * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
       */
      public Builder setNode(com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType value) {
        if (nodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          node_ = value;
        } else {
          nodeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 public node
       * </pre>
       *
       * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
       */
      public Builder setNode(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder builderForValue) {
        if (nodeBuilder_ == null) {
          node_ = builderForValue.build();
        } else {
          nodeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 public node
       * </pre>
       *
       * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
       */
      public Builder mergeNode(com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType value) {
        if (nodeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            node_ != null &&
            node_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.getDefaultInstance()) {
            getNodeBuilder().mergeFrom(value);
          } else {
            node_ = value;
          }
        } else {
          nodeBuilder_.mergeFrom(value);
        }
        if (node_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * BIP-32 public node
       * </pre>
       *
       * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
       */
      public Builder clearNode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        node_ = null;
        if (nodeBuilder_ != null) {
          nodeBuilder_.dispose();
          nodeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 public node
       * </pre>
       *
       * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder getNodeBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getNodeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * BIP-32 public node
       * </pre>
       *
       * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder getNodeOrBuilder() {
        if (nodeBuilder_ != null) {
          return nodeBuilder_.getMessageOrBuilder();
        } else {
          return node_ == null ?
              com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.getDefaultInstance() : node_;
        }
      }
      /**
       * <pre>
       * BIP-32 public node
       * </pre>
       *
       * <code>required .hw.trezor.messages.common.HDNodeType node = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder> 
          getNodeFieldBuilder() {
        if (nodeBuilder_ == null) {
          nodeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.HDNodeTypeOrBuilder>(
                  getNode(),
                  getParentForChildren(),
                  isClean());
          node_ = null;
        }
        return nodeBuilder_;
      }

      private java.lang.Object xpub_ = "";
      /**
       * <pre>
       * serialized form of public node
       * </pre>
       *
       * <code>required string xpub = 2;</code>
       * @return Whether the xpub field is set.
       */
      public boolean hasXpub() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * serialized form of public node
       * </pre>
       *
       * <code>required string xpub = 2;</code>
       * @return The xpub.
       */
      public java.lang.String getXpub() {
        java.lang.Object ref = xpub_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            xpub_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * serialized form of public node
       * </pre>
       *
       * <code>required string xpub = 2;</code>
       * @return The bytes for xpub.
       */
      public com.google.protobuf.ByteString
          getXpubBytes() {
        java.lang.Object ref = xpub_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          xpub_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * serialized form of public node
       * </pre>
       *
       * <code>required string xpub = 2;</code>
       * @param value The xpub to set.
       * @return This builder for chaining.
       */
      public Builder setXpub(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        xpub_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * serialized form of public node
       * </pre>
       *
       * <code>required string xpub = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearXpub() {
        xpub_ = getDefaultInstance().getXpub();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * serialized form of public node
       * </pre>
       *
       * <code>required string xpub = 2;</code>
       * @param value The bytes for xpub to set.
       * @return This builder for chaining.
       */
      public Builder setXpubBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        xpub_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private int rootFingerprint_ ;
      /**
       * <pre>
       * master root node fingerprint
       * </pre>
       *
       * <code>optional uint32 root_fingerprint = 3;</code>
       * @return Whether the rootFingerprint field is set.
       */
      @java.lang.Override
      public boolean hasRootFingerprint() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * master root node fingerprint
       * </pre>
       *
       * <code>optional uint32 root_fingerprint = 3;</code>
       * @return The rootFingerprint.
       */
      @java.lang.Override
      public int getRootFingerprint() {
        return rootFingerprint_;
      }
      /**
       * <pre>
       * master root node fingerprint
       * </pre>
       *
       * <code>optional uint32 root_fingerprint = 3;</code>
       * @param value The rootFingerprint to set.
       * @return This builder for chaining.
       */
      public Builder setRootFingerprint(int value) {

        rootFingerprint_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * master root node fingerprint
       * </pre>
       *
       * <code>optional uint32 root_fingerprint = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearRootFingerprint() {
        bitField0_ = (bitField0_ & ~0x00000004);
        rootFingerprint_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object descriptorField_ = "";
      /**
       * <pre>
       * BIP-380 descriptor
       * </pre>
       *
       * <code>optional string descriptor_field = 4;</code>
       * @return Whether the descriptorField field is set.
       */
      public boolean hasDescriptorField() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * BIP-380 descriptor
       * </pre>
       *
       * <code>optional string descriptor_field = 4;</code>
       * @return The descriptorField.
       */
      public java.lang.String getDescriptorField() {
        java.lang.Object ref = descriptorField_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            descriptorField_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * BIP-380 descriptor
       * </pre>
       *
       * <code>optional string descriptor_field = 4;</code>
       * @return The bytes for descriptorField.
       */
      public com.google.protobuf.ByteString
          getDescriptorFieldBytes() {
        java.lang.Object ref = descriptorField_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          descriptorField_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * BIP-380 descriptor
       * </pre>
       *
       * <code>optional string descriptor_field = 4;</code>
       * @param value The descriptorField to set.
       * @return This builder for chaining.
       */
      public Builder setDescriptorField(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        descriptorField_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-380 descriptor
       * </pre>
       *
       * <code>optional string descriptor_field = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearDescriptorField() {
        descriptorField_ = getDefaultInstance().getDescriptorField();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-380 descriptor
       * </pre>
       *
       * <code>optional string descriptor_field = 4;</code>
       * @param value The bytes for descriptorField to set.
       * @return This builder for chaining.
       */
      public Builder setDescriptorFieldBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        descriptorField_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.PublicKey)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.PublicKey)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PublicKey>
        PARSER = new com.google.protobuf.AbstractParser<PublicKey>() {
      @java.lang.Override
      public PublicKey parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<PublicKey> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PublicKey> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PublicKey getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GetAddressOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.GetAddress)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return A list containing the addressN.
     */
    java.util.List<java.lang.Integer> getAddressNList();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return The count of addressN.
     */
    int getAddressNCount();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    int getAddressN(int index);

    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return Whether the coinName field is set.
     */
    boolean hasCoinName();
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return The coinName.
     */
    java.lang.String getCoinName();
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return The bytes for coinName.
     */
    com.google.protobuf.ByteString
        getCoinNameBytes();

    /**
     * <pre>
     * optionally show on display before sending the result
     * </pre>
     *
     * <code>optional bool show_display = 3;</code>
     * @return Whether the showDisplay field is set.
     */
    boolean hasShowDisplay();
    /**
     * <pre>
     * optionally show on display before sending the result
     * </pre>
     *
     * <code>optional bool show_display = 3;</code>
     * @return The showDisplay.
     */
    boolean getShowDisplay();

    /**
     * <pre>
     * filled if we are showing a multisig address
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
     * @return Whether the multisig field is set.
     */
    boolean hasMultisig();
    /**
     * <pre>
     * filled if we are showing a multisig address
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
     * @return The multisig.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig();
    /**
     * <pre>
     * filled if we are showing a multisig address
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder();

    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 5 [default = SPENDADDRESS];</code>
     * @return Whether the scriptType field is set.
     */
    boolean hasScriptType();
    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 5 [default = SPENDADDRESS];</code>
     * @return The scriptType.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType();

    /**
     * <pre>
     * ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
     * </pre>
     *
     * <code>optional bool ignore_xpub_magic = 6;</code>
     * @return Whether the ignoreXpubMagic field is set.
     */
    boolean hasIgnoreXpubMagic();
    /**
     * <pre>
     * ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
     * </pre>
     *
     * <code>optional bool ignore_xpub_magic = 6;</code>
     * @return The ignoreXpubMagic.
     */
    boolean getIgnoreXpubMagic();

    /**
     * <pre>
     * display the address in chunks of 4 characters
     * </pre>
     *
     * <code>optional bool chunkify = 7;</code>
     * @return Whether the chunkify field is set.
     */
    boolean hasChunkify();
    /**
     * <pre>
     * display the address in chunks of 4 characters
     * </pre>
     *
     * <code>optional bool chunkify = 7;</code>
     * @return The chunkify.
     */
    boolean getChunkify();
  }
  /**
   * <pre>
   * *
   * Request: Ask device for address corresponding to address_n path
   * &#64;start
   * &#64;next Address
   * &#64;next Failure
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.GetAddress}
   */
  public static final class GetAddress extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.GetAddress)
      GetAddressOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        GetAddress.class.getName());
    }
    // Use GetAddress.newBuilder() to construct.
    private GetAddress(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private GetAddress() {
      addressN_ = emptyIntList();
      coinName_ = "Bitcoin";
      scriptType_ = 0;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetAddress_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetAddress_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress.Builder.class);
    }

    private int bitField0_;
    public static final int ADDRESS_N_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList addressN_ =
        emptyIntList();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return A list containing the addressN.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getAddressNList() {
      return addressN_;
    }
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return The count of addressN.
     */
    public int getAddressNCount() {
      return addressN_.size();
    }
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    public int getAddressN(int index) {
      return addressN_.getInt(index);
    }

    public static final int COIN_NAME_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object coinName_ = "Bitcoin";
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return Whether the coinName field is set.
     */
    @java.lang.Override
    public boolean hasCoinName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return The coinName.
     */
    @java.lang.Override
    public java.lang.String getCoinName() {
      java.lang.Object ref = coinName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          coinName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return The bytes for coinName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCoinNameBytes() {
      java.lang.Object ref = coinName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        coinName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SHOW_DISPLAY_FIELD_NUMBER = 3;
    private boolean showDisplay_ = false;
    /**
     * <pre>
     * optionally show on display before sending the result
     * </pre>
     *
     * <code>optional bool show_display = 3;</code>
     * @return Whether the showDisplay field is set.
     */
    @java.lang.Override
    public boolean hasShowDisplay() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * optionally show on display before sending the result
     * </pre>
     *
     * <code>optional bool show_display = 3;</code>
     * @return The showDisplay.
     */
    @java.lang.Override
    public boolean getShowDisplay() {
      return showDisplay_;
    }

    public static final int MULTISIG_FIELD_NUMBER = 4;
    private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType multisig_;
    /**
     * <pre>
     * filled if we are showing a multisig address
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
     * @return Whether the multisig field is set.
     */
    @java.lang.Override
    public boolean hasMultisig() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * filled if we are showing a multisig address
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
     * @return The multisig.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig() {
      return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
    }
    /**
     * <pre>
     * filled if we are showing a multisig address
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder() {
      return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
    }

    public static final int SCRIPT_TYPE_FIELD_NUMBER = 5;
    private int scriptType_ = 0;
    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 5 [default = SPENDADDRESS];</code>
     * @return Whether the scriptType field is set.
     */
    @java.lang.Override public boolean hasScriptType() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 5 [default = SPENDADDRESS];</code>
     * @return The scriptType.
     */
    @java.lang.Override public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType() {
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(scriptType_);
      return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.SPENDADDRESS : result;
    }

    public static final int IGNORE_XPUB_MAGIC_FIELD_NUMBER = 6;
    private boolean ignoreXpubMagic_ = false;
    /**
     * <pre>
     * ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
     * </pre>
     *
     * <code>optional bool ignore_xpub_magic = 6;</code>
     * @return Whether the ignoreXpubMagic field is set.
     */
    @java.lang.Override
    public boolean hasIgnoreXpubMagic() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
     * </pre>
     *
     * <code>optional bool ignore_xpub_magic = 6;</code>
     * @return The ignoreXpubMagic.
     */
    @java.lang.Override
    public boolean getIgnoreXpubMagic() {
      return ignoreXpubMagic_;
    }

    public static final int CHUNKIFY_FIELD_NUMBER = 7;
    private boolean chunkify_ = false;
    /**
     * <pre>
     * display the address in chunks of 4 characters
     * </pre>
     *
     * <code>optional bool chunkify = 7;</code>
     * @return Whether the chunkify field is set.
     */
    @java.lang.Override
    public boolean hasChunkify() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * display the address in chunks of 4 characters
     * </pre>
     *
     * <code>optional bool chunkify = 7;</code>
     * @return The chunkify.
     */
    @java.lang.Override
    public boolean getChunkify() {
      return chunkify_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasMultisig()) {
        if (!getMultisig().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < addressN_.size(); i++) {
        output.writeUInt32(1, addressN_.getInt(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, coinName_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(3, showDisplay_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(4, getMultisig());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeEnum(5, scriptType_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBool(6, ignoreXpubMagic_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeBool(7, chunkify_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < addressN_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(addressN_.getInt(i));
        }
        size += dataSize;
        size += 1 * getAddressNList().size();
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, coinName_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, showDisplay_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getMultisig());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, scriptType_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, ignoreXpubMagic_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, chunkify_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress) obj;

      if (!getAddressNList()
          .equals(other.getAddressNList())) return false;
      if (hasCoinName() != other.hasCoinName()) return false;
      if (hasCoinName()) {
        if (!getCoinName()
            .equals(other.getCoinName())) return false;
      }
      if (hasShowDisplay() != other.hasShowDisplay()) return false;
      if (hasShowDisplay()) {
        if (getShowDisplay()
            != other.getShowDisplay()) return false;
      }
      if (hasMultisig() != other.hasMultisig()) return false;
      if (hasMultisig()) {
        if (!getMultisig()
            .equals(other.getMultisig())) return false;
      }
      if (hasScriptType() != other.hasScriptType()) return false;
      if (hasScriptType()) {
        if (scriptType_ != other.scriptType_) return false;
      }
      if (hasIgnoreXpubMagic() != other.hasIgnoreXpubMagic()) return false;
      if (hasIgnoreXpubMagic()) {
        if (getIgnoreXpubMagic()
            != other.getIgnoreXpubMagic()) return false;
      }
      if (hasChunkify() != other.hasChunkify()) return false;
      if (hasChunkify()) {
        if (getChunkify()
            != other.getChunkify()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getAddressNCount() > 0) {
        hash = (37 * hash) + ADDRESS_N_FIELD_NUMBER;
        hash = (53 * hash) + getAddressNList().hashCode();
      }
      if (hasCoinName()) {
        hash = (37 * hash) + COIN_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getCoinName().hashCode();
      }
      if (hasShowDisplay()) {
        hash = (37 * hash) + SHOW_DISPLAY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getShowDisplay());
      }
      if (hasMultisig()) {
        hash = (37 * hash) + MULTISIG_FIELD_NUMBER;
        hash = (53 * hash) + getMultisig().hashCode();
      }
      if (hasScriptType()) {
        hash = (37 * hash) + SCRIPT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + scriptType_;
      }
      if (hasIgnoreXpubMagic()) {
        hash = (37 * hash) + IGNORE_XPUB_MAGIC_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIgnoreXpubMagic());
      }
      if (hasChunkify()) {
        hash = (37 * hash) + CHUNKIFY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getChunkify());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Request: Ask device for address corresponding to address_n path
     * &#64;start
     * &#64;next Address
     * &#64;next Failure
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.GetAddress}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.GetAddress)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddressOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetAddress_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetAddress_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getMultisigFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        addressN_ = emptyIntList();
        coinName_ = "Bitcoin";
        showDisplay_ = false;
        multisig_ = null;
        if (multisigBuilder_ != null) {
          multisigBuilder_.dispose();
          multisigBuilder_ = null;
        }
        scriptType_ = 0;
        ignoreXpubMagic_ = false;
        chunkify_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetAddress_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          addressN_.makeImmutable();
          result.addressN_ = addressN_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.coinName_ = coinName_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.showDisplay_ = showDisplay_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.multisig_ = multisigBuilder_ == null
              ? multisig_
              : multisigBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.scriptType_ = scriptType_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.ignoreXpubMagic_ = ignoreXpubMagic_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.chunkify_ = chunkify_;
          to_bitField0_ |= 0x00000020;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress.getDefaultInstance()) return this;
        if (!other.addressN_.isEmpty()) {
          if (addressN_.isEmpty()) {
            addressN_ = other.addressN_;
            addressN_.makeImmutable();
            bitField0_ |= 0x00000001;
          } else {
            ensureAddressNIsMutable();
            addressN_.addAll(other.addressN_);
          }
          onChanged();
        }
        if (other.hasCoinName()) {
          coinName_ = other.coinName_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasShowDisplay()) {
          setShowDisplay(other.getShowDisplay());
        }
        if (other.hasMultisig()) {
          mergeMultisig(other.getMultisig());
        }
        if (other.hasScriptType()) {
          setScriptType(other.getScriptType());
        }
        if (other.hasIgnoreXpubMagic()) {
          setIgnoreXpubMagic(other.getIgnoreXpubMagic());
        }
        if (other.hasChunkify()) {
          setChunkify(other.getChunkify());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (hasMultisig()) {
          if (!getMultisig().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int v = input.readUInt32();
                ensureAddressNIsMutable();
                addressN_.addInt(v);
                break;
              } // case 8
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureAddressNIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  addressN_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 10
              case 18: {
                coinName_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                showDisplay_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                input.readMessage(
                    getMultisigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 40: {
                int tmpRaw = input.readEnum();
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType tmpValue =
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(5, tmpRaw);
                } else {
                  scriptType_ = tmpRaw;
                  bitField0_ |= 0x00000010;
                }
                break;
              } // case 40
              case 48: {
                ignoreXpubMagic_ = input.readBool();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 56: {
                chunkify_ = input.readBool();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.IntList addressN_ = emptyIntList();
      private void ensureAddressNIsMutable() {
        if (!addressN_.isModifiable()) {
          addressN_ = makeMutableCopy(addressN_);
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return A list containing the addressN.
       */
      public java.util.List<java.lang.Integer>
          getAddressNList() {
        addressN_.makeImmutable();
        return addressN_;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return The count of addressN.
       */
      public int getAddressNCount() {
        return addressN_.size();
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param index The index of the element to return.
       * @return The addressN at the given index.
       */
      public int getAddressN(int index) {
        return addressN_.getInt(index);
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param index The index to set the value at.
       * @param value The addressN to set.
       * @return This builder for chaining.
       */
      public Builder setAddressN(
          int index, int value) {

        ensureAddressNIsMutable();
        addressN_.setInt(index, value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param value The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAddressN(int value) {

        ensureAddressNIsMutable();
        addressN_.addInt(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param values The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAllAddressN(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAddressNIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, addressN_);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAddressN() {
        addressN_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.lang.Object coinName_ = "Bitcoin";
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @return Whether the coinName field is set.
       */
      public boolean hasCoinName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @return The coinName.
       */
      public java.lang.String getCoinName() {
        java.lang.Object ref = coinName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            coinName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @return The bytes for coinName.
       */
      public com.google.protobuf.ByteString
          getCoinNameBytes() {
        java.lang.Object ref = coinName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          coinName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @param value The coinName to set.
       * @return This builder for chaining.
       */
      public Builder setCoinName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        coinName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @return This builder for chaining.
       */
      public Builder clearCoinName() {
        coinName_ = getDefaultInstance().getCoinName();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @param value The bytes for coinName to set.
       * @return This builder for chaining.
       */
      public Builder setCoinNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        coinName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private boolean showDisplay_ ;
      /**
       * <pre>
       * optionally show on display before sending the result
       * </pre>
       *
       * <code>optional bool show_display = 3;</code>
       * @return Whether the showDisplay field is set.
       */
      @java.lang.Override
      public boolean hasShowDisplay() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * optionally show on display before sending the result
       * </pre>
       *
       * <code>optional bool show_display = 3;</code>
       * @return The showDisplay.
       */
      @java.lang.Override
      public boolean getShowDisplay() {
        return showDisplay_;
      }
      /**
       * <pre>
       * optionally show on display before sending the result
       * </pre>
       *
       * <code>optional bool show_display = 3;</code>
       * @param value The showDisplay to set.
       * @return This builder for chaining.
       */
      public Builder setShowDisplay(boolean value) {

        showDisplay_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * optionally show on display before sending the result
       * </pre>
       *
       * <code>optional bool show_display = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearShowDisplay() {
        bitField0_ = (bitField0_ & ~0x00000004);
        showDisplay_ = false;
        onChanged();
        return this;
      }

      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType multisig_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder> multisigBuilder_;
      /**
       * <pre>
       * filled if we are showing a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       * @return Whether the multisig field is set.
       */
      public boolean hasMultisig() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * filled if we are showing a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       * @return The multisig.
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig() {
        if (multisigBuilder_ == null) {
          return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
        } else {
          return multisigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * filled if we are showing a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       */
      public Builder setMultisig(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType value) {
        if (multisigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          multisig_ = value;
        } else {
          multisigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * filled if we are showing a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       */
      public Builder setMultisig(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder builderForValue) {
        if (multisigBuilder_ == null) {
          multisig_ = builderForValue.build();
        } else {
          multisigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * filled if we are showing a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       */
      public Builder mergeMultisig(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType value) {
        if (multisigBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            multisig_ != null &&
            multisig_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance()) {
            getMultisigBuilder().mergeFrom(value);
          } else {
            multisig_ = value;
          }
        } else {
          multisigBuilder_.mergeFrom(value);
        }
        if (multisig_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * filled if we are showing a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       */
      public Builder clearMultisig() {
        bitField0_ = (bitField0_ & ~0x00000008);
        multisig_ = null;
        if (multisigBuilder_ != null) {
          multisigBuilder_.dispose();
          multisigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * filled if we are showing a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder getMultisigBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getMultisigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * filled if we are showing a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder() {
        if (multisigBuilder_ != null) {
          return multisigBuilder_.getMessageOrBuilder();
        } else {
          return multisig_ == null ?
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
        }
      }
      /**
       * <pre>
       * filled if we are showing a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder> 
          getMultisigFieldBuilder() {
        if (multisigBuilder_ == null) {
          multisigBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder>(
                  getMultisig(),
                  getParentForChildren(),
                  isClean());
          multisig_ = null;
        }
        return multisigBuilder_;
      }

      private int scriptType_ = 0;
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 5 [default = SPENDADDRESS];</code>
       * @return Whether the scriptType field is set.
       */
      @java.lang.Override public boolean hasScriptType() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 5 [default = SPENDADDRESS];</code>
       * @return The scriptType.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(scriptType_);
        return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.SPENDADDRESS : result;
      }
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 5 [default = SPENDADDRESS];</code>
       * @param value The scriptType to set.
       * @return This builder for chaining.
       */
      public Builder setScriptType(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        scriptType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 5 [default = SPENDADDRESS];</code>
       * @return This builder for chaining.
       */
      public Builder clearScriptType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        scriptType_ = 0;
        onChanged();
        return this;
      }

      private boolean ignoreXpubMagic_ ;
      /**
       * <pre>
       * ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
       * </pre>
       *
       * <code>optional bool ignore_xpub_magic = 6;</code>
       * @return Whether the ignoreXpubMagic field is set.
       */
      @java.lang.Override
      public boolean hasIgnoreXpubMagic() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
       * </pre>
       *
       * <code>optional bool ignore_xpub_magic = 6;</code>
       * @return The ignoreXpubMagic.
       */
      @java.lang.Override
      public boolean getIgnoreXpubMagic() {
        return ignoreXpubMagic_;
      }
      /**
       * <pre>
       * ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
       * </pre>
       *
       * <code>optional bool ignore_xpub_magic = 6;</code>
       * @param value The ignoreXpubMagic to set.
       * @return This builder for chaining.
       */
      public Builder setIgnoreXpubMagic(boolean value) {

        ignoreXpubMagic_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
       * </pre>
       *
       * <code>optional bool ignore_xpub_magic = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearIgnoreXpubMagic() {
        bitField0_ = (bitField0_ & ~0x00000020);
        ignoreXpubMagic_ = false;
        onChanged();
        return this;
      }

      private boolean chunkify_ ;
      /**
       * <pre>
       * display the address in chunks of 4 characters
       * </pre>
       *
       * <code>optional bool chunkify = 7;</code>
       * @return Whether the chunkify field is set.
       */
      @java.lang.Override
      public boolean hasChunkify() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * display the address in chunks of 4 characters
       * </pre>
       *
       * <code>optional bool chunkify = 7;</code>
       * @return The chunkify.
       */
      @java.lang.Override
      public boolean getChunkify() {
        return chunkify_;
      }
      /**
       * <pre>
       * display the address in chunks of 4 characters
       * </pre>
       *
       * <code>optional bool chunkify = 7;</code>
       * @param value The chunkify to set.
       * @return This builder for chaining.
       */
      public Builder setChunkify(boolean value) {

        chunkify_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * display the address in chunks of 4 characters
       * </pre>
       *
       * <code>optional bool chunkify = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearChunkify() {
        bitField0_ = (bitField0_ & ~0x00000040);
        chunkify_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.GetAddress)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.GetAddress)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GetAddress>
        PARSER = new com.google.protobuf.AbstractParser<GetAddress>() {
      @java.lang.Override
      public GetAddress parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<GetAddress> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GetAddress> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetAddress getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AddressOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.Address)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Coin address in Base58 encoding
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return Whether the address field is set.
     */
    boolean hasAddress();
    /**
     * <pre>
     * Coin address in Base58 encoding
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return The address.
     */
    java.lang.String getAddress();
    /**
     * <pre>
     * Coin address in Base58 encoding
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return The bytes for address.
     */
    com.google.protobuf.ByteString
        getAddressBytes();

    /**
     * <pre>
     * Address authentication code
     * </pre>
     *
     * <code>optional bytes mac = 2;</code>
     * @return Whether the mac field is set.
     */
    boolean hasMac();
    /**
     * <pre>
     * Address authentication code
     * </pre>
     *
     * <code>optional bytes mac = 2;</code>
     * @return The mac.
     */
    com.google.protobuf.ByteString getMac();
  }
  /**
   * <pre>
   * *
   * Response: Contains address derived from device private seed
   * &#64;end
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.Address}
   */
  public static final class Address extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.Address)
      AddressOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        Address.class.getName());
    }
    // Use Address.newBuilder() to construct.
    private Address(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Address() {
      address_ = "";
      mac_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_Address_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_Address_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address.Builder.class);
    }

    private int bitField0_;
    public static final int ADDRESS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object address_ = "";
    /**
     * <pre>
     * Coin address in Base58 encoding
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return Whether the address field is set.
     */
    @java.lang.Override
    public boolean hasAddress() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Coin address in Base58 encoding
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return The address.
     */
    @java.lang.Override
    public java.lang.String getAddress() {
      java.lang.Object ref = address_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          address_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Coin address in Base58 encoding
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return The bytes for address.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getAddressBytes() {
      java.lang.Object ref = address_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        address_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MAC_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString mac_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Address authentication code
     * </pre>
     *
     * <code>optional bytes mac = 2;</code>
     * @return Whether the mac field is set.
     */
    @java.lang.Override
    public boolean hasMac() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Address authentication code
     * </pre>
     *
     * <code>optional bytes mac = 2;</code>
     * @return The mac.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getMac() {
      return mac_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasAddress()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, address_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBytes(2, mac_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, address_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, mac_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address) obj;

      if (hasAddress() != other.hasAddress()) return false;
      if (hasAddress()) {
        if (!getAddress()
            .equals(other.getAddress())) return false;
      }
      if (hasMac() != other.hasMac()) return false;
      if (hasMac()) {
        if (!getMac()
            .equals(other.getMac())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasAddress()) {
        hash = (37 * hash) + ADDRESS_FIELD_NUMBER;
        hash = (53 * hash) + getAddress().hashCode();
      }
      if (hasMac()) {
        hash = (37 * hash) + MAC_FIELD_NUMBER;
        hash = (53 * hash) + getMac().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Response: Contains address derived from device private seed
     * &#64;end
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.Address}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.Address)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AddressOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_Address_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_Address_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        address_ = "";
        mac_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_Address_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.address_ = address_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.mac_ = mac_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address.getDefaultInstance()) return this;
        if (other.hasAddress()) {
          address_ = other.address_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasMac()) {
          setMac(other.getMac());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasAddress()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                address_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                mac_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object address_ = "";
      /**
       * <pre>
       * Coin address in Base58 encoding
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return Whether the address field is set.
       */
      public boolean hasAddress() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Coin address in Base58 encoding
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return The address.
       */
      public java.lang.String getAddress() {
        java.lang.Object ref = address_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            address_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Coin address in Base58 encoding
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return The bytes for address.
       */
      public com.google.protobuf.ByteString
          getAddressBytes() {
        java.lang.Object ref = address_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          address_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Coin address in Base58 encoding
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @param value The address to set.
       * @return This builder for chaining.
       */
      public Builder setAddress(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        address_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Coin address in Base58 encoding
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAddress() {
        address_ = getDefaultInstance().getAddress();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Coin address in Base58 encoding
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @param value The bytes for address to set.
       * @return This builder for chaining.
       */
      public Builder setAddressBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        address_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString mac_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * Address authentication code
       * </pre>
       *
       * <code>optional bytes mac = 2;</code>
       * @return Whether the mac field is set.
       */
      @java.lang.Override
      public boolean hasMac() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Address authentication code
       * </pre>
       *
       * <code>optional bytes mac = 2;</code>
       * @return The mac.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getMac() {
        return mac_;
      }
      /**
       * <pre>
       * Address authentication code
       * </pre>
       *
       * <code>optional bytes mac = 2;</code>
       * @param value The mac to set.
       * @return This builder for chaining.
       */
      public Builder setMac(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        mac_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Address authentication code
       * </pre>
       *
       * <code>optional bytes mac = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMac() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mac_ = getDefaultInstance().getMac();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.Address)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.Address)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Address>
        PARSER = new com.google.protobuf.AbstractParser<Address>() {
      @java.lang.Override
      public Address parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Address> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Address> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.Address getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GetOwnershipIdOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.GetOwnershipId)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return A list containing the addressN.
     */
    java.util.List<java.lang.Integer> getAddressNList();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return The count of addressN.
     */
    int getAddressNCount();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    int getAddressN(int index);

    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return Whether the coinName field is set.
     */
    boolean hasCoinName();
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return The coinName.
     */
    java.lang.String getCoinName();
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return The bytes for coinName.
     */
    com.google.protobuf.ByteString
        getCoinNameBytes();

    /**
     * <pre>
     * filled if we are dealing with a multisig scriptPubKey
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 3;</code>
     * @return Whether the multisig field is set.
     */
    boolean hasMultisig();
    /**
     * <pre>
     * filled if we are dealing with a multisig scriptPubKey
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 3;</code>
     * @return The multisig.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig();
    /**
     * <pre>
     * filled if we are dealing with a multisig scriptPubKey
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 3;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder();

    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 4 [default = SPENDADDRESS];</code>
     * @return Whether the scriptType field is set.
     */
    boolean hasScriptType();
    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 4 [default = SPENDADDRESS];</code>
     * @return The scriptType.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType();
  }
  /**
   * <pre>
   * *
   * Request: Ask device for ownership identifier corresponding to scriptPubKey for address_n path
   * &#64;start
   * &#64;next OwnershipId
   * &#64;next Failure
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.GetOwnershipId}
   */
  public static final class GetOwnershipId extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.GetOwnershipId)
      GetOwnershipIdOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        GetOwnershipId.class.getName());
    }
    // Use GetOwnershipId.newBuilder() to construct.
    private GetOwnershipId(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private GetOwnershipId() {
      addressN_ = emptyIntList();
      coinName_ = "Bitcoin";
      scriptType_ = 0;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetOwnershipId_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetOwnershipId_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId.Builder.class);
    }

    private int bitField0_;
    public static final int ADDRESS_N_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList addressN_ =
        emptyIntList();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return A list containing the addressN.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getAddressNList() {
      return addressN_;
    }
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return The count of addressN.
     */
    public int getAddressNCount() {
      return addressN_.size();
    }
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    public int getAddressN(int index) {
      return addressN_.getInt(index);
    }

    public static final int COIN_NAME_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object coinName_ = "Bitcoin";
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return Whether the coinName field is set.
     */
    @java.lang.Override
    public boolean hasCoinName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return The coinName.
     */
    @java.lang.Override
    public java.lang.String getCoinName() {
      java.lang.Object ref = coinName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          coinName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return The bytes for coinName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCoinNameBytes() {
      java.lang.Object ref = coinName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        coinName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MULTISIG_FIELD_NUMBER = 3;
    private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType multisig_;
    /**
     * <pre>
     * filled if we are dealing with a multisig scriptPubKey
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 3;</code>
     * @return Whether the multisig field is set.
     */
    @java.lang.Override
    public boolean hasMultisig() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * filled if we are dealing with a multisig scriptPubKey
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 3;</code>
     * @return The multisig.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig() {
      return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
    }
    /**
     * <pre>
     * filled if we are dealing with a multisig scriptPubKey
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 3;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder() {
      return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
    }

    public static final int SCRIPT_TYPE_FIELD_NUMBER = 4;
    private int scriptType_ = 0;
    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 4 [default = SPENDADDRESS];</code>
     * @return Whether the scriptType field is set.
     */
    @java.lang.Override public boolean hasScriptType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 4 [default = SPENDADDRESS];</code>
     * @return The scriptType.
     */
    @java.lang.Override public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType() {
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(scriptType_);
      return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.SPENDADDRESS : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasMultisig()) {
        if (!getMultisig().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < addressN_.size(); i++) {
        output.writeUInt32(1, addressN_.getInt(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, coinName_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(3, getMultisig());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeEnum(4, scriptType_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < addressN_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(addressN_.getInt(i));
        }
        size += dataSize;
        size += 1 * getAddressNList().size();
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, coinName_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getMultisig());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, scriptType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId) obj;

      if (!getAddressNList()
          .equals(other.getAddressNList())) return false;
      if (hasCoinName() != other.hasCoinName()) return false;
      if (hasCoinName()) {
        if (!getCoinName()
            .equals(other.getCoinName())) return false;
      }
      if (hasMultisig() != other.hasMultisig()) return false;
      if (hasMultisig()) {
        if (!getMultisig()
            .equals(other.getMultisig())) return false;
      }
      if (hasScriptType() != other.hasScriptType()) return false;
      if (hasScriptType()) {
        if (scriptType_ != other.scriptType_) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getAddressNCount() > 0) {
        hash = (37 * hash) + ADDRESS_N_FIELD_NUMBER;
        hash = (53 * hash) + getAddressNList().hashCode();
      }
      if (hasCoinName()) {
        hash = (37 * hash) + COIN_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getCoinName().hashCode();
      }
      if (hasMultisig()) {
        hash = (37 * hash) + MULTISIG_FIELD_NUMBER;
        hash = (53 * hash) + getMultisig().hashCode();
      }
      if (hasScriptType()) {
        hash = (37 * hash) + SCRIPT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + scriptType_;
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Request: Ask device for ownership identifier corresponding to scriptPubKey for address_n path
     * &#64;start
     * &#64;next OwnershipId
     * &#64;next Failure
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.GetOwnershipId}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.GetOwnershipId)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipIdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetOwnershipId_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetOwnershipId_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getMultisigFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        addressN_ = emptyIntList();
        coinName_ = "Bitcoin";
        multisig_ = null;
        if (multisigBuilder_ != null) {
          multisigBuilder_.dispose();
          multisigBuilder_ = null;
        }
        scriptType_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetOwnershipId_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          addressN_.makeImmutable();
          result.addressN_ = addressN_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.coinName_ = coinName_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.multisig_ = multisigBuilder_ == null
              ? multisig_
              : multisigBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.scriptType_ = scriptType_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId.getDefaultInstance()) return this;
        if (!other.addressN_.isEmpty()) {
          if (addressN_.isEmpty()) {
            addressN_ = other.addressN_;
            addressN_.makeImmutable();
            bitField0_ |= 0x00000001;
          } else {
            ensureAddressNIsMutable();
            addressN_.addAll(other.addressN_);
          }
          onChanged();
        }
        if (other.hasCoinName()) {
          coinName_ = other.coinName_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasMultisig()) {
          mergeMultisig(other.getMultisig());
        }
        if (other.hasScriptType()) {
          setScriptType(other.getScriptType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (hasMultisig()) {
          if (!getMultisig().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int v = input.readUInt32();
                ensureAddressNIsMutable();
                addressN_.addInt(v);
                break;
              } // case 8
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureAddressNIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  addressN_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 10
              case 18: {
                coinName_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getMultisigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 32: {
                int tmpRaw = input.readEnum();
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType tmpValue =
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(4, tmpRaw);
                } else {
                  scriptType_ = tmpRaw;
                  bitField0_ |= 0x00000008;
                }
                break;
              } // case 32
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.IntList addressN_ = emptyIntList();
      private void ensureAddressNIsMutable() {
        if (!addressN_.isModifiable()) {
          addressN_ = makeMutableCopy(addressN_);
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return A list containing the addressN.
       */
      public java.util.List<java.lang.Integer>
          getAddressNList() {
        addressN_.makeImmutable();
        return addressN_;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return The count of addressN.
       */
      public int getAddressNCount() {
        return addressN_.size();
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param index The index of the element to return.
       * @return The addressN at the given index.
       */
      public int getAddressN(int index) {
        return addressN_.getInt(index);
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param index The index to set the value at.
       * @param value The addressN to set.
       * @return This builder for chaining.
       */
      public Builder setAddressN(
          int index, int value) {

        ensureAddressNIsMutable();
        addressN_.setInt(index, value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param value The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAddressN(int value) {

        ensureAddressNIsMutable();
        addressN_.addInt(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param values The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAllAddressN(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAddressNIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, addressN_);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAddressN() {
        addressN_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.lang.Object coinName_ = "Bitcoin";
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @return Whether the coinName field is set.
       */
      public boolean hasCoinName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @return The coinName.
       */
      public java.lang.String getCoinName() {
        java.lang.Object ref = coinName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            coinName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @return The bytes for coinName.
       */
      public com.google.protobuf.ByteString
          getCoinNameBytes() {
        java.lang.Object ref = coinName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          coinName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @param value The coinName to set.
       * @return This builder for chaining.
       */
      public Builder setCoinName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        coinName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @return This builder for chaining.
       */
      public Builder clearCoinName() {
        coinName_ = getDefaultInstance().getCoinName();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @param value The bytes for coinName to set.
       * @return This builder for chaining.
       */
      public Builder setCoinNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        coinName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType multisig_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder> multisigBuilder_;
      /**
       * <pre>
       * filled if we are dealing with a multisig scriptPubKey
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 3;</code>
       * @return Whether the multisig field is set.
       */
      public boolean hasMultisig() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * filled if we are dealing with a multisig scriptPubKey
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 3;</code>
       * @return The multisig.
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig() {
        if (multisigBuilder_ == null) {
          return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
        } else {
          return multisigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * filled if we are dealing with a multisig scriptPubKey
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 3;</code>
       */
      public Builder setMultisig(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType value) {
        if (multisigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          multisig_ = value;
        } else {
          multisigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * filled if we are dealing with a multisig scriptPubKey
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 3;</code>
       */
      public Builder setMultisig(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder builderForValue) {
        if (multisigBuilder_ == null) {
          multisig_ = builderForValue.build();
        } else {
          multisigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * filled if we are dealing with a multisig scriptPubKey
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 3;</code>
       */
      public Builder mergeMultisig(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType value) {
        if (multisigBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            multisig_ != null &&
            multisig_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance()) {
            getMultisigBuilder().mergeFrom(value);
          } else {
            multisig_ = value;
          }
        } else {
          multisigBuilder_.mergeFrom(value);
        }
        if (multisig_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * filled if we are dealing with a multisig scriptPubKey
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 3;</code>
       */
      public Builder clearMultisig() {
        bitField0_ = (bitField0_ & ~0x00000004);
        multisig_ = null;
        if (multisigBuilder_ != null) {
          multisigBuilder_.dispose();
          multisigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * filled if we are dealing with a multisig scriptPubKey
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 3;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder getMultisigBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getMultisigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * filled if we are dealing with a multisig scriptPubKey
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 3;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder() {
        if (multisigBuilder_ != null) {
          return multisigBuilder_.getMessageOrBuilder();
        } else {
          return multisig_ == null ?
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
        }
      }
      /**
       * <pre>
       * filled if we are dealing with a multisig scriptPubKey
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder> 
          getMultisigFieldBuilder() {
        if (multisigBuilder_ == null) {
          multisigBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder>(
                  getMultisig(),
                  getParentForChildren(),
                  isClean());
          multisig_ = null;
        }
        return multisigBuilder_;
      }

      private int scriptType_ = 0;
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 4 [default = SPENDADDRESS];</code>
       * @return Whether the scriptType field is set.
       */
      @java.lang.Override public boolean hasScriptType() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 4 [default = SPENDADDRESS];</code>
       * @return The scriptType.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(scriptType_);
        return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.SPENDADDRESS : result;
      }
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 4 [default = SPENDADDRESS];</code>
       * @param value The scriptType to set.
       * @return This builder for chaining.
       */
      public Builder setScriptType(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        scriptType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 4 [default = SPENDADDRESS];</code>
       * @return This builder for chaining.
       */
      public Builder clearScriptType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        scriptType_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.GetOwnershipId)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.GetOwnershipId)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GetOwnershipId>
        PARSER = new com.google.protobuf.AbstractParser<GetOwnershipId>() {
      @java.lang.Override
      public GetOwnershipId parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<GetOwnershipId> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GetOwnershipId> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipId getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OwnershipIdOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.OwnershipId)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * ownership identifier
     * </pre>
     *
     * <code>required bytes ownership_id = 1;</code>
     * @return Whether the ownershipId field is set.
     */
    boolean hasOwnershipId();
    /**
     * <pre>
     * ownership identifier
     * </pre>
     *
     * <code>required bytes ownership_id = 1;</code>
     * @return The ownershipId.
     */
    com.google.protobuf.ByteString getOwnershipId();
  }
  /**
   * <pre>
   * *
   * Response: Contains the ownership identifier for the scriptPubKey and device private seed
   * &#64;end
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.OwnershipId}
   */
  public static final class OwnershipId extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.OwnershipId)
      OwnershipIdOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        OwnershipId.class.getName());
    }
    // Use OwnershipId.newBuilder() to construct.
    private OwnershipId(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private OwnershipId() {
      ownershipId_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_OwnershipId_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_OwnershipId_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId.Builder.class);
    }

    private int bitField0_;
    public static final int OWNERSHIP_ID_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString ownershipId_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * ownership identifier
     * </pre>
     *
     * <code>required bytes ownership_id = 1;</code>
     * @return Whether the ownershipId field is set.
     */
    @java.lang.Override
    public boolean hasOwnershipId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * ownership identifier
     * </pre>
     *
     * <code>required bytes ownership_id = 1;</code>
     * @return The ownershipId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getOwnershipId() {
      return ownershipId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasOwnershipId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBytes(1, ownershipId_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, ownershipId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId) obj;

      if (hasOwnershipId() != other.hasOwnershipId()) return false;
      if (hasOwnershipId()) {
        if (!getOwnershipId()
            .equals(other.getOwnershipId())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasOwnershipId()) {
        hash = (37 * hash) + OWNERSHIP_ID_FIELD_NUMBER;
        hash = (53 * hash) + getOwnershipId().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Response: Contains the ownership identifier for the scriptPubKey and device private seed
     * &#64;end
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.OwnershipId}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.OwnershipId)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipIdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_OwnershipId_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_OwnershipId_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        ownershipId_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_OwnershipId_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.ownershipId_ = ownershipId_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId.getDefaultInstance()) return this;
        if (other.hasOwnershipId()) {
          setOwnershipId(other.getOwnershipId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasOwnershipId()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                ownershipId_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString ownershipId_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * ownership identifier
       * </pre>
       *
       * <code>required bytes ownership_id = 1;</code>
       * @return Whether the ownershipId field is set.
       */
      @java.lang.Override
      public boolean hasOwnershipId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * ownership identifier
       * </pre>
       *
       * <code>required bytes ownership_id = 1;</code>
       * @return The ownershipId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getOwnershipId() {
        return ownershipId_;
      }
      /**
       * <pre>
       * ownership identifier
       * </pre>
       *
       * <code>required bytes ownership_id = 1;</code>
       * @param value The ownershipId to set.
       * @return This builder for chaining.
       */
      public Builder setOwnershipId(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ownershipId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ownership identifier
       * </pre>
       *
       * <code>required bytes ownership_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearOwnershipId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        ownershipId_ = getDefaultInstance().getOwnershipId();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.OwnershipId)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.OwnershipId)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OwnershipId>
        PARSER = new com.google.protobuf.AbstractParser<OwnershipId>() {
      @java.lang.Override
      public OwnershipId parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<OwnershipId> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OwnershipId> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipId getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SignMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.SignMessage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return A list containing the addressN.
     */
    java.util.List<java.lang.Integer> getAddressNList();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return The count of addressN.
     */
    int getAddressNCount();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    int getAddressN(int index);

    /**
     * <pre>
     * message to be signed
     * </pre>
     *
     * <code>required bytes message = 2;</code>
     * @return Whether the message field is set.
     */
    boolean hasMessage();
    /**
     * <pre>
     * message to be signed
     * </pre>
     *
     * <code>required bytes message = 2;</code>
     * @return The message.
     */
    com.google.protobuf.ByteString getMessage();

    /**
     * <pre>
     * coin to use for signing
     * </pre>
     *
     * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
     * @return Whether the coinName field is set.
     */
    boolean hasCoinName();
    /**
     * <pre>
     * coin to use for signing
     * </pre>
     *
     * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
     * @return The coinName.
     */
    java.lang.String getCoinName();
    /**
     * <pre>
     * coin to use for signing
     * </pre>
     *
     * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
     * @return The bytes for coinName.
     */
    com.google.protobuf.ByteString
        getCoinNameBytes();

    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 4 [default = SPENDADDRESS];</code>
     * @return Whether the scriptType field is set.
     */
    boolean hasScriptType();
    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 4 [default = SPENDADDRESS];</code>
     * @return The scriptType.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType();

    /**
     * <pre>
     * don't include script type information in the recovery byte of the signature, same as in Bitcoin Core
     * </pre>
     *
     * <code>optional bool no_script_type = 5;</code>
     * @return Whether the noScriptType field is set.
     */
    boolean hasNoScriptType();
    /**
     * <pre>
     * don't include script type information in the recovery byte of the signature, same as in Bitcoin Core
     * </pre>
     *
     * <code>optional bool no_script_type = 5;</code>
     * @return The noScriptType.
     */
    boolean getNoScriptType();

    /**
     * <pre>
     * display the address in chunks of 4 characters
     * </pre>
     *
     * <code>optional bool chunkify = 6;</code>
     * @return Whether the chunkify field is set.
     */
    boolean hasChunkify();
    /**
     * <pre>
     * display the address in chunks of 4 characters
     * </pre>
     *
     * <code>optional bool chunkify = 6;</code>
     * @return The chunkify.
     */
    boolean getChunkify();
  }
  /**
   * <pre>
   * *
   * Request: Ask device to sign message
   * &#64;start
   * &#64;next MessageSignature
   * &#64;next Failure
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.SignMessage}
   */
  public static final class SignMessage extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.SignMessage)
      SignMessageOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        SignMessage.class.getName());
    }
    // Use SignMessage.newBuilder() to construct.
    private SignMessage(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private SignMessage() {
      addressN_ = emptyIntList();
      message_ = com.google.protobuf.ByteString.EMPTY;
      coinName_ = "Bitcoin";
      scriptType_ = 0;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_SignMessage_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_SignMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage.Builder.class);
    }

    private int bitField0_;
    public static final int ADDRESS_N_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList addressN_ =
        emptyIntList();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return A list containing the addressN.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getAddressNList() {
      return addressN_;
    }
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return The count of addressN.
     */
    public int getAddressNCount() {
      return addressN_.size();
    }
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    public int getAddressN(int index) {
      return addressN_.getInt(index);
    }

    public static final int MESSAGE_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString message_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * message to be signed
     * </pre>
     *
     * <code>required bytes message = 2;</code>
     * @return Whether the message field is set.
     */
    @java.lang.Override
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * message to be signed
     * </pre>
     *
     * <code>required bytes message = 2;</code>
     * @return The message.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getMessage() {
      return message_;
    }

    public static final int COIN_NAME_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object coinName_ = "Bitcoin";
    /**
     * <pre>
     * coin to use for signing
     * </pre>
     *
     * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
     * @return Whether the coinName field is set.
     */
    @java.lang.Override
    public boolean hasCoinName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * coin to use for signing
     * </pre>
     *
     * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
     * @return The coinName.
     */
    @java.lang.Override
    public java.lang.String getCoinName() {
      java.lang.Object ref = coinName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          coinName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * coin to use for signing
     * </pre>
     *
     * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
     * @return The bytes for coinName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCoinNameBytes() {
      java.lang.Object ref = coinName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        coinName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCRIPT_TYPE_FIELD_NUMBER = 4;
    private int scriptType_ = 0;
    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 4 [default = SPENDADDRESS];</code>
     * @return Whether the scriptType field is set.
     */
    @java.lang.Override public boolean hasScriptType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 4 [default = SPENDADDRESS];</code>
     * @return The scriptType.
     */
    @java.lang.Override public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType() {
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(scriptType_);
      return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.SPENDADDRESS : result;
    }

    public static final int NO_SCRIPT_TYPE_FIELD_NUMBER = 5;
    private boolean noScriptType_ = false;
    /**
     * <pre>
     * don't include script type information in the recovery byte of the signature, same as in Bitcoin Core
     * </pre>
     *
     * <code>optional bool no_script_type = 5;</code>
     * @return Whether the noScriptType field is set.
     */
    @java.lang.Override
    public boolean hasNoScriptType() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * don't include script type information in the recovery byte of the signature, same as in Bitcoin Core
     * </pre>
     *
     * <code>optional bool no_script_type = 5;</code>
     * @return The noScriptType.
     */
    @java.lang.Override
    public boolean getNoScriptType() {
      return noScriptType_;
    }

    public static final int CHUNKIFY_FIELD_NUMBER = 6;
    private boolean chunkify_ = false;
    /**
     * <pre>
     * display the address in chunks of 4 characters
     * </pre>
     *
     * <code>optional bool chunkify = 6;</code>
     * @return Whether the chunkify field is set.
     */
    @java.lang.Override
    public boolean hasChunkify() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * display the address in chunks of 4 characters
     * </pre>
     *
     * <code>optional bool chunkify = 6;</code>
     * @return The chunkify.
     */
    @java.lang.Override
    public boolean getChunkify() {
      return chunkify_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < addressN_.size(); i++) {
        output.writeUInt32(1, addressN_.getInt(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBytes(2, message_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, coinName_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeEnum(4, scriptType_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeBool(5, noScriptType_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBool(6, chunkify_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < addressN_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(addressN_.getInt(i));
        }
        size += dataSize;
        size += 1 * getAddressNList().size();
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, message_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(3, coinName_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, scriptType_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, noScriptType_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, chunkify_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage) obj;

      if (!getAddressNList()
          .equals(other.getAddressNList())) return false;
      if (hasMessage() != other.hasMessage()) return false;
      if (hasMessage()) {
        if (!getMessage()
            .equals(other.getMessage())) return false;
      }
      if (hasCoinName() != other.hasCoinName()) return false;
      if (hasCoinName()) {
        if (!getCoinName()
            .equals(other.getCoinName())) return false;
      }
      if (hasScriptType() != other.hasScriptType()) return false;
      if (hasScriptType()) {
        if (scriptType_ != other.scriptType_) return false;
      }
      if (hasNoScriptType() != other.hasNoScriptType()) return false;
      if (hasNoScriptType()) {
        if (getNoScriptType()
            != other.getNoScriptType()) return false;
      }
      if (hasChunkify() != other.hasChunkify()) return false;
      if (hasChunkify()) {
        if (getChunkify()
            != other.getChunkify()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getAddressNCount() > 0) {
        hash = (37 * hash) + ADDRESS_N_FIELD_NUMBER;
        hash = (53 * hash) + getAddressNList().hashCode();
      }
      if (hasMessage()) {
        hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMessage().hashCode();
      }
      if (hasCoinName()) {
        hash = (37 * hash) + COIN_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getCoinName().hashCode();
      }
      if (hasScriptType()) {
        hash = (37 * hash) + SCRIPT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + scriptType_;
      }
      if (hasNoScriptType()) {
        hash = (37 * hash) + NO_SCRIPT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getNoScriptType());
      }
      if (hasChunkify()) {
        hash = (37 * hash) + CHUNKIFY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getChunkify());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Request: Ask device to sign message
     * &#64;start
     * &#64;next MessageSignature
     * &#64;next Failure
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.SignMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.SignMessage)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_SignMessage_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_SignMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        addressN_ = emptyIntList();
        message_ = com.google.protobuf.ByteString.EMPTY;
        coinName_ = "Bitcoin";
        scriptType_ = 0;
        noScriptType_ = false;
        chunkify_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_SignMessage_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          addressN_.makeImmutable();
          result.addressN_ = addressN_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.message_ = message_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.coinName_ = coinName_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.scriptType_ = scriptType_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.noScriptType_ = noScriptType_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.chunkify_ = chunkify_;
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage.getDefaultInstance()) return this;
        if (!other.addressN_.isEmpty()) {
          if (addressN_.isEmpty()) {
            addressN_ = other.addressN_;
            addressN_.makeImmutable();
            bitField0_ |= 0x00000001;
          } else {
            ensureAddressNIsMutable();
            addressN_.addAll(other.addressN_);
          }
          onChanged();
        }
        if (other.hasMessage()) {
          setMessage(other.getMessage());
        }
        if (other.hasCoinName()) {
          coinName_ = other.coinName_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.hasScriptType()) {
          setScriptType(other.getScriptType());
        }
        if (other.hasNoScriptType()) {
          setNoScriptType(other.getNoScriptType());
        }
        if (other.hasChunkify()) {
          setChunkify(other.getChunkify());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasMessage()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int v = input.readUInt32();
                ensureAddressNIsMutable();
                addressN_.addInt(v);
                break;
              } // case 8
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureAddressNIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  addressN_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 10
              case 18: {
                message_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                coinName_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 32: {
                int tmpRaw = input.readEnum();
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType tmpValue =
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(4, tmpRaw);
                } else {
                  scriptType_ = tmpRaw;
                  bitField0_ |= 0x00000008;
                }
                break;
              } // case 32
              case 40: {
                noScriptType_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 48: {
                chunkify_ = input.readBool();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.IntList addressN_ = emptyIntList();
      private void ensureAddressNIsMutable() {
        if (!addressN_.isModifiable()) {
          addressN_ = makeMutableCopy(addressN_);
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return A list containing the addressN.
       */
      public java.util.List<java.lang.Integer>
          getAddressNList() {
        addressN_.makeImmutable();
        return addressN_;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return The count of addressN.
       */
      public int getAddressNCount() {
        return addressN_.size();
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param index The index of the element to return.
       * @return The addressN at the given index.
       */
      public int getAddressN(int index) {
        return addressN_.getInt(index);
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param index The index to set the value at.
       * @param value The addressN to set.
       * @return This builder for chaining.
       */
      public Builder setAddressN(
          int index, int value) {

        ensureAddressNIsMutable();
        addressN_.setInt(index, value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param value The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAddressN(int value) {

        ensureAddressNIsMutable();
        addressN_.addInt(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param values The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAllAddressN(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAddressNIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, addressN_);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAddressN() {
        addressN_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString message_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * message to be signed
       * </pre>
       *
       * <code>required bytes message = 2;</code>
       * @return Whether the message field is set.
       */
      @java.lang.Override
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * message to be signed
       * </pre>
       *
       * <code>required bytes message = 2;</code>
       * @return The message.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getMessage() {
        return message_;
      }
      /**
       * <pre>
       * message to be signed
       * </pre>
       *
       * <code>required bytes message = 2;</code>
       * @param value The message to set.
       * @return This builder for chaining.
       */
      public Builder setMessage(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        message_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * message to be signed
       * </pre>
       *
       * <code>required bytes message = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000002);
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }

      private java.lang.Object coinName_ = "Bitcoin";
      /**
       * <pre>
       * coin to use for signing
       * </pre>
       *
       * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
       * @return Whether the coinName field is set.
       */
      public boolean hasCoinName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * coin to use for signing
       * </pre>
       *
       * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
       * @return The coinName.
       */
      public java.lang.String getCoinName() {
        java.lang.Object ref = coinName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            coinName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * coin to use for signing
       * </pre>
       *
       * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
       * @return The bytes for coinName.
       */
      public com.google.protobuf.ByteString
          getCoinNameBytes() {
        java.lang.Object ref = coinName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          coinName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * coin to use for signing
       * </pre>
       *
       * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
       * @param value The coinName to set.
       * @return This builder for chaining.
       */
      public Builder setCoinName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        coinName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coin to use for signing
       * </pre>
       *
       * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
       * @return This builder for chaining.
       */
      public Builder clearCoinName() {
        coinName_ = getDefaultInstance().getCoinName();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coin to use for signing
       * </pre>
       *
       * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
       * @param value The bytes for coinName to set.
       * @return This builder for chaining.
       */
      public Builder setCoinNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        coinName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private int scriptType_ = 0;
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 4 [default = SPENDADDRESS];</code>
       * @return Whether the scriptType field is set.
       */
      @java.lang.Override public boolean hasScriptType() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 4 [default = SPENDADDRESS];</code>
       * @return The scriptType.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(scriptType_);
        return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.SPENDADDRESS : result;
      }
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 4 [default = SPENDADDRESS];</code>
       * @param value The scriptType to set.
       * @return This builder for chaining.
       */
      public Builder setScriptType(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        scriptType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 4 [default = SPENDADDRESS];</code>
       * @return This builder for chaining.
       */
      public Builder clearScriptType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        scriptType_ = 0;
        onChanged();
        return this;
      }

      private boolean noScriptType_ ;
      /**
       * <pre>
       * don't include script type information in the recovery byte of the signature, same as in Bitcoin Core
       * </pre>
       *
       * <code>optional bool no_script_type = 5;</code>
       * @return Whether the noScriptType field is set.
       */
      @java.lang.Override
      public boolean hasNoScriptType() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * don't include script type information in the recovery byte of the signature, same as in Bitcoin Core
       * </pre>
       *
       * <code>optional bool no_script_type = 5;</code>
       * @return The noScriptType.
       */
      @java.lang.Override
      public boolean getNoScriptType() {
        return noScriptType_;
      }
      /**
       * <pre>
       * don't include script type information in the recovery byte of the signature, same as in Bitcoin Core
       * </pre>
       *
       * <code>optional bool no_script_type = 5;</code>
       * @param value The noScriptType to set.
       * @return This builder for chaining.
       */
      public Builder setNoScriptType(boolean value) {

        noScriptType_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * don't include script type information in the recovery byte of the signature, same as in Bitcoin Core
       * </pre>
       *
       * <code>optional bool no_script_type = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearNoScriptType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        noScriptType_ = false;
        onChanged();
        return this;
      }

      private boolean chunkify_ ;
      /**
       * <pre>
       * display the address in chunks of 4 characters
       * </pre>
       *
       * <code>optional bool chunkify = 6;</code>
       * @return Whether the chunkify field is set.
       */
      @java.lang.Override
      public boolean hasChunkify() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * display the address in chunks of 4 characters
       * </pre>
       *
       * <code>optional bool chunkify = 6;</code>
       * @return The chunkify.
       */
      @java.lang.Override
      public boolean getChunkify() {
        return chunkify_;
      }
      /**
       * <pre>
       * display the address in chunks of 4 characters
       * </pre>
       *
       * <code>optional bool chunkify = 6;</code>
       * @param value The chunkify to set.
       * @return This builder for chaining.
       */
      public Builder setChunkify(boolean value) {

        chunkify_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * display the address in chunks of 4 characters
       * </pre>
       *
       * <code>optional bool chunkify = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearChunkify() {
        bitField0_ = (bitField0_ & ~0x00000020);
        chunkify_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.SignMessage)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.SignMessage)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SignMessage>
        PARSER = new com.google.protobuf.AbstractParser<SignMessage>() {
      @java.lang.Override
      public SignMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SignMessage> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SignMessage> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignMessage getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MessageSignatureOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.MessageSignature)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * address used to sign the message
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return Whether the address field is set.
     */
    boolean hasAddress();
    /**
     * <pre>
     * address used to sign the message
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return The address.
     */
    java.lang.String getAddress();
    /**
     * <pre>
     * address used to sign the message
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return The bytes for address.
     */
    com.google.protobuf.ByteString
        getAddressBytes();

    /**
     * <pre>
     * signature of the message
     * </pre>
     *
     * <code>required bytes signature = 2;</code>
     * @return Whether the signature field is set.
     */
    boolean hasSignature();
    /**
     * <pre>
     * signature of the message
     * </pre>
     *
     * <code>required bytes signature = 2;</code>
     * @return The signature.
     */
    com.google.protobuf.ByteString getSignature();
  }
  /**
   * <pre>
   * *
   * Response: Signed message
   * &#64;end
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.MessageSignature}
   */
  public static final class MessageSignature extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.MessageSignature)
      MessageSignatureOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        MessageSignature.class.getName());
    }
    // Use MessageSignature.newBuilder() to construct.
    private MessageSignature(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private MessageSignature() {
      address_ = "";
      signature_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_MessageSignature_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_MessageSignature_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature.Builder.class);
    }

    private int bitField0_;
    public static final int ADDRESS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object address_ = "";
    /**
     * <pre>
     * address used to sign the message
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return Whether the address field is set.
     */
    @java.lang.Override
    public boolean hasAddress() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * address used to sign the message
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return The address.
     */
    @java.lang.Override
    public java.lang.String getAddress() {
      java.lang.Object ref = address_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          address_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * address used to sign the message
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return The bytes for address.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getAddressBytes() {
      java.lang.Object ref = address_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        address_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SIGNATURE_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * signature of the message
     * </pre>
     *
     * <code>required bytes signature = 2;</code>
     * @return Whether the signature field is set.
     */
    @java.lang.Override
    public boolean hasSignature() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * signature of the message
     * </pre>
     *
     * <code>required bytes signature = 2;</code>
     * @return The signature.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSignature() {
      return signature_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasAddress()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSignature()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, address_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBytes(2, signature_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, address_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, signature_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature) obj;

      if (hasAddress() != other.hasAddress()) return false;
      if (hasAddress()) {
        if (!getAddress()
            .equals(other.getAddress())) return false;
      }
      if (hasSignature() != other.hasSignature()) return false;
      if (hasSignature()) {
        if (!getSignature()
            .equals(other.getSignature())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasAddress()) {
        hash = (37 * hash) + ADDRESS_FIELD_NUMBER;
        hash = (53 * hash) + getAddress().hashCode();
      }
      if (hasSignature()) {
        hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
        hash = (53 * hash) + getSignature().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Response: Signed message
     * &#64;end
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.MessageSignature}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.MessageSignature)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignatureOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_MessageSignature_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_MessageSignature_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        address_ = "";
        signature_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_MessageSignature_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.address_ = address_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.signature_ = signature_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature.getDefaultInstance()) return this;
        if (other.hasAddress()) {
          address_ = other.address_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasSignature()) {
          setSignature(other.getSignature());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasAddress()) {
          return false;
        }
        if (!hasSignature()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                address_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                signature_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object address_ = "";
      /**
       * <pre>
       * address used to sign the message
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return Whether the address field is set.
       */
      public boolean hasAddress() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * address used to sign the message
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return The address.
       */
      public java.lang.String getAddress() {
        java.lang.Object ref = address_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            address_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * address used to sign the message
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return The bytes for address.
       */
      public com.google.protobuf.ByteString
          getAddressBytes() {
        java.lang.Object ref = address_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          address_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * address used to sign the message
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @param value The address to set.
       * @return This builder for chaining.
       */
      public Builder setAddress(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        address_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * address used to sign the message
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAddress() {
        address_ = getDefaultInstance().getAddress();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * address used to sign the message
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @param value The bytes for address to set.
       * @return This builder for chaining.
       */
      public Builder setAddressBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        address_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * signature of the message
       * </pre>
       *
       * <code>required bytes signature = 2;</code>
       * @return Whether the signature field is set.
       */
      @java.lang.Override
      public boolean hasSignature() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * signature of the message
       * </pre>
       *
       * <code>required bytes signature = 2;</code>
       * @return The signature.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSignature() {
        return signature_;
      }
      /**
       * <pre>
       * signature of the message
       * </pre>
       *
       * <code>required bytes signature = 2;</code>
       * @param value The signature to set.
       * @return This builder for chaining.
       */
      public Builder setSignature(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        signature_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * signature of the message
       * </pre>
       *
       * <code>required bytes signature = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSignature() {
        bitField0_ = (bitField0_ & ~0x00000002);
        signature_ = getDefaultInstance().getSignature();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.MessageSignature)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.MessageSignature)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MessageSignature>
        PARSER = new com.google.protobuf.AbstractParser<MessageSignature>() {
      @java.lang.Override
      public MessageSignature parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<MessageSignature> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MessageSignature> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MessageSignature getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface VerifyMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.VerifyMessage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * address to verify
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return Whether the address field is set.
     */
    boolean hasAddress();
    /**
     * <pre>
     * address to verify
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return The address.
     */
    java.lang.String getAddress();
    /**
     * <pre>
     * address to verify
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return The bytes for address.
     */
    com.google.protobuf.ByteString
        getAddressBytes();

    /**
     * <pre>
     * signature to verify
     * </pre>
     *
     * <code>required bytes signature = 2;</code>
     * @return Whether the signature field is set.
     */
    boolean hasSignature();
    /**
     * <pre>
     * signature to verify
     * </pre>
     *
     * <code>required bytes signature = 2;</code>
     * @return The signature.
     */
    com.google.protobuf.ByteString getSignature();

    /**
     * <pre>
     * message to verify
     * </pre>
     *
     * <code>required bytes message = 3;</code>
     * @return Whether the message field is set.
     */
    boolean hasMessage();
    /**
     * <pre>
     * message to verify
     * </pre>
     *
     * <code>required bytes message = 3;</code>
     * @return The message.
     */
    com.google.protobuf.ByteString getMessage();

    /**
     * <pre>
     * coin to use for verifying
     * </pre>
     *
     * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
     * @return Whether the coinName field is set.
     */
    boolean hasCoinName();
    /**
     * <pre>
     * coin to use for verifying
     * </pre>
     *
     * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
     * @return The coinName.
     */
    java.lang.String getCoinName();
    /**
     * <pre>
     * coin to use for verifying
     * </pre>
     *
     * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
     * @return The bytes for coinName.
     */
    com.google.protobuf.ByteString
        getCoinNameBytes();

    /**
     * <pre>
     * display the address in chunks of 4 characters
     * </pre>
     *
     * <code>optional bool chunkify = 5;</code>
     * @return Whether the chunkify field is set.
     */
    boolean hasChunkify();
    /**
     * <pre>
     * display the address in chunks of 4 characters
     * </pre>
     *
     * <code>optional bool chunkify = 5;</code>
     * @return The chunkify.
     */
    boolean getChunkify();
  }
  /**
   * <pre>
   * *
   * Request: Ask device to verify message
   * &#64;start
   * &#64;next Success
   * &#64;next Failure
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.VerifyMessage}
   */
  public static final class VerifyMessage extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.VerifyMessage)
      VerifyMessageOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        VerifyMessage.class.getName());
    }
    // Use VerifyMessage.newBuilder() to construct.
    private VerifyMessage(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private VerifyMessage() {
      address_ = "";
      signature_ = com.google.protobuf.ByteString.EMPTY;
      message_ = com.google.protobuf.ByteString.EMPTY;
      coinName_ = "Bitcoin";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_VerifyMessage_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_VerifyMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage.Builder.class);
    }

    private int bitField0_;
    public static final int ADDRESS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object address_ = "";
    /**
     * <pre>
     * address to verify
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return Whether the address field is set.
     */
    @java.lang.Override
    public boolean hasAddress() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * address to verify
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return The address.
     */
    @java.lang.Override
    public java.lang.String getAddress() {
      java.lang.Object ref = address_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          address_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * address to verify
     * </pre>
     *
     * <code>required string address = 1;</code>
     * @return The bytes for address.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getAddressBytes() {
      java.lang.Object ref = address_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        address_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SIGNATURE_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * signature to verify
     * </pre>
     *
     * <code>required bytes signature = 2;</code>
     * @return Whether the signature field is set.
     */
    @java.lang.Override
    public boolean hasSignature() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * signature to verify
     * </pre>
     *
     * <code>required bytes signature = 2;</code>
     * @return The signature.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSignature() {
      return signature_;
    }

    public static final int MESSAGE_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString message_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * message to verify
     * </pre>
     *
     * <code>required bytes message = 3;</code>
     * @return Whether the message field is set.
     */
    @java.lang.Override
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * message to verify
     * </pre>
     *
     * <code>required bytes message = 3;</code>
     * @return The message.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getMessage() {
      return message_;
    }

    public static final int COIN_NAME_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object coinName_ = "Bitcoin";
    /**
     * <pre>
     * coin to use for verifying
     * </pre>
     *
     * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
     * @return Whether the coinName field is set.
     */
    @java.lang.Override
    public boolean hasCoinName() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * coin to use for verifying
     * </pre>
     *
     * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
     * @return The coinName.
     */
    @java.lang.Override
    public java.lang.String getCoinName() {
      java.lang.Object ref = coinName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          coinName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * coin to use for verifying
     * </pre>
     *
     * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
     * @return The bytes for coinName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCoinNameBytes() {
      java.lang.Object ref = coinName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        coinName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CHUNKIFY_FIELD_NUMBER = 5;
    private boolean chunkify_ = false;
    /**
     * <pre>
     * display the address in chunks of 4 characters
     * </pre>
     *
     * <code>optional bool chunkify = 5;</code>
     * @return Whether the chunkify field is set.
     */
    @java.lang.Override
    public boolean hasChunkify() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * display the address in chunks of 4 characters
     * </pre>
     *
     * <code>optional bool chunkify = 5;</code>
     * @return The chunkify.
     */
    @java.lang.Override
    public boolean getChunkify() {
      return chunkify_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasAddress()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSignature()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, address_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBytes(2, signature_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBytes(3, message_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 4, coinName_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBool(5, chunkify_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, address_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, signature_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, message_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(4, coinName_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, chunkify_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage) obj;

      if (hasAddress() != other.hasAddress()) return false;
      if (hasAddress()) {
        if (!getAddress()
            .equals(other.getAddress())) return false;
      }
      if (hasSignature() != other.hasSignature()) return false;
      if (hasSignature()) {
        if (!getSignature()
            .equals(other.getSignature())) return false;
      }
      if (hasMessage() != other.hasMessage()) return false;
      if (hasMessage()) {
        if (!getMessage()
            .equals(other.getMessage())) return false;
      }
      if (hasCoinName() != other.hasCoinName()) return false;
      if (hasCoinName()) {
        if (!getCoinName()
            .equals(other.getCoinName())) return false;
      }
      if (hasChunkify() != other.hasChunkify()) return false;
      if (hasChunkify()) {
        if (getChunkify()
            != other.getChunkify()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasAddress()) {
        hash = (37 * hash) + ADDRESS_FIELD_NUMBER;
        hash = (53 * hash) + getAddress().hashCode();
      }
      if (hasSignature()) {
        hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
        hash = (53 * hash) + getSignature().hashCode();
      }
      if (hasMessage()) {
        hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMessage().hashCode();
      }
      if (hasCoinName()) {
        hash = (37 * hash) + COIN_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getCoinName().hashCode();
      }
      if (hasChunkify()) {
        hash = (37 * hash) + CHUNKIFY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getChunkify());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Request: Ask device to verify message
     * &#64;start
     * &#64;next Success
     * &#64;next Failure
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.VerifyMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.VerifyMessage)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_VerifyMessage_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_VerifyMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        address_ = "";
        signature_ = com.google.protobuf.ByteString.EMPTY;
        message_ = com.google.protobuf.ByteString.EMPTY;
        coinName_ = "Bitcoin";
        chunkify_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_VerifyMessage_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.address_ = address_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.signature_ = signature_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.message_ = message_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.coinName_ = coinName_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.chunkify_ = chunkify_;
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage.getDefaultInstance()) return this;
        if (other.hasAddress()) {
          address_ = other.address_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasSignature()) {
          setSignature(other.getSignature());
        }
        if (other.hasMessage()) {
          setMessage(other.getMessage());
        }
        if (other.hasCoinName()) {
          coinName_ = other.coinName_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        if (other.hasChunkify()) {
          setChunkify(other.getChunkify());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasAddress()) {
          return false;
        }
        if (!hasSignature()) {
          return false;
        }
        if (!hasMessage()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                address_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                signature_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                message_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                coinName_ = input.readBytes();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 40: {
                chunkify_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object address_ = "";
      /**
       * <pre>
       * address to verify
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return Whether the address field is set.
       */
      public boolean hasAddress() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * address to verify
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return The address.
       */
      public java.lang.String getAddress() {
        java.lang.Object ref = address_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            address_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * address to verify
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return The bytes for address.
       */
      public com.google.protobuf.ByteString
          getAddressBytes() {
        java.lang.Object ref = address_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          address_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * address to verify
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @param value The address to set.
       * @return This builder for chaining.
       */
      public Builder setAddress(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        address_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * address to verify
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAddress() {
        address_ = getDefaultInstance().getAddress();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * address to verify
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @param value The bytes for address to set.
       * @return This builder for chaining.
       */
      public Builder setAddressBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        address_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * signature to verify
       * </pre>
       *
       * <code>required bytes signature = 2;</code>
       * @return Whether the signature field is set.
       */
      @java.lang.Override
      public boolean hasSignature() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * signature to verify
       * </pre>
       *
       * <code>required bytes signature = 2;</code>
       * @return The signature.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSignature() {
        return signature_;
      }
      /**
       * <pre>
       * signature to verify
       * </pre>
       *
       * <code>required bytes signature = 2;</code>
       * @param value The signature to set.
       * @return This builder for chaining.
       */
      public Builder setSignature(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        signature_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * signature to verify
       * </pre>
       *
       * <code>required bytes signature = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSignature() {
        bitField0_ = (bitField0_ & ~0x00000002);
        signature_ = getDefaultInstance().getSignature();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString message_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * message to verify
       * </pre>
       *
       * <code>required bytes message = 3;</code>
       * @return Whether the message field is set.
       */
      @java.lang.Override
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * message to verify
       * </pre>
       *
       * <code>required bytes message = 3;</code>
       * @return The message.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getMessage() {
        return message_;
      }
      /**
       * <pre>
       * message to verify
       * </pre>
       *
       * <code>required bytes message = 3;</code>
       * @param value The message to set.
       * @return This builder for chaining.
       */
      public Builder setMessage(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        message_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * message to verify
       * </pre>
       *
       * <code>required bytes message = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000004);
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }

      private java.lang.Object coinName_ = "Bitcoin";
      /**
       * <pre>
       * coin to use for verifying
       * </pre>
       *
       * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
       * @return Whether the coinName field is set.
       */
      public boolean hasCoinName() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * coin to use for verifying
       * </pre>
       *
       * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
       * @return The coinName.
       */
      public java.lang.String getCoinName() {
        java.lang.Object ref = coinName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            coinName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * coin to use for verifying
       * </pre>
       *
       * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
       * @return The bytes for coinName.
       */
      public com.google.protobuf.ByteString
          getCoinNameBytes() {
        java.lang.Object ref = coinName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          coinName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * coin to use for verifying
       * </pre>
       *
       * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
       * @param value The coinName to set.
       * @return This builder for chaining.
       */
      public Builder setCoinName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        coinName_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coin to use for verifying
       * </pre>
       *
       * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
       * @return This builder for chaining.
       */
      public Builder clearCoinName() {
        coinName_ = getDefaultInstance().getCoinName();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coin to use for verifying
       * </pre>
       *
       * <code>optional string coin_name = 4 [default = "Bitcoin"];</code>
       * @param value The bytes for coinName to set.
       * @return This builder for chaining.
       */
      public Builder setCoinNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        coinName_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      private boolean chunkify_ ;
      /**
       * <pre>
       * display the address in chunks of 4 characters
       * </pre>
       *
       * <code>optional bool chunkify = 5;</code>
       * @return Whether the chunkify field is set.
       */
      @java.lang.Override
      public boolean hasChunkify() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * display the address in chunks of 4 characters
       * </pre>
       *
       * <code>optional bool chunkify = 5;</code>
       * @return The chunkify.
       */
      @java.lang.Override
      public boolean getChunkify() {
        return chunkify_;
      }
      /**
       * <pre>
       * display the address in chunks of 4 characters
       * </pre>
       *
       * <code>optional bool chunkify = 5;</code>
       * @param value The chunkify to set.
       * @return This builder for chaining.
       */
      public Builder setChunkify(boolean value) {

        chunkify_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * display the address in chunks of 4 characters
       * </pre>
       *
       * <code>optional bool chunkify = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearChunkify() {
        bitField0_ = (bitField0_ & ~0x00000010);
        chunkify_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.VerifyMessage)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.VerifyMessage)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<VerifyMessage>
        PARSER = new com.google.protobuf.AbstractParser<VerifyMessage>() {
      @java.lang.Override
      public VerifyMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<VerifyMessage> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<VerifyMessage> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.VerifyMessage getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SignTxOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.SignTx)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * number of transaction outputs
     * </pre>
     *
     * <code>required uint32 outputs_count = 1;</code>
     * @return Whether the outputsCount field is set.
     */
    boolean hasOutputsCount();
    /**
     * <pre>
     * number of transaction outputs
     * </pre>
     *
     * <code>required uint32 outputs_count = 1;</code>
     * @return The outputsCount.
     */
    int getOutputsCount();

    /**
     * <pre>
     * number of transaction inputs
     * </pre>
     *
     * <code>required uint32 inputs_count = 2;</code>
     * @return Whether the inputsCount field is set.
     */
    boolean hasInputsCount();
    /**
     * <pre>
     * number of transaction inputs
     * </pre>
     *
     * <code>required uint32 inputs_count = 2;</code>
     * @return The inputsCount.
     */
    int getInputsCount();

    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
     * @return Whether the coinName field is set.
     */
    boolean hasCoinName();
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
     * @return The coinName.
     */
    java.lang.String getCoinName();
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
     * @return The bytes for coinName.
     */
    com.google.protobuf.ByteString
        getCoinNameBytes();

    /**
     * <pre>
     * transaction version
     * </pre>
     *
     * <code>optional uint32 version = 4 [default = 1];</code>
     * @return Whether the version field is set.
     */
    boolean hasVersion();
    /**
     * <pre>
     * transaction version
     * </pre>
     *
     * <code>optional uint32 version = 4 [default = 1];</code>
     * @return The version.
     */
    int getVersion();

    /**
     * <pre>
     * transaction lock_time
     * </pre>
     *
     * <code>optional uint32 lock_time = 5 [default = 0];</code>
     * @return Whether the lockTime field is set.
     */
    boolean hasLockTime();
    /**
     * <pre>
     * transaction lock_time
     * </pre>
     *
     * <code>optional uint32 lock_time = 5 [default = 0];</code>
     * @return The lockTime.
     */
    int getLockTime();

    /**
     * <pre>
     * only for Decred and Zcash
     * </pre>
     *
     * <code>optional uint32 expiry = 6;</code>
     * @return Whether the expiry field is set.
     */
    boolean hasExpiry();
    /**
     * <pre>
     * only for Decred and Zcash
     * </pre>
     *
     * <code>optional uint32 expiry = 6;</code>
     * @return The expiry.
     */
    int getExpiry();

    /**
     * <pre>
     * deprecated in 2.3.2, the field is not needed as it can be derived from `version`
     * </pre>
     *
     * <code>optional bool overwintered = 7 [deprecated = true];</code>
     * @deprecated hw.trezor.messages.bitcoin.SignTx.overwintered is deprecated.
     *     See messages-bitcoin.proto;l=197
     * @return Whether the overwintered field is set.
     */
    @java.lang.Deprecated boolean hasOverwintered();
    /**
     * <pre>
     * deprecated in 2.3.2, the field is not needed as it can be derived from `version`
     * </pre>
     *
     * <code>optional bool overwintered = 7 [deprecated = true];</code>
     * @deprecated hw.trezor.messages.bitcoin.SignTx.overwintered is deprecated.
     *     See messages-bitcoin.proto;l=197
     * @return The overwintered.
     */
    @java.lang.Deprecated boolean getOverwintered();

    /**
     * <pre>
     * only for Zcash, nVersionGroupId
     * </pre>
     *
     * <code>optional uint32 version_group_id = 8;</code>
     * @return Whether the versionGroupId field is set.
     */
    boolean hasVersionGroupId();
    /**
     * <pre>
     * only for Zcash, nVersionGroupId
     * </pre>
     *
     * <code>optional uint32 version_group_id = 8;</code>
     * @return The versionGroupId.
     */
    int getVersionGroupId();

    /**
     * <pre>
     * only for Peercoin
     * </pre>
     *
     * <code>optional uint32 timestamp = 9;</code>
     * @return Whether the timestamp field is set.
     */
    boolean hasTimestamp();
    /**
     * <pre>
     * only for Peercoin
     * </pre>
     *
     * <code>optional uint32 timestamp = 9;</code>
     * @return The timestamp.
     */
    int getTimestamp();

    /**
     * <pre>
     * only for Zcash, BRANCH_ID
     * </pre>
     *
     * <code>optional uint32 branch_id = 10;</code>
     * @return Whether the branchId field is set.
     */
    boolean hasBranchId();
    /**
     * <pre>
     * only for Zcash, BRANCH_ID
     * </pre>
     *
     * <code>optional uint32 branch_id = 10;</code>
     * @return The branchId.
     */
    int getBranchId();

    /**
     * <pre>
     * show amounts in
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.AmountUnit amount_unit = 11 [default = BITCOIN];</code>
     * @return Whether the amountUnit field is set.
     */
    boolean hasAmountUnit();
    /**
     * <pre>
     * show amounts in
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.AmountUnit amount_unit = 11 [default = BITCOIN];</code>
     * @return The amountUnit.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit getAmountUnit();

    /**
     * <pre>
     * only for Decred, this is signing a ticket purchase
     * </pre>
     *
     * <code>optional bool decred_staking_ticket = 12 [default = false];</code>
     * @return Whether the decredStakingTicket field is set.
     */
    boolean hasDecredStakingTicket();
    /**
     * <pre>
     * only for Decred, this is signing a ticket purchase
     * </pre>
     *
     * <code>optional bool decred_staking_ticket = 12 [default = false];</code>
     * @return The decredStakingTicket.
     */
    boolean getDecredStakingTicket();

    /**
     * <pre>
     * serialize the full transaction, as opposed to only outputting the signatures
     * </pre>
     *
     * <code>optional bool serialize = 13 [default = true];</code>
     * @return Whether the serialize field is set.
     */
    boolean hasSerialize();
    /**
     * <pre>
     * serialize the full transaction, as opposed to only outputting the signatures
     * </pre>
     *
     * <code>optional bool serialize = 13 [default = true];</code>
     * @return The serialize.
     */
    boolean getSerialize();

    /**
     * <pre>
     * only for preauthorized CoinJoins
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest coinjoin_request = 14;</code>
     * @return Whether the coinjoinRequest field is set.
     */
    boolean hasCoinjoinRequest();
    /**
     * <pre>
     * only for preauthorized CoinJoins
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest coinjoin_request = 14;</code>
     * @return The coinjoinRequest.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest getCoinjoinRequest();
    /**
     * <pre>
     * only for preauthorized CoinJoins
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest coinjoin_request = 14;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequestOrBuilder getCoinjoinRequestOrBuilder();

    /**
     * <pre>
     * display the address in chunks of 4 characters
     * </pre>
     *
     * <code>optional bool chunkify = 15;</code>
     * @return Whether the chunkify field is set.
     */
    boolean hasChunkify();
    /**
     * <pre>
     * display the address in chunks of 4 characters
     * </pre>
     *
     * <code>optional bool chunkify = 15;</code>
     * @return The chunkify.
     */
    boolean getChunkify();
  }
  /**
   * <pre>
   * *
   * Request: Ask device to sign transaction
   * &#64;start
   * &#64;next TxRequest
   * &#64;next Failure
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.SignTx}
   */
  public static final class SignTx extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.SignTx)
      SignTxOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        SignTx.class.getName());
    }
    // Use SignTx.newBuilder() to construct.
    private SignTx(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private SignTx() {
      coinName_ = "Bitcoin";
      version_ = 1;
      amountUnit_ = 0;
      serialize_ = true;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_SignTx_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_SignTx_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.Builder.class);
    }

    public interface CoinJoinRequestOrBuilder extends
        // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * coordination fee rate in units of 10^-6 percent
       * </pre>
       *
       * <code>required uint32 fee_rate = 1;</code>
       * @return Whether the feeRate field is set.
       */
      boolean hasFeeRate();
      /**
       * <pre>
       * coordination fee rate in units of 10^-6 percent
       * </pre>
       *
       * <code>required uint32 fee_rate = 1;</code>
       * @return The feeRate.
       */
      int getFeeRate();

      /**
       * <pre>
       * PlebsDontPayThreshold in Wasabi, the input amount above which the fee rate applies
       * </pre>
       *
       * <code>required uint64 no_fee_threshold = 2;</code>
       * @return Whether the noFeeThreshold field is set.
       */
      boolean hasNoFeeThreshold();
      /**
       * <pre>
       * PlebsDontPayThreshold in Wasabi, the input amount above which the fee rate applies
       * </pre>
       *
       * <code>required uint64 no_fee_threshold = 2;</code>
       * @return The noFeeThreshold.
       */
      long getNoFeeThreshold();

      /**
       * <pre>
       * minimum registrable output amount
       * </pre>
       *
       * <code>required uint64 min_registrable_amount = 3;</code>
       * @return Whether the minRegistrableAmount field is set.
       */
      boolean hasMinRegistrableAmount();
      /**
       * <pre>
       * minimum registrable output amount
       * </pre>
       *
       * <code>required uint64 min_registrable_amount = 3;</code>
       * @return The minRegistrableAmount.
       */
      long getMinRegistrableAmount();

      /**
       * <pre>
       * ephemeral secp256k1 public key used for masking coinjoin_flags, 33 bytes in compressed form
       * </pre>
       *
       * <code>optional bytes mask_public_key = 4;</code>
       * @return Whether the maskPublicKey field is set.
       */
      boolean hasMaskPublicKey();
      /**
       * <pre>
       * ephemeral secp256k1 public key used for masking coinjoin_flags, 33 bytes in compressed form
       * </pre>
       *
       * <code>optional bytes mask_public_key = 4;</code>
       * @return The maskPublicKey.
       */
      com.google.protobuf.ByteString getMaskPublicKey();

      /**
       * <pre>
       * the trusted party's signature of the CoinJoin request digest
       * </pre>
       *
       * <code>optional bytes signature = 5;</code>
       * @return Whether the signature field is set.
       */
      boolean hasSignature();
      /**
       * <pre>
       * the trusted party's signature of the CoinJoin request digest
       * </pre>
       *
       * <code>optional bytes signature = 5;</code>
       * @return The signature.
       */
      com.google.protobuf.ByteString getSignature();
    }
    /**
     * <pre>
     * *
     * Signing request for a CoinJoin transaction.
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest}
     */
    public static final class CoinJoinRequest extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest)
        CoinJoinRequestOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          CoinJoinRequest.class.getName());
      }
      // Use CoinJoinRequest.newBuilder() to construct.
      private CoinJoinRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private CoinJoinRequest() {
        maskPublicKey_ = com.google.protobuf.ByteString.EMPTY;
        signature_ = com.google.protobuf.ByteString.EMPTY;
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_SignTx_CoinJoinRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_SignTx_CoinJoinRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest.Builder.class);
      }

      private int bitField0_;
      public static final int FEE_RATE_FIELD_NUMBER = 1;
      private int feeRate_ = 0;
      /**
       * <pre>
       * coordination fee rate in units of 10^-6 percent
       * </pre>
       *
       * <code>required uint32 fee_rate = 1;</code>
       * @return Whether the feeRate field is set.
       */
      @java.lang.Override
      public boolean hasFeeRate() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * coordination fee rate in units of 10^-6 percent
       * </pre>
       *
       * <code>required uint32 fee_rate = 1;</code>
       * @return The feeRate.
       */
      @java.lang.Override
      public int getFeeRate() {
        return feeRate_;
      }

      public static final int NO_FEE_THRESHOLD_FIELD_NUMBER = 2;
      private long noFeeThreshold_ = 0L;
      /**
       * <pre>
       * PlebsDontPayThreshold in Wasabi, the input amount above which the fee rate applies
       * </pre>
       *
       * <code>required uint64 no_fee_threshold = 2;</code>
       * @return Whether the noFeeThreshold field is set.
       */
      @java.lang.Override
      public boolean hasNoFeeThreshold() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * PlebsDontPayThreshold in Wasabi, the input amount above which the fee rate applies
       * </pre>
       *
       * <code>required uint64 no_fee_threshold = 2;</code>
       * @return The noFeeThreshold.
       */
      @java.lang.Override
      public long getNoFeeThreshold() {
        return noFeeThreshold_;
      }

      public static final int MIN_REGISTRABLE_AMOUNT_FIELD_NUMBER = 3;
      private long minRegistrableAmount_ = 0L;
      /**
       * <pre>
       * minimum registrable output amount
       * </pre>
       *
       * <code>required uint64 min_registrable_amount = 3;</code>
       * @return Whether the minRegistrableAmount field is set.
       */
      @java.lang.Override
      public boolean hasMinRegistrableAmount() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * minimum registrable output amount
       * </pre>
       *
       * <code>required uint64 min_registrable_amount = 3;</code>
       * @return The minRegistrableAmount.
       */
      @java.lang.Override
      public long getMinRegistrableAmount() {
        return minRegistrableAmount_;
      }

      public static final int MASK_PUBLIC_KEY_FIELD_NUMBER = 4;
      private com.google.protobuf.ByteString maskPublicKey_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * ephemeral secp256k1 public key used for masking coinjoin_flags, 33 bytes in compressed form
       * </pre>
       *
       * <code>optional bytes mask_public_key = 4;</code>
       * @return Whether the maskPublicKey field is set.
       */
      @java.lang.Override
      public boolean hasMaskPublicKey() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * ephemeral secp256k1 public key used for masking coinjoin_flags, 33 bytes in compressed form
       * </pre>
       *
       * <code>optional bytes mask_public_key = 4;</code>
       * @return The maskPublicKey.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getMaskPublicKey() {
        return maskPublicKey_;
      }

      public static final int SIGNATURE_FIELD_NUMBER = 5;
      private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * the trusted party's signature of the CoinJoin request digest
       * </pre>
       *
       * <code>optional bytes signature = 5;</code>
       * @return Whether the signature field is set.
       */
      @java.lang.Override
      public boolean hasSignature() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * the trusted party's signature of the CoinJoin request digest
       * </pre>
       *
       * <code>optional bytes signature = 5;</code>
       * @return The signature.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSignature() {
        return signature_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasFeeRate()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasNoFeeThreshold()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasMinRegistrableAmount()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt32(1, feeRate_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeUInt64(2, noFeeThreshold_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeUInt64(3, minRegistrableAmount_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeBytes(4, maskPublicKey_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          output.writeBytes(5, signature_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, feeRate_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(2, noFeeThreshold_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(3, minRegistrableAmount_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(4, maskPublicKey_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(5, signature_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest) obj;

        if (hasFeeRate() != other.hasFeeRate()) return false;
        if (hasFeeRate()) {
          if (getFeeRate()
              != other.getFeeRate()) return false;
        }
        if (hasNoFeeThreshold() != other.hasNoFeeThreshold()) return false;
        if (hasNoFeeThreshold()) {
          if (getNoFeeThreshold()
              != other.getNoFeeThreshold()) return false;
        }
        if (hasMinRegistrableAmount() != other.hasMinRegistrableAmount()) return false;
        if (hasMinRegistrableAmount()) {
          if (getMinRegistrableAmount()
              != other.getMinRegistrableAmount()) return false;
        }
        if (hasMaskPublicKey() != other.hasMaskPublicKey()) return false;
        if (hasMaskPublicKey()) {
          if (!getMaskPublicKey()
              .equals(other.getMaskPublicKey())) return false;
        }
        if (hasSignature() != other.hasSignature()) return false;
        if (hasSignature()) {
          if (!getSignature()
              .equals(other.getSignature())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasFeeRate()) {
          hash = (37 * hash) + FEE_RATE_FIELD_NUMBER;
          hash = (53 * hash) + getFeeRate();
        }
        if (hasNoFeeThreshold()) {
          hash = (37 * hash) + NO_FEE_THRESHOLD_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getNoFeeThreshold());
        }
        if (hasMinRegistrableAmount()) {
          hash = (37 * hash) + MIN_REGISTRABLE_AMOUNT_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getMinRegistrableAmount());
        }
        if (hasMaskPublicKey()) {
          hash = (37 * hash) + MASK_PUBLIC_KEY_FIELD_NUMBER;
          hash = (53 * hash) + getMaskPublicKey().hashCode();
        }
        if (hasSignature()) {
          hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
          hash = (53 * hash) + getSignature().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * *
       * Signing request for a CoinJoin transaction.
       * </pre>
       *
       * Protobuf type {@code hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest)
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequestOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_SignTx_CoinJoinRequest_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_SignTx_CoinJoinRequest_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          feeRate_ = 0;
          noFeeThreshold_ = 0L;
          minRegistrableAmount_ = 0L;
          maskPublicKey_ = com.google.protobuf.ByteString.EMPTY;
          signature_ = com.google.protobuf.ByteString.EMPTY;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_SignTx_CoinJoinRequest_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest getDefaultInstanceForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest build() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest buildPartial() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.feeRate_ = feeRate_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.noFeeThreshold_ = noFeeThreshold_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.minRegistrableAmount_ = minRegistrableAmount_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.maskPublicKey_ = maskPublicKey_;
            to_bitField0_ |= 0x00000008;
          }
          if (((from_bitField0_ & 0x00000010) != 0)) {
            result.signature_ = signature_;
            to_bitField0_ |= 0x00000010;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest) {
            return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest other) {
          if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest.getDefaultInstance()) return this;
          if (other.hasFeeRate()) {
            setFeeRate(other.getFeeRate());
          }
          if (other.hasNoFeeThreshold()) {
            setNoFeeThreshold(other.getNoFeeThreshold());
          }
          if (other.hasMinRegistrableAmount()) {
            setMinRegistrableAmount(other.getMinRegistrableAmount());
          }
          if (other.hasMaskPublicKey()) {
            setMaskPublicKey(other.getMaskPublicKey());
          }
          if (other.hasSignature()) {
            setSignature(other.getSignature());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          if (!hasFeeRate()) {
            return false;
          }
          if (!hasNoFeeThreshold()) {
            return false;
          }
          if (!hasMinRegistrableAmount()) {
            return false;
          }
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  feeRate_ = input.readUInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 16: {
                  noFeeThreshold_ = input.readUInt64();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                case 24: {
                  minRegistrableAmount_ = input.readUInt64();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
                case 34: {
                  maskPublicKey_ = input.readBytes();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 34
                case 42: {
                  signature_ = input.readBytes();
                  bitField0_ |= 0x00000010;
                  break;
                } // case 42
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int feeRate_ ;
        /**
         * <pre>
         * coordination fee rate in units of 10^-6 percent
         * </pre>
         *
         * <code>required uint32 fee_rate = 1;</code>
         * @return Whether the feeRate field is set.
         */
        @java.lang.Override
        public boolean hasFeeRate() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * coordination fee rate in units of 10^-6 percent
         * </pre>
         *
         * <code>required uint32 fee_rate = 1;</code>
         * @return The feeRate.
         */
        @java.lang.Override
        public int getFeeRate() {
          return feeRate_;
        }
        /**
         * <pre>
         * coordination fee rate in units of 10^-6 percent
         * </pre>
         *
         * <code>required uint32 fee_rate = 1;</code>
         * @param value The feeRate to set.
         * @return This builder for chaining.
         */
        public Builder setFeeRate(int value) {

          feeRate_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * coordination fee rate in units of 10^-6 percent
         * </pre>
         *
         * <code>required uint32 fee_rate = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearFeeRate() {
          bitField0_ = (bitField0_ & ~0x00000001);
          feeRate_ = 0;
          onChanged();
          return this;
        }

        private long noFeeThreshold_ ;
        /**
         * <pre>
         * PlebsDontPayThreshold in Wasabi, the input amount above which the fee rate applies
         * </pre>
         *
         * <code>required uint64 no_fee_threshold = 2;</code>
         * @return Whether the noFeeThreshold field is set.
         */
        @java.lang.Override
        public boolean hasNoFeeThreshold() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * PlebsDontPayThreshold in Wasabi, the input amount above which the fee rate applies
         * </pre>
         *
         * <code>required uint64 no_fee_threshold = 2;</code>
         * @return The noFeeThreshold.
         */
        @java.lang.Override
        public long getNoFeeThreshold() {
          return noFeeThreshold_;
        }
        /**
         * <pre>
         * PlebsDontPayThreshold in Wasabi, the input amount above which the fee rate applies
         * </pre>
         *
         * <code>required uint64 no_fee_threshold = 2;</code>
         * @param value The noFeeThreshold to set.
         * @return This builder for chaining.
         */
        public Builder setNoFeeThreshold(long value) {

          noFeeThreshold_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * PlebsDontPayThreshold in Wasabi, the input amount above which the fee rate applies
         * </pre>
         *
         * <code>required uint64 no_fee_threshold = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearNoFeeThreshold() {
          bitField0_ = (bitField0_ & ~0x00000002);
          noFeeThreshold_ = 0L;
          onChanged();
          return this;
        }

        private long minRegistrableAmount_ ;
        /**
         * <pre>
         * minimum registrable output amount
         * </pre>
         *
         * <code>required uint64 min_registrable_amount = 3;</code>
         * @return Whether the minRegistrableAmount field is set.
         */
        @java.lang.Override
        public boolean hasMinRegistrableAmount() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * minimum registrable output amount
         * </pre>
         *
         * <code>required uint64 min_registrable_amount = 3;</code>
         * @return The minRegistrableAmount.
         */
        @java.lang.Override
        public long getMinRegistrableAmount() {
          return minRegistrableAmount_;
        }
        /**
         * <pre>
         * minimum registrable output amount
         * </pre>
         *
         * <code>required uint64 min_registrable_amount = 3;</code>
         * @param value The minRegistrableAmount to set.
         * @return This builder for chaining.
         */
        public Builder setMinRegistrableAmount(long value) {

          minRegistrableAmount_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * minimum registrable output amount
         * </pre>
         *
         * <code>required uint64 min_registrable_amount = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearMinRegistrableAmount() {
          bitField0_ = (bitField0_ & ~0x00000004);
          minRegistrableAmount_ = 0L;
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString maskPublicKey_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * ephemeral secp256k1 public key used for masking coinjoin_flags, 33 bytes in compressed form
         * </pre>
         *
         * <code>optional bytes mask_public_key = 4;</code>
         * @return Whether the maskPublicKey field is set.
         */
        @java.lang.Override
        public boolean hasMaskPublicKey() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * ephemeral secp256k1 public key used for masking coinjoin_flags, 33 bytes in compressed form
         * </pre>
         *
         * <code>optional bytes mask_public_key = 4;</code>
         * @return The maskPublicKey.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getMaskPublicKey() {
          return maskPublicKey_;
        }
        /**
         * <pre>
         * ephemeral secp256k1 public key used for masking coinjoin_flags, 33 bytes in compressed form
         * </pre>
         *
         * <code>optional bytes mask_public_key = 4;</code>
         * @param value The maskPublicKey to set.
         * @return This builder for chaining.
         */
        public Builder setMaskPublicKey(com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          maskPublicKey_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * ephemeral secp256k1 public key used for masking coinjoin_flags, 33 bytes in compressed form
         * </pre>
         *
         * <code>optional bytes mask_public_key = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearMaskPublicKey() {
          bitField0_ = (bitField0_ & ~0x00000008);
          maskPublicKey_ = getDefaultInstance().getMaskPublicKey();
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * the trusted party's signature of the CoinJoin request digest
         * </pre>
         *
         * <code>optional bytes signature = 5;</code>
         * @return Whether the signature field is set.
         */
        @java.lang.Override
        public boolean hasSignature() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         * the trusted party's signature of the CoinJoin request digest
         * </pre>
         *
         * <code>optional bytes signature = 5;</code>
         * @return The signature.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getSignature() {
          return signature_;
        }
        /**
         * <pre>
         * the trusted party's signature of the CoinJoin request digest
         * </pre>
         *
         * <code>optional bytes signature = 5;</code>
         * @param value The signature to set.
         * @return This builder for chaining.
         */
        public Builder setSignature(com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          signature_ = value;
          bitField0_ |= 0x00000010;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the trusted party's signature of the CoinJoin request digest
         * </pre>
         *
         * <code>optional bytes signature = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearSignature() {
          bitField0_ = (bitField0_ & ~0x00000010);
          signature_ = getDefaultInstance().getSignature();
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest)
      }

      // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest)
      private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest();
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<CoinJoinRequest>
          PARSER = new com.google.protobuf.AbstractParser<CoinJoinRequest>() {
        @java.lang.Override
        public CoinJoinRequest parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<CoinJoinRequest> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<CoinJoinRequest> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int OUTPUTS_COUNT_FIELD_NUMBER = 1;
    private int outputsCount_ = 0;
    /**
     * <pre>
     * number of transaction outputs
     * </pre>
     *
     * <code>required uint32 outputs_count = 1;</code>
     * @return Whether the outputsCount field is set.
     */
    @java.lang.Override
    public boolean hasOutputsCount() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * number of transaction outputs
     * </pre>
     *
     * <code>required uint32 outputs_count = 1;</code>
     * @return The outputsCount.
     */
    @java.lang.Override
    public int getOutputsCount() {
      return outputsCount_;
    }

    public static final int INPUTS_COUNT_FIELD_NUMBER = 2;
    private int inputsCount_ = 0;
    /**
     * <pre>
     * number of transaction inputs
     * </pre>
     *
     * <code>required uint32 inputs_count = 2;</code>
     * @return Whether the inputsCount field is set.
     */
    @java.lang.Override
    public boolean hasInputsCount() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * number of transaction inputs
     * </pre>
     *
     * <code>required uint32 inputs_count = 2;</code>
     * @return The inputsCount.
     */
    @java.lang.Override
    public int getInputsCount() {
      return inputsCount_;
    }

    public static final int COIN_NAME_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object coinName_ = "Bitcoin";
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
     * @return Whether the coinName field is set.
     */
    @java.lang.Override
    public boolean hasCoinName() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
     * @return The coinName.
     */
    @java.lang.Override
    public java.lang.String getCoinName() {
      java.lang.Object ref = coinName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          coinName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
     * @return The bytes for coinName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCoinNameBytes() {
      java.lang.Object ref = coinName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        coinName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VERSION_FIELD_NUMBER = 4;
    private int version_ = 1;
    /**
     * <pre>
     * transaction version
     * </pre>
     *
     * <code>optional uint32 version = 4 [default = 1];</code>
     * @return Whether the version field is set.
     */
    @java.lang.Override
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * transaction version
     * </pre>
     *
     * <code>optional uint32 version = 4 [default = 1];</code>
     * @return The version.
     */
    @java.lang.Override
    public int getVersion() {
      return version_;
    }

    public static final int LOCK_TIME_FIELD_NUMBER = 5;
    private int lockTime_ = 0;
    /**
     * <pre>
     * transaction lock_time
     * </pre>
     *
     * <code>optional uint32 lock_time = 5 [default = 0];</code>
     * @return Whether the lockTime field is set.
     */
    @java.lang.Override
    public boolean hasLockTime() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * transaction lock_time
     * </pre>
     *
     * <code>optional uint32 lock_time = 5 [default = 0];</code>
     * @return The lockTime.
     */
    @java.lang.Override
    public int getLockTime() {
      return lockTime_;
    }

    public static final int EXPIRY_FIELD_NUMBER = 6;
    private int expiry_ = 0;
    /**
     * <pre>
     * only for Decred and Zcash
     * </pre>
     *
     * <code>optional uint32 expiry = 6;</code>
     * @return Whether the expiry field is set.
     */
    @java.lang.Override
    public boolean hasExpiry() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * only for Decred and Zcash
     * </pre>
     *
     * <code>optional uint32 expiry = 6;</code>
     * @return The expiry.
     */
    @java.lang.Override
    public int getExpiry() {
      return expiry_;
    }

    public static final int OVERWINTERED_FIELD_NUMBER = 7;
    private boolean overwintered_ = false;
    /**
     * <pre>
     * deprecated in 2.3.2, the field is not needed as it can be derived from `version`
     * </pre>
     *
     * <code>optional bool overwintered = 7 [deprecated = true];</code>
     * @deprecated hw.trezor.messages.bitcoin.SignTx.overwintered is deprecated.
     *     See messages-bitcoin.proto;l=197
     * @return Whether the overwintered field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasOverwintered() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * deprecated in 2.3.2, the field is not needed as it can be derived from `version`
     * </pre>
     *
     * <code>optional bool overwintered = 7 [deprecated = true];</code>
     * @deprecated hw.trezor.messages.bitcoin.SignTx.overwintered is deprecated.
     *     See messages-bitcoin.proto;l=197
     * @return The overwintered.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean getOverwintered() {
      return overwintered_;
    }

    public static final int VERSION_GROUP_ID_FIELD_NUMBER = 8;
    private int versionGroupId_ = 0;
    /**
     * <pre>
     * only for Zcash, nVersionGroupId
     * </pre>
     *
     * <code>optional uint32 version_group_id = 8;</code>
     * @return Whether the versionGroupId field is set.
     */
    @java.lang.Override
    public boolean hasVersionGroupId() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * only for Zcash, nVersionGroupId
     * </pre>
     *
     * <code>optional uint32 version_group_id = 8;</code>
     * @return The versionGroupId.
     */
    @java.lang.Override
    public int getVersionGroupId() {
      return versionGroupId_;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 9;
    private int timestamp_ = 0;
    /**
     * <pre>
     * only for Peercoin
     * </pre>
     *
     * <code>optional uint32 timestamp = 9;</code>
     * @return Whether the timestamp field is set.
     */
    @java.lang.Override
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * only for Peercoin
     * </pre>
     *
     * <code>optional uint32 timestamp = 9;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public int getTimestamp() {
      return timestamp_;
    }

    public static final int BRANCH_ID_FIELD_NUMBER = 10;
    private int branchId_ = 0;
    /**
     * <pre>
     * only for Zcash, BRANCH_ID
     * </pre>
     *
     * <code>optional uint32 branch_id = 10;</code>
     * @return Whether the branchId field is set.
     */
    @java.lang.Override
    public boolean hasBranchId() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * only for Zcash, BRANCH_ID
     * </pre>
     *
     * <code>optional uint32 branch_id = 10;</code>
     * @return The branchId.
     */
    @java.lang.Override
    public int getBranchId() {
      return branchId_;
    }

    public static final int AMOUNT_UNIT_FIELD_NUMBER = 11;
    private int amountUnit_ = 0;
    /**
     * <pre>
     * show amounts in
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.AmountUnit amount_unit = 11 [default = BITCOIN];</code>
     * @return Whether the amountUnit field is set.
     */
    @java.lang.Override public boolean hasAmountUnit() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * show amounts in
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.AmountUnit amount_unit = 11 [default = BITCOIN];</code>
     * @return The amountUnit.
     */
    @java.lang.Override public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit getAmountUnit() {
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit.forNumber(amountUnit_);
      return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit.BITCOIN : result;
    }

    public static final int DECRED_STAKING_TICKET_FIELD_NUMBER = 12;
    private boolean decredStakingTicket_ = false;
    /**
     * <pre>
     * only for Decred, this is signing a ticket purchase
     * </pre>
     *
     * <code>optional bool decred_staking_ticket = 12 [default = false];</code>
     * @return Whether the decredStakingTicket field is set.
     */
    @java.lang.Override
    public boolean hasDecredStakingTicket() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * only for Decred, this is signing a ticket purchase
     * </pre>
     *
     * <code>optional bool decred_staking_ticket = 12 [default = false];</code>
     * @return The decredStakingTicket.
     */
    @java.lang.Override
    public boolean getDecredStakingTicket() {
      return decredStakingTicket_;
    }

    public static final int SERIALIZE_FIELD_NUMBER = 13;
    private boolean serialize_ = true;
    /**
     * <pre>
     * serialize the full transaction, as opposed to only outputting the signatures
     * </pre>
     *
     * <code>optional bool serialize = 13 [default = true];</code>
     * @return Whether the serialize field is set.
     */
    @java.lang.Override
    public boolean hasSerialize() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     * serialize the full transaction, as opposed to only outputting the signatures
     * </pre>
     *
     * <code>optional bool serialize = 13 [default = true];</code>
     * @return The serialize.
     */
    @java.lang.Override
    public boolean getSerialize() {
      return serialize_;
    }

    public static final int COINJOIN_REQUEST_FIELD_NUMBER = 14;
    private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest coinjoinRequest_;
    /**
     * <pre>
     * only for preauthorized CoinJoins
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest coinjoin_request = 14;</code>
     * @return Whether the coinjoinRequest field is set.
     */
    @java.lang.Override
    public boolean hasCoinjoinRequest() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <pre>
     * only for preauthorized CoinJoins
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest coinjoin_request = 14;</code>
     * @return The coinjoinRequest.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest getCoinjoinRequest() {
      return coinjoinRequest_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest.getDefaultInstance() : coinjoinRequest_;
    }
    /**
     * <pre>
     * only for preauthorized CoinJoins
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest coinjoin_request = 14;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequestOrBuilder getCoinjoinRequestOrBuilder() {
      return coinjoinRequest_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest.getDefaultInstance() : coinjoinRequest_;
    }

    public static final int CHUNKIFY_FIELD_NUMBER = 15;
    private boolean chunkify_ = false;
    /**
     * <pre>
     * display the address in chunks of 4 characters
     * </pre>
     *
     * <code>optional bool chunkify = 15;</code>
     * @return Whether the chunkify field is set.
     */
    @java.lang.Override
    public boolean hasChunkify() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <pre>
     * display the address in chunks of 4 characters
     * </pre>
     *
     * <code>optional bool chunkify = 15;</code>
     * @return The chunkify.
     */
    @java.lang.Override
    public boolean getChunkify() {
      return chunkify_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasOutputsCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInputsCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasCoinjoinRequest()) {
        if (!getCoinjoinRequest().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(1, outputsCount_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt32(2, inputsCount_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, coinName_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeUInt32(4, version_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeUInt32(5, lockTime_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeUInt32(6, expiry_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeBool(7, overwintered_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeUInt32(8, versionGroupId_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeUInt32(9, timestamp_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeUInt32(10, branchId_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeEnum(11, amountUnit_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        output.writeBool(12, decredStakingTicket_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        output.writeBool(13, serialize_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        output.writeMessage(14, getCoinjoinRequest());
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        output.writeBool(15, chunkify_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, outputsCount_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, inputsCount_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(3, coinName_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, version_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, lockTime_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, expiry_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, overwintered_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, versionGroupId_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, timestamp_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, branchId_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, amountUnit_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, decredStakingTicket_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, serialize_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getCoinjoinRequest());
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(15, chunkify_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx) obj;

      if (hasOutputsCount() != other.hasOutputsCount()) return false;
      if (hasOutputsCount()) {
        if (getOutputsCount()
            != other.getOutputsCount()) return false;
      }
      if (hasInputsCount() != other.hasInputsCount()) return false;
      if (hasInputsCount()) {
        if (getInputsCount()
            != other.getInputsCount()) return false;
      }
      if (hasCoinName() != other.hasCoinName()) return false;
      if (hasCoinName()) {
        if (!getCoinName()
            .equals(other.getCoinName())) return false;
      }
      if (hasVersion() != other.hasVersion()) return false;
      if (hasVersion()) {
        if (getVersion()
            != other.getVersion()) return false;
      }
      if (hasLockTime() != other.hasLockTime()) return false;
      if (hasLockTime()) {
        if (getLockTime()
            != other.getLockTime()) return false;
      }
      if (hasExpiry() != other.hasExpiry()) return false;
      if (hasExpiry()) {
        if (getExpiry()
            != other.getExpiry()) return false;
      }
      if (hasOverwintered() != other.hasOverwintered()) return false;
      if (hasOverwintered()) {
        if (getOverwintered()
            != other.getOverwintered()) return false;
      }
      if (hasVersionGroupId() != other.hasVersionGroupId()) return false;
      if (hasVersionGroupId()) {
        if (getVersionGroupId()
            != other.getVersionGroupId()) return false;
      }
      if (hasTimestamp() != other.hasTimestamp()) return false;
      if (hasTimestamp()) {
        if (getTimestamp()
            != other.getTimestamp()) return false;
      }
      if (hasBranchId() != other.hasBranchId()) return false;
      if (hasBranchId()) {
        if (getBranchId()
            != other.getBranchId()) return false;
      }
      if (hasAmountUnit() != other.hasAmountUnit()) return false;
      if (hasAmountUnit()) {
        if (amountUnit_ != other.amountUnit_) return false;
      }
      if (hasDecredStakingTicket() != other.hasDecredStakingTicket()) return false;
      if (hasDecredStakingTicket()) {
        if (getDecredStakingTicket()
            != other.getDecredStakingTicket()) return false;
      }
      if (hasSerialize() != other.hasSerialize()) return false;
      if (hasSerialize()) {
        if (getSerialize()
            != other.getSerialize()) return false;
      }
      if (hasCoinjoinRequest() != other.hasCoinjoinRequest()) return false;
      if (hasCoinjoinRequest()) {
        if (!getCoinjoinRequest()
            .equals(other.getCoinjoinRequest())) return false;
      }
      if (hasChunkify() != other.hasChunkify()) return false;
      if (hasChunkify()) {
        if (getChunkify()
            != other.getChunkify()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasOutputsCount()) {
        hash = (37 * hash) + OUTPUTS_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getOutputsCount();
      }
      if (hasInputsCount()) {
        hash = (37 * hash) + INPUTS_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getInputsCount();
      }
      if (hasCoinName()) {
        hash = (37 * hash) + COIN_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getCoinName().hashCode();
      }
      if (hasVersion()) {
        hash = (37 * hash) + VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getVersion();
      }
      if (hasLockTime()) {
        hash = (37 * hash) + LOCK_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getLockTime();
      }
      if (hasExpiry()) {
        hash = (37 * hash) + EXPIRY_FIELD_NUMBER;
        hash = (53 * hash) + getExpiry();
      }
      if (hasOverwintered()) {
        hash = (37 * hash) + OVERWINTERED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getOverwintered());
      }
      if (hasVersionGroupId()) {
        hash = (37 * hash) + VERSION_GROUP_ID_FIELD_NUMBER;
        hash = (53 * hash) + getVersionGroupId();
      }
      if (hasTimestamp()) {
        hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + getTimestamp();
      }
      if (hasBranchId()) {
        hash = (37 * hash) + BRANCH_ID_FIELD_NUMBER;
        hash = (53 * hash) + getBranchId();
      }
      if (hasAmountUnit()) {
        hash = (37 * hash) + AMOUNT_UNIT_FIELD_NUMBER;
        hash = (53 * hash) + amountUnit_;
      }
      if (hasDecredStakingTicket()) {
        hash = (37 * hash) + DECRED_STAKING_TICKET_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDecredStakingTicket());
      }
      if (hasSerialize()) {
        hash = (37 * hash) + SERIALIZE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSerialize());
      }
      if (hasCoinjoinRequest()) {
        hash = (37 * hash) + COINJOIN_REQUEST_FIELD_NUMBER;
        hash = (53 * hash) + getCoinjoinRequest().hashCode();
      }
      if (hasChunkify()) {
        hash = (37 * hash) + CHUNKIFY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getChunkify());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Request: Ask device to sign transaction
     * &#64;start
     * &#64;next TxRequest
     * &#64;next Failure
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.SignTx}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.SignTx)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTxOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_SignTx_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_SignTx_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getCoinjoinRequestFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        outputsCount_ = 0;
        inputsCount_ = 0;
        coinName_ = "Bitcoin";
        version_ = 1;
        lockTime_ = 0;
        expiry_ = 0;
        overwintered_ = false;
        versionGroupId_ = 0;
        timestamp_ = 0;
        branchId_ = 0;
        amountUnit_ = 0;
        decredStakingTicket_ = false;
        serialize_ = true;
        coinjoinRequest_ = null;
        if (coinjoinRequestBuilder_ != null) {
          coinjoinRequestBuilder_.dispose();
          coinjoinRequestBuilder_ = null;
        }
        chunkify_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_SignTx_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.outputsCount_ = outputsCount_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.inputsCount_ = inputsCount_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.coinName_ = coinName_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.version_ = version_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.lockTime_ = lockTime_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.expiry_ = expiry_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.overwintered_ = overwintered_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.versionGroupId_ = versionGroupId_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.timestamp_ = timestamp_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.branchId_ = branchId_;
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.amountUnit_ = amountUnit_;
          to_bitField0_ |= 0x00000400;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.decredStakingTicket_ = decredStakingTicket_;
          to_bitField0_ |= 0x00000800;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.serialize_ = serialize_;
          to_bitField0_ |= 0x00001000;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          result.coinjoinRequest_ = coinjoinRequestBuilder_ == null
              ? coinjoinRequest_
              : coinjoinRequestBuilder_.build();
          to_bitField0_ |= 0x00002000;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          result.chunkify_ = chunkify_;
          to_bitField0_ |= 0x00004000;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.getDefaultInstance()) return this;
        if (other.hasOutputsCount()) {
          setOutputsCount(other.getOutputsCount());
        }
        if (other.hasInputsCount()) {
          setInputsCount(other.getInputsCount());
        }
        if (other.hasCoinName()) {
          coinName_ = other.coinName_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasLockTime()) {
          setLockTime(other.getLockTime());
        }
        if (other.hasExpiry()) {
          setExpiry(other.getExpiry());
        }
        if (other.hasOverwintered()) {
          setOverwintered(other.getOverwintered());
        }
        if (other.hasVersionGroupId()) {
          setVersionGroupId(other.getVersionGroupId());
        }
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (other.hasBranchId()) {
          setBranchId(other.getBranchId());
        }
        if (other.hasAmountUnit()) {
          setAmountUnit(other.getAmountUnit());
        }
        if (other.hasDecredStakingTicket()) {
          setDecredStakingTicket(other.getDecredStakingTicket());
        }
        if (other.hasSerialize()) {
          setSerialize(other.getSerialize());
        }
        if (other.hasCoinjoinRequest()) {
          mergeCoinjoinRequest(other.getCoinjoinRequest());
        }
        if (other.hasChunkify()) {
          setChunkify(other.getChunkify());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasOutputsCount()) {
          return false;
        }
        if (!hasInputsCount()) {
          return false;
        }
        if (hasCoinjoinRequest()) {
          if (!getCoinjoinRequest().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                outputsCount_ = input.readUInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                inputsCount_ = input.readUInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                coinName_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 32: {
                version_ = input.readUInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                lockTime_ = input.readUInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 48: {
                expiry_ = input.readUInt32();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 56: {
                overwintered_ = input.readBool();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 64: {
                versionGroupId_ = input.readUInt32();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              case 72: {
                timestamp_ = input.readUInt32();
                bitField0_ |= 0x00000100;
                break;
              } // case 72
              case 80: {
                branchId_ = input.readUInt32();
                bitField0_ |= 0x00000200;
                break;
              } // case 80
              case 88: {
                int tmpRaw = input.readEnum();
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit tmpValue =
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(11, tmpRaw);
                } else {
                  amountUnit_ = tmpRaw;
                  bitField0_ |= 0x00000400;
                }
                break;
              } // case 88
              case 96: {
                decredStakingTicket_ = input.readBool();
                bitField0_ |= 0x00000800;
                break;
              } // case 96
              case 104: {
                serialize_ = input.readBool();
                bitField0_ |= 0x00001000;
                break;
              } // case 104
              case 114: {
                input.readMessage(
                    getCoinjoinRequestFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00002000;
                break;
              } // case 114
              case 120: {
                chunkify_ = input.readBool();
                bitField0_ |= 0x00004000;
                break;
              } // case 120
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int outputsCount_ ;
      /**
       * <pre>
       * number of transaction outputs
       * </pre>
       *
       * <code>required uint32 outputs_count = 1;</code>
       * @return Whether the outputsCount field is set.
       */
      @java.lang.Override
      public boolean hasOutputsCount() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * number of transaction outputs
       * </pre>
       *
       * <code>required uint32 outputs_count = 1;</code>
       * @return The outputsCount.
       */
      @java.lang.Override
      public int getOutputsCount() {
        return outputsCount_;
      }
      /**
       * <pre>
       * number of transaction outputs
       * </pre>
       *
       * <code>required uint32 outputs_count = 1;</code>
       * @param value The outputsCount to set.
       * @return This builder for chaining.
       */
      public Builder setOutputsCount(int value) {

        outputsCount_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * number of transaction outputs
       * </pre>
       *
       * <code>required uint32 outputs_count = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearOutputsCount() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outputsCount_ = 0;
        onChanged();
        return this;
      }

      private int inputsCount_ ;
      /**
       * <pre>
       * number of transaction inputs
       * </pre>
       *
       * <code>required uint32 inputs_count = 2;</code>
       * @return Whether the inputsCount field is set.
       */
      @java.lang.Override
      public boolean hasInputsCount() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * number of transaction inputs
       * </pre>
       *
       * <code>required uint32 inputs_count = 2;</code>
       * @return The inputsCount.
       */
      @java.lang.Override
      public int getInputsCount() {
        return inputsCount_;
      }
      /**
       * <pre>
       * number of transaction inputs
       * </pre>
       *
       * <code>required uint32 inputs_count = 2;</code>
       * @param value The inputsCount to set.
       * @return This builder for chaining.
       */
      public Builder setInputsCount(int value) {

        inputsCount_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * number of transaction inputs
       * </pre>
       *
       * <code>required uint32 inputs_count = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearInputsCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        inputsCount_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object coinName_ = "Bitcoin";
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
       * @return Whether the coinName field is set.
       */
      public boolean hasCoinName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
       * @return The coinName.
       */
      public java.lang.String getCoinName() {
        java.lang.Object ref = coinName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            coinName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
       * @return The bytes for coinName.
       */
      public com.google.protobuf.ByteString
          getCoinNameBytes() {
        java.lang.Object ref = coinName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          coinName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
       * @param value The coinName to set.
       * @return This builder for chaining.
       */
      public Builder setCoinName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        coinName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
       * @return This builder for chaining.
       */
      public Builder clearCoinName() {
        coinName_ = getDefaultInstance().getCoinName();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 3 [default = "Bitcoin"];</code>
       * @param value The bytes for coinName to set.
       * @return This builder for chaining.
       */
      public Builder setCoinNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        coinName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private int version_ = 1;
      /**
       * <pre>
       * transaction version
       * </pre>
       *
       * <code>optional uint32 version = 4 [default = 1];</code>
       * @return Whether the version field is set.
       */
      @java.lang.Override
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * transaction version
       * </pre>
       *
       * <code>optional uint32 version = 4 [default = 1];</code>
       * @return The version.
       */
      @java.lang.Override
      public int getVersion() {
        return version_;
      }
      /**
       * <pre>
       * transaction version
       * </pre>
       *
       * <code>optional uint32 version = 4 [default = 1];</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(int value) {

        version_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * transaction version
       * </pre>
       *
       * <code>optional uint32 version = 4 [default = 1];</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000008);
        version_ = 1;
        onChanged();
        return this;
      }

      private int lockTime_ ;
      /**
       * <pre>
       * transaction lock_time
       * </pre>
       *
       * <code>optional uint32 lock_time = 5 [default = 0];</code>
       * @return Whether the lockTime field is set.
       */
      @java.lang.Override
      public boolean hasLockTime() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * transaction lock_time
       * </pre>
       *
       * <code>optional uint32 lock_time = 5 [default = 0];</code>
       * @return The lockTime.
       */
      @java.lang.Override
      public int getLockTime() {
        return lockTime_;
      }
      /**
       * <pre>
       * transaction lock_time
       * </pre>
       *
       * <code>optional uint32 lock_time = 5 [default = 0];</code>
       * @param value The lockTime to set.
       * @return This builder for chaining.
       */
      public Builder setLockTime(int value) {

        lockTime_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * transaction lock_time
       * </pre>
       *
       * <code>optional uint32 lock_time = 5 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearLockTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        lockTime_ = 0;
        onChanged();
        return this;
      }

      private int expiry_ ;
      /**
       * <pre>
       * only for Decred and Zcash
       * </pre>
       *
       * <code>optional uint32 expiry = 6;</code>
       * @return Whether the expiry field is set.
       */
      @java.lang.Override
      public boolean hasExpiry() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * only for Decred and Zcash
       * </pre>
       *
       * <code>optional uint32 expiry = 6;</code>
       * @return The expiry.
       */
      @java.lang.Override
      public int getExpiry() {
        return expiry_;
      }
      /**
       * <pre>
       * only for Decred and Zcash
       * </pre>
       *
       * <code>optional uint32 expiry = 6;</code>
       * @param value The expiry to set.
       * @return This builder for chaining.
       */
      public Builder setExpiry(int value) {

        expiry_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * only for Decred and Zcash
       * </pre>
       *
       * <code>optional uint32 expiry = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearExpiry() {
        bitField0_ = (bitField0_ & ~0x00000020);
        expiry_ = 0;
        onChanged();
        return this;
      }

      private boolean overwintered_ ;
      /**
       * <pre>
       * deprecated in 2.3.2, the field is not needed as it can be derived from `version`
       * </pre>
       *
       * <code>optional bool overwintered = 7 [deprecated = true];</code>
       * @deprecated hw.trezor.messages.bitcoin.SignTx.overwintered is deprecated.
       *     See messages-bitcoin.proto;l=197
       * @return Whether the overwintered field is set.
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean hasOverwintered() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * deprecated in 2.3.2, the field is not needed as it can be derived from `version`
       * </pre>
       *
       * <code>optional bool overwintered = 7 [deprecated = true];</code>
       * @deprecated hw.trezor.messages.bitcoin.SignTx.overwintered is deprecated.
       *     See messages-bitcoin.proto;l=197
       * @return The overwintered.
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean getOverwintered() {
        return overwintered_;
      }
      /**
       * <pre>
       * deprecated in 2.3.2, the field is not needed as it can be derived from `version`
       * </pre>
       *
       * <code>optional bool overwintered = 7 [deprecated = true];</code>
       * @deprecated hw.trezor.messages.bitcoin.SignTx.overwintered is deprecated.
       *     See messages-bitcoin.proto;l=197
       * @param value The overwintered to set.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder setOverwintered(boolean value) {

        overwintered_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * deprecated in 2.3.2, the field is not needed as it can be derived from `version`
       * </pre>
       *
       * <code>optional bool overwintered = 7 [deprecated = true];</code>
       * @deprecated hw.trezor.messages.bitcoin.SignTx.overwintered is deprecated.
       *     See messages-bitcoin.proto;l=197
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder clearOverwintered() {
        bitField0_ = (bitField0_ & ~0x00000040);
        overwintered_ = false;
        onChanged();
        return this;
      }

      private int versionGroupId_ ;
      /**
       * <pre>
       * only for Zcash, nVersionGroupId
       * </pre>
       *
       * <code>optional uint32 version_group_id = 8;</code>
       * @return Whether the versionGroupId field is set.
       */
      @java.lang.Override
      public boolean hasVersionGroupId() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * only for Zcash, nVersionGroupId
       * </pre>
       *
       * <code>optional uint32 version_group_id = 8;</code>
       * @return The versionGroupId.
       */
      @java.lang.Override
      public int getVersionGroupId() {
        return versionGroupId_;
      }
      /**
       * <pre>
       * only for Zcash, nVersionGroupId
       * </pre>
       *
       * <code>optional uint32 version_group_id = 8;</code>
       * @param value The versionGroupId to set.
       * @return This builder for chaining.
       */
      public Builder setVersionGroupId(int value) {

        versionGroupId_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * only for Zcash, nVersionGroupId
       * </pre>
       *
       * <code>optional uint32 version_group_id = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersionGroupId() {
        bitField0_ = (bitField0_ & ~0x00000080);
        versionGroupId_ = 0;
        onChanged();
        return this;
      }

      private int timestamp_ ;
      /**
       * <pre>
       * only for Peercoin
       * </pre>
       *
       * <code>optional uint32 timestamp = 9;</code>
       * @return Whether the timestamp field is set.
       */
      @java.lang.Override
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * only for Peercoin
       * </pre>
       *
       * <code>optional uint32 timestamp = 9;</code>
       * @return The timestamp.
       */
      @java.lang.Override
      public int getTimestamp() {
        return timestamp_;
      }
      /**
       * <pre>
       * only for Peercoin
       * </pre>
       *
       * <code>optional uint32 timestamp = 9;</code>
       * @param value The timestamp to set.
       * @return This builder for chaining.
       */
      public Builder setTimestamp(int value) {

        timestamp_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * only for Peercoin
       * </pre>
       *
       * <code>optional uint32 timestamp = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000100);
        timestamp_ = 0;
        onChanged();
        return this;
      }

      private int branchId_ ;
      /**
       * <pre>
       * only for Zcash, BRANCH_ID
       * </pre>
       *
       * <code>optional uint32 branch_id = 10;</code>
       * @return Whether the branchId field is set.
       */
      @java.lang.Override
      public boolean hasBranchId() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       * only for Zcash, BRANCH_ID
       * </pre>
       *
       * <code>optional uint32 branch_id = 10;</code>
       * @return The branchId.
       */
      @java.lang.Override
      public int getBranchId() {
        return branchId_;
      }
      /**
       * <pre>
       * only for Zcash, BRANCH_ID
       * </pre>
       *
       * <code>optional uint32 branch_id = 10;</code>
       * @param value The branchId to set.
       * @return This builder for chaining.
       */
      public Builder setBranchId(int value) {

        branchId_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * only for Zcash, BRANCH_ID
       * </pre>
       *
       * <code>optional uint32 branch_id = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearBranchId() {
        bitField0_ = (bitField0_ & ~0x00000200);
        branchId_ = 0;
        onChanged();
        return this;
      }

      private int amountUnit_ = 0;
      /**
       * <pre>
       * show amounts in
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.AmountUnit amount_unit = 11 [default = BITCOIN];</code>
       * @return Whether the amountUnit field is set.
       */
      @java.lang.Override public boolean hasAmountUnit() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       * show amounts in
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.AmountUnit amount_unit = 11 [default = BITCOIN];</code>
       * @return The amountUnit.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit getAmountUnit() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit.forNumber(amountUnit_);
        return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit.BITCOIN : result;
      }
      /**
       * <pre>
       * show amounts in
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.AmountUnit amount_unit = 11 [default = BITCOIN];</code>
       * @param value The amountUnit to set.
       * @return This builder for chaining.
       */
      public Builder setAmountUnit(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000400;
        amountUnit_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * show amounts in
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.AmountUnit amount_unit = 11 [default = BITCOIN];</code>
       * @return This builder for chaining.
       */
      public Builder clearAmountUnit() {
        bitField0_ = (bitField0_ & ~0x00000400);
        amountUnit_ = 0;
        onChanged();
        return this;
      }

      private boolean decredStakingTicket_ ;
      /**
       * <pre>
       * only for Decred, this is signing a ticket purchase
       * </pre>
       *
       * <code>optional bool decred_staking_ticket = 12 [default = false];</code>
       * @return Whether the decredStakingTicket field is set.
       */
      @java.lang.Override
      public boolean hasDecredStakingTicket() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <pre>
       * only for Decred, this is signing a ticket purchase
       * </pre>
       *
       * <code>optional bool decred_staking_ticket = 12 [default = false];</code>
       * @return The decredStakingTicket.
       */
      @java.lang.Override
      public boolean getDecredStakingTicket() {
        return decredStakingTicket_;
      }
      /**
       * <pre>
       * only for Decred, this is signing a ticket purchase
       * </pre>
       *
       * <code>optional bool decred_staking_ticket = 12 [default = false];</code>
       * @param value The decredStakingTicket to set.
       * @return This builder for chaining.
       */
      public Builder setDecredStakingTicket(boolean value) {

        decredStakingTicket_ = value;
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * only for Decred, this is signing a ticket purchase
       * </pre>
       *
       * <code>optional bool decred_staking_ticket = 12 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearDecredStakingTicket() {
        bitField0_ = (bitField0_ & ~0x00000800);
        decredStakingTicket_ = false;
        onChanged();
        return this;
      }

      private boolean serialize_ = true;
      /**
       * <pre>
       * serialize the full transaction, as opposed to only outputting the signatures
       * </pre>
       *
       * <code>optional bool serialize = 13 [default = true];</code>
       * @return Whether the serialize field is set.
       */
      @java.lang.Override
      public boolean hasSerialize() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <pre>
       * serialize the full transaction, as opposed to only outputting the signatures
       * </pre>
       *
       * <code>optional bool serialize = 13 [default = true];</code>
       * @return The serialize.
       */
      @java.lang.Override
      public boolean getSerialize() {
        return serialize_;
      }
      /**
       * <pre>
       * serialize the full transaction, as opposed to only outputting the signatures
       * </pre>
       *
       * <code>optional bool serialize = 13 [default = true];</code>
       * @param value The serialize to set.
       * @return This builder for chaining.
       */
      public Builder setSerialize(boolean value) {

        serialize_ = value;
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * serialize the full transaction, as opposed to only outputting the signatures
       * </pre>
       *
       * <code>optional bool serialize = 13 [default = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearSerialize() {
        bitField0_ = (bitField0_ & ~0x00001000);
        serialize_ = true;
        onChanged();
        return this;
      }

      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest coinjoinRequest_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequestOrBuilder> coinjoinRequestBuilder_;
      /**
       * <pre>
       * only for preauthorized CoinJoins
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest coinjoin_request = 14;</code>
       * @return Whether the coinjoinRequest field is set.
       */
      public boolean hasCoinjoinRequest() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <pre>
       * only for preauthorized CoinJoins
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest coinjoin_request = 14;</code>
       * @return The coinjoinRequest.
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest getCoinjoinRequest() {
        if (coinjoinRequestBuilder_ == null) {
          return coinjoinRequest_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest.getDefaultInstance() : coinjoinRequest_;
        } else {
          return coinjoinRequestBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * only for preauthorized CoinJoins
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest coinjoin_request = 14;</code>
       */
      public Builder setCoinjoinRequest(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest value) {
        if (coinjoinRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          coinjoinRequest_ = value;
        } else {
          coinjoinRequestBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * only for preauthorized CoinJoins
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest coinjoin_request = 14;</code>
       */
      public Builder setCoinjoinRequest(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest.Builder builderForValue) {
        if (coinjoinRequestBuilder_ == null) {
          coinjoinRequest_ = builderForValue.build();
        } else {
          coinjoinRequestBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * only for preauthorized CoinJoins
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest coinjoin_request = 14;</code>
       */
      public Builder mergeCoinjoinRequest(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest value) {
        if (coinjoinRequestBuilder_ == null) {
          if (((bitField0_ & 0x00002000) != 0) &&
            coinjoinRequest_ != null &&
            coinjoinRequest_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest.getDefaultInstance()) {
            getCoinjoinRequestBuilder().mergeFrom(value);
          } else {
            coinjoinRequest_ = value;
          }
        } else {
          coinjoinRequestBuilder_.mergeFrom(value);
        }
        if (coinjoinRequest_ != null) {
          bitField0_ |= 0x00002000;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * only for preauthorized CoinJoins
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest coinjoin_request = 14;</code>
       */
      public Builder clearCoinjoinRequest() {
        bitField0_ = (bitField0_ & ~0x00002000);
        coinjoinRequest_ = null;
        if (coinjoinRequestBuilder_ != null) {
          coinjoinRequestBuilder_.dispose();
          coinjoinRequestBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * only for preauthorized CoinJoins
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest coinjoin_request = 14;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest.Builder getCoinjoinRequestBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getCoinjoinRequestFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * only for preauthorized CoinJoins
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest coinjoin_request = 14;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequestOrBuilder getCoinjoinRequestOrBuilder() {
        if (coinjoinRequestBuilder_ != null) {
          return coinjoinRequestBuilder_.getMessageOrBuilder();
        } else {
          return coinjoinRequest_ == null ?
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest.getDefaultInstance() : coinjoinRequest_;
        }
      }
      /**
       * <pre>
       * only for preauthorized CoinJoins
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest coinjoin_request = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequestOrBuilder> 
          getCoinjoinRequestFieldBuilder() {
        if (coinjoinRequestBuilder_ == null) {
          coinjoinRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequest.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx.CoinJoinRequestOrBuilder>(
                  getCoinjoinRequest(),
                  getParentForChildren(),
                  isClean());
          coinjoinRequest_ = null;
        }
        return coinjoinRequestBuilder_;
      }

      private boolean chunkify_ ;
      /**
       * <pre>
       * display the address in chunks of 4 characters
       * </pre>
       *
       * <code>optional bool chunkify = 15;</code>
       * @return Whether the chunkify field is set.
       */
      @java.lang.Override
      public boolean hasChunkify() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <pre>
       * display the address in chunks of 4 characters
       * </pre>
       *
       * <code>optional bool chunkify = 15;</code>
       * @return The chunkify.
       */
      @java.lang.Override
      public boolean getChunkify() {
        return chunkify_;
      }
      /**
       * <pre>
       * display the address in chunks of 4 characters
       * </pre>
       *
       * <code>optional bool chunkify = 15;</code>
       * @param value The chunkify to set.
       * @return This builder for chaining.
       */
      public Builder setChunkify(boolean value) {

        chunkify_ = value;
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * display the address in chunks of 4 characters
       * </pre>
       *
       * <code>optional bool chunkify = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearChunkify() {
        bitField0_ = (bitField0_ & ~0x00004000);
        chunkify_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.SignTx)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.SignTx)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SignTx>
        PARSER = new com.google.protobuf.AbstractParser<SignTx>() {
      @java.lang.Override
      public SignTx parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SignTx> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SignTx> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.SignTx getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TxRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * what should be filled in TxAck message?
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.TxRequest.RequestType request_type = 1;</code>
     * @return Whether the requestType field is set.
     */
    boolean hasRequestType();
    /**
     * <pre>
     * what should be filled in TxAck message?
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.TxRequest.RequestType request_type = 1;</code>
     * @return The requestType.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.RequestType getRequestType();

    /**
     * <pre>
     * request for tx details
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType details = 2;</code>
     * @return Whether the details field is set.
     */
    boolean hasDetails();
    /**
     * <pre>
     * request for tx details
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType details = 2;</code>
     * @return The details.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType getDetails();
    /**
     * <pre>
     * request for tx details
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType details = 2;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsTypeOrBuilder getDetailsOrBuilder();

    /**
     * <pre>
     * serialized data and request for next
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType serialized = 3;</code>
     * @return Whether the serialized field is set.
     */
    boolean hasSerialized();
    /**
     * <pre>
     * serialized data and request for next
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType serialized = 3;</code>
     * @return The serialized.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType getSerialized();
    /**
     * <pre>
     * serialized data and request for next
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType serialized = 3;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedTypeOrBuilder getSerializedOrBuilder();
  }
  /**
   * <pre>
   * *
   * Response: Device asks for information for signing transaction or returns the last result
   * If request_index is set, device awaits TxAck&lt;any&gt; matching the request type.
   * If signature_index is set, 'signature' contains signed input of signature_index's input
   * &#64;end
   * &#64;next TxAckInput
   * &#64;next TxAckOutput
   * &#64;next TxAckPrevMeta
   * &#64;next TxAckPrevInput
   * &#64;next TxAckPrevOutput
   * &#64;next TxAckPrevExtraData
   * &#64;next TxAckPaymentRequest
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.TxRequest}
   */
  public static final class TxRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxRequest)
      TxRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        TxRequest.class.getName());
    }
    // Use TxRequest.newBuilder() to construct.
    private TxRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TxRequest() {
      requestType_ = 0;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.Builder.class);
    }

    /**
     * <pre>
     * *
     * Type of information required by transaction signing process
     * </pre>
     *
     * Protobuf enum {@code hw.trezor.messages.bitcoin.TxRequest.RequestType}
     */
    public enum RequestType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TXINPUT = 0;</code>
       */
      TXINPUT(0),
      /**
       * <code>TXOUTPUT = 1;</code>
       */
      TXOUTPUT(1),
      /**
       * <code>TXMETA = 2;</code>
       */
      TXMETA(2),
      /**
       * <code>TXFINISHED = 3;</code>
       */
      TXFINISHED(3),
      /**
       * <code>TXEXTRADATA = 4;</code>
       */
      TXEXTRADATA(4),
      /**
       * <code>TXORIGINPUT = 5;</code>
       */
      TXORIGINPUT(5),
      /**
       * <code>TXORIGOUTPUT = 6;</code>
       */
      TXORIGOUTPUT(6),
      /**
       * <code>TXPAYMENTREQ = 7;</code>
       */
      TXPAYMENTREQ(7),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          RequestType.class.getName());
      }
      /**
       * <code>TXINPUT = 0;</code>
       */
      public static final int TXINPUT_VALUE = 0;
      /**
       * <code>TXOUTPUT = 1;</code>
       */
      public static final int TXOUTPUT_VALUE = 1;
      /**
       * <code>TXMETA = 2;</code>
       */
      public static final int TXMETA_VALUE = 2;
      /**
       * <code>TXFINISHED = 3;</code>
       */
      public static final int TXFINISHED_VALUE = 3;
      /**
       * <code>TXEXTRADATA = 4;</code>
       */
      public static final int TXEXTRADATA_VALUE = 4;
      /**
       * <code>TXORIGINPUT = 5;</code>
       */
      public static final int TXORIGINPUT_VALUE = 5;
      /**
       * <code>TXORIGOUTPUT = 6;</code>
       */
      public static final int TXORIGOUTPUT_VALUE = 6;
      /**
       * <code>TXPAYMENTREQ = 7;</code>
       */
      public static final int TXPAYMENTREQ_VALUE = 7;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RequestType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static RequestType forNumber(int value) {
        switch (value) {
          case 0: return TXINPUT;
          case 1: return TXOUTPUT;
          case 2: return TXMETA;
          case 3: return TXFINISHED;
          case 4: return TXEXTRADATA;
          case 5: return TXORIGINPUT;
          case 6: return TXORIGOUTPUT;
          case 7: return TXPAYMENTREQ;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<RequestType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          RequestType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RequestType>() {
              public RequestType findValueByNumber(int number) {
                return RequestType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.getDescriptor().getEnumTypes().get(0);
      }

      private static final RequestType[] VALUES = values();

      public static RequestType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private RequestType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:hw.trezor.messages.bitcoin.TxRequest.RequestType)
    }

    public interface TxRequestDetailsTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * device expects TxAck message from the computer
       * </pre>
       *
       * <code>optional uint32 request_index = 1;</code>
       * @return Whether the requestIndex field is set.
       */
      boolean hasRequestIndex();
      /**
       * <pre>
       * device expects TxAck message from the computer
       * </pre>
       *
       * <code>optional uint32 request_index = 1;</code>
       * @return The requestIndex.
       */
      int getRequestIndex();

      /**
       * <pre>
       * tx_hash of requested transaction
       * </pre>
       *
       * <code>optional bytes tx_hash = 2;</code>
       * @return Whether the txHash field is set.
       */
      boolean hasTxHash();
      /**
       * <pre>
       * tx_hash of requested transaction
       * </pre>
       *
       * <code>optional bytes tx_hash = 2;</code>
       * @return The txHash.
       */
      com.google.protobuf.ByteString getTxHash();

      /**
       * <pre>
       * length of requested extra data (only for Dash, Zcash)
       * </pre>
       *
       * <code>optional uint32 extra_data_len = 3;</code>
       * @return Whether the extraDataLen field is set.
       */
      boolean hasExtraDataLen();
      /**
       * <pre>
       * length of requested extra data (only for Dash, Zcash)
       * </pre>
       *
       * <code>optional uint32 extra_data_len = 3;</code>
       * @return The extraDataLen.
       */
      int getExtraDataLen();

      /**
       * <pre>
       * offset of requested extra data (only for Dash, Zcash)
       * </pre>
       *
       * <code>optional uint32 extra_data_offset = 4;</code>
       * @return Whether the extraDataOffset field is set.
       */
      boolean hasExtraDataOffset();
      /**
       * <pre>
       * offset of requested extra data (only for Dash, Zcash)
       * </pre>
       *
       * <code>optional uint32 extra_data_offset = 4;</code>
       * @return The extraDataOffset.
       */
      int getExtraDataOffset();
    }
    /**
     * <pre>
     * *
     * Structure representing request details
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType}
     */
    public static final class TxRequestDetailsType extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType)
        TxRequestDetailsTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          TxRequestDetailsType.class.getName());
      }
      // Use TxRequestDetailsType.newBuilder() to construct.
      private TxRequestDetailsType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private TxRequestDetailsType() {
        txHash_ = com.google.protobuf.ByteString.EMPTY;
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestDetailsType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestDetailsType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType.Builder.class);
      }

      private int bitField0_;
      public static final int REQUEST_INDEX_FIELD_NUMBER = 1;
      private int requestIndex_ = 0;
      /**
       * <pre>
       * device expects TxAck message from the computer
       * </pre>
       *
       * <code>optional uint32 request_index = 1;</code>
       * @return Whether the requestIndex field is set.
       */
      @java.lang.Override
      public boolean hasRequestIndex() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * device expects TxAck message from the computer
       * </pre>
       *
       * <code>optional uint32 request_index = 1;</code>
       * @return The requestIndex.
       */
      @java.lang.Override
      public int getRequestIndex() {
        return requestIndex_;
      }

      public static final int TX_HASH_FIELD_NUMBER = 2;
      private com.google.protobuf.ByteString txHash_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * tx_hash of requested transaction
       * </pre>
       *
       * <code>optional bytes tx_hash = 2;</code>
       * @return Whether the txHash field is set.
       */
      @java.lang.Override
      public boolean hasTxHash() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * tx_hash of requested transaction
       * </pre>
       *
       * <code>optional bytes tx_hash = 2;</code>
       * @return The txHash.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getTxHash() {
        return txHash_;
      }

      public static final int EXTRA_DATA_LEN_FIELD_NUMBER = 3;
      private int extraDataLen_ = 0;
      /**
       * <pre>
       * length of requested extra data (only for Dash, Zcash)
       * </pre>
       *
       * <code>optional uint32 extra_data_len = 3;</code>
       * @return Whether the extraDataLen field is set.
       */
      @java.lang.Override
      public boolean hasExtraDataLen() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * length of requested extra data (only for Dash, Zcash)
       * </pre>
       *
       * <code>optional uint32 extra_data_len = 3;</code>
       * @return The extraDataLen.
       */
      @java.lang.Override
      public int getExtraDataLen() {
        return extraDataLen_;
      }

      public static final int EXTRA_DATA_OFFSET_FIELD_NUMBER = 4;
      private int extraDataOffset_ = 0;
      /**
       * <pre>
       * offset of requested extra data (only for Dash, Zcash)
       * </pre>
       *
       * <code>optional uint32 extra_data_offset = 4;</code>
       * @return Whether the extraDataOffset field is set.
       */
      @java.lang.Override
      public boolean hasExtraDataOffset() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * offset of requested extra data (only for Dash, Zcash)
       * </pre>
       *
       * <code>optional uint32 extra_data_offset = 4;</code>
       * @return The extraDataOffset.
       */
      @java.lang.Override
      public int getExtraDataOffset() {
        return extraDataOffset_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt32(1, requestIndex_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeBytes(2, txHash_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeUInt32(3, extraDataLen_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeUInt32(4, extraDataOffset_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, requestIndex_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, txHash_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, extraDataLen_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(4, extraDataOffset_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType) obj;

        if (hasRequestIndex() != other.hasRequestIndex()) return false;
        if (hasRequestIndex()) {
          if (getRequestIndex()
              != other.getRequestIndex()) return false;
        }
        if (hasTxHash() != other.hasTxHash()) return false;
        if (hasTxHash()) {
          if (!getTxHash()
              .equals(other.getTxHash())) return false;
        }
        if (hasExtraDataLen() != other.hasExtraDataLen()) return false;
        if (hasExtraDataLen()) {
          if (getExtraDataLen()
              != other.getExtraDataLen()) return false;
        }
        if (hasExtraDataOffset() != other.hasExtraDataOffset()) return false;
        if (hasExtraDataOffset()) {
          if (getExtraDataOffset()
              != other.getExtraDataOffset()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasRequestIndex()) {
          hash = (37 * hash) + REQUEST_INDEX_FIELD_NUMBER;
          hash = (53 * hash) + getRequestIndex();
        }
        if (hasTxHash()) {
          hash = (37 * hash) + TX_HASH_FIELD_NUMBER;
          hash = (53 * hash) + getTxHash().hashCode();
        }
        if (hasExtraDataLen()) {
          hash = (37 * hash) + EXTRA_DATA_LEN_FIELD_NUMBER;
          hash = (53 * hash) + getExtraDataLen();
        }
        if (hasExtraDataOffset()) {
          hash = (37 * hash) + EXTRA_DATA_OFFSET_FIELD_NUMBER;
          hash = (53 * hash) + getExtraDataOffset();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * *
       * Structure representing request details
       * </pre>
       *
       * Protobuf type {@code hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType)
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestDetailsType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestDetailsType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          requestIndex_ = 0;
          txHash_ = com.google.protobuf.ByteString.EMPTY;
          extraDataLen_ = 0;
          extraDataOffset_ = 0;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestDetailsType_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType getDefaultInstanceForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType build() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType buildPartial() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.requestIndex_ = requestIndex_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.txHash_ = txHash_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.extraDataLen_ = extraDataLen_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.extraDataOffset_ = extraDataOffset_;
            to_bitField0_ |= 0x00000008;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType) {
            return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType other) {
          if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType.getDefaultInstance()) return this;
          if (other.hasRequestIndex()) {
            setRequestIndex(other.getRequestIndex());
          }
          if (other.hasTxHash()) {
            setTxHash(other.getTxHash());
          }
          if (other.hasExtraDataLen()) {
            setExtraDataLen(other.getExtraDataLen());
          }
          if (other.hasExtraDataOffset()) {
            setExtraDataOffset(other.getExtraDataOffset());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  requestIndex_ = input.readUInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 18: {
                  txHash_ = input.readBytes();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                case 24: {
                  extraDataLen_ = input.readUInt32();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
                case 32: {
                  extraDataOffset_ = input.readUInt32();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 32
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int requestIndex_ ;
        /**
         * <pre>
         * device expects TxAck message from the computer
         * </pre>
         *
         * <code>optional uint32 request_index = 1;</code>
         * @return Whether the requestIndex field is set.
         */
        @java.lang.Override
        public boolean hasRequestIndex() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * device expects TxAck message from the computer
         * </pre>
         *
         * <code>optional uint32 request_index = 1;</code>
         * @return The requestIndex.
         */
        @java.lang.Override
        public int getRequestIndex() {
          return requestIndex_;
        }
        /**
         * <pre>
         * device expects TxAck message from the computer
         * </pre>
         *
         * <code>optional uint32 request_index = 1;</code>
         * @param value The requestIndex to set.
         * @return This builder for chaining.
         */
        public Builder setRequestIndex(int value) {

          requestIndex_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * device expects TxAck message from the computer
         * </pre>
         *
         * <code>optional uint32 request_index = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearRequestIndex() {
          bitField0_ = (bitField0_ & ~0x00000001);
          requestIndex_ = 0;
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString txHash_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * tx_hash of requested transaction
         * </pre>
         *
         * <code>optional bytes tx_hash = 2;</code>
         * @return Whether the txHash field is set.
         */
        @java.lang.Override
        public boolean hasTxHash() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * tx_hash of requested transaction
         * </pre>
         *
         * <code>optional bytes tx_hash = 2;</code>
         * @return The txHash.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getTxHash() {
          return txHash_;
        }
        /**
         * <pre>
         * tx_hash of requested transaction
         * </pre>
         *
         * <code>optional bytes tx_hash = 2;</code>
         * @param value The txHash to set.
         * @return This builder for chaining.
         */
        public Builder setTxHash(com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          txHash_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * tx_hash of requested transaction
         * </pre>
         *
         * <code>optional bytes tx_hash = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearTxHash() {
          bitField0_ = (bitField0_ & ~0x00000002);
          txHash_ = getDefaultInstance().getTxHash();
          onChanged();
          return this;
        }

        private int extraDataLen_ ;
        /**
         * <pre>
         * length of requested extra data (only for Dash, Zcash)
         * </pre>
         *
         * <code>optional uint32 extra_data_len = 3;</code>
         * @return Whether the extraDataLen field is set.
         */
        @java.lang.Override
        public boolean hasExtraDataLen() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * length of requested extra data (only for Dash, Zcash)
         * </pre>
         *
         * <code>optional uint32 extra_data_len = 3;</code>
         * @return The extraDataLen.
         */
        @java.lang.Override
        public int getExtraDataLen() {
          return extraDataLen_;
        }
        /**
         * <pre>
         * length of requested extra data (only for Dash, Zcash)
         * </pre>
         *
         * <code>optional uint32 extra_data_len = 3;</code>
         * @param value The extraDataLen to set.
         * @return This builder for chaining.
         */
        public Builder setExtraDataLen(int value) {

          extraDataLen_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * length of requested extra data (only for Dash, Zcash)
         * </pre>
         *
         * <code>optional uint32 extra_data_len = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearExtraDataLen() {
          bitField0_ = (bitField0_ & ~0x00000004);
          extraDataLen_ = 0;
          onChanged();
          return this;
        }

        private int extraDataOffset_ ;
        /**
         * <pre>
         * offset of requested extra data (only for Dash, Zcash)
         * </pre>
         *
         * <code>optional uint32 extra_data_offset = 4;</code>
         * @return Whether the extraDataOffset field is set.
         */
        @java.lang.Override
        public boolean hasExtraDataOffset() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * offset of requested extra data (only for Dash, Zcash)
         * </pre>
         *
         * <code>optional uint32 extra_data_offset = 4;</code>
         * @return The extraDataOffset.
         */
        @java.lang.Override
        public int getExtraDataOffset() {
          return extraDataOffset_;
        }
        /**
         * <pre>
         * offset of requested extra data (only for Dash, Zcash)
         * </pre>
         *
         * <code>optional uint32 extra_data_offset = 4;</code>
         * @param value The extraDataOffset to set.
         * @return This builder for chaining.
         */
        public Builder setExtraDataOffset(int value) {

          extraDataOffset_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * offset of requested extra data (only for Dash, Zcash)
         * </pre>
         *
         * <code>optional uint32 extra_data_offset = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearExtraDataOffset() {
          bitField0_ = (bitField0_ & ~0x00000008);
          extraDataOffset_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType)
      }

      // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType)
      private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType();
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TxRequestDetailsType>
          PARSER = new com.google.protobuf.AbstractParser<TxRequestDetailsType>() {
        @java.lang.Override
        public TxRequestDetailsType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TxRequestDetailsType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TxRequestDetailsType> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TxRequestSerializedTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * 'signature' field contains signed input of this index
       * </pre>
       *
       * <code>optional uint32 signature_index = 1;</code>
       * @return Whether the signatureIndex field is set.
       */
      boolean hasSignatureIndex();
      /**
       * <pre>
       * 'signature' field contains signed input of this index
       * </pre>
       *
       * <code>optional uint32 signature_index = 1;</code>
       * @return The signatureIndex.
       */
      int getSignatureIndex();

      /**
       * <pre>
       * signature of the signature_index input
       * </pre>
       *
       * <code>optional bytes signature = 2;</code>
       * @return Whether the signature field is set.
       */
      boolean hasSignature();
      /**
       * <pre>
       * signature of the signature_index input
       * </pre>
       *
       * <code>optional bytes signature = 2;</code>
       * @return The signature.
       */
      com.google.protobuf.ByteString getSignature();

      /**
       * <pre>
       * part of serialized and signed transaction
       * </pre>
       *
       * <code>optional bytes serialized_tx = 3;</code>
       * @return Whether the serializedTx field is set.
       */
      boolean hasSerializedTx();
      /**
       * <pre>
       * part of serialized and signed transaction
       * </pre>
       *
       * <code>optional bytes serialized_tx = 3;</code>
       * @return The serializedTx.
       */
      com.google.protobuf.ByteString getSerializedTx();
    }
    /**
     * <pre>
     * *
     * Structure representing serialized data
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType}
     */
    public static final class TxRequestSerializedType extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType)
        TxRequestSerializedTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          TxRequestSerializedType.class.getName());
      }
      // Use TxRequestSerializedType.newBuilder() to construct.
      private TxRequestSerializedType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private TxRequestSerializedType() {
        signature_ = com.google.protobuf.ByteString.EMPTY;
        serializedTx_ = com.google.protobuf.ByteString.EMPTY;
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestSerializedType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestSerializedType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType.Builder.class);
      }

      private int bitField0_;
      public static final int SIGNATURE_INDEX_FIELD_NUMBER = 1;
      private int signatureIndex_ = 0;
      /**
       * <pre>
       * 'signature' field contains signed input of this index
       * </pre>
       *
       * <code>optional uint32 signature_index = 1;</code>
       * @return Whether the signatureIndex field is set.
       */
      @java.lang.Override
      public boolean hasSignatureIndex() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * 'signature' field contains signed input of this index
       * </pre>
       *
       * <code>optional uint32 signature_index = 1;</code>
       * @return The signatureIndex.
       */
      @java.lang.Override
      public int getSignatureIndex() {
        return signatureIndex_;
      }

      public static final int SIGNATURE_FIELD_NUMBER = 2;
      private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * signature of the signature_index input
       * </pre>
       *
       * <code>optional bytes signature = 2;</code>
       * @return Whether the signature field is set.
       */
      @java.lang.Override
      public boolean hasSignature() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * signature of the signature_index input
       * </pre>
       *
       * <code>optional bytes signature = 2;</code>
       * @return The signature.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSignature() {
        return signature_;
      }

      public static final int SERIALIZED_TX_FIELD_NUMBER = 3;
      private com.google.protobuf.ByteString serializedTx_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * part of serialized and signed transaction
       * </pre>
       *
       * <code>optional bytes serialized_tx = 3;</code>
       * @return Whether the serializedTx field is set.
       */
      @java.lang.Override
      public boolean hasSerializedTx() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * part of serialized and signed transaction
       * </pre>
       *
       * <code>optional bytes serialized_tx = 3;</code>
       * @return The serializedTx.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSerializedTx() {
        return serializedTx_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt32(1, signatureIndex_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeBytes(2, signature_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeBytes(3, serializedTx_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, signatureIndex_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, signature_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(3, serializedTx_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType) obj;

        if (hasSignatureIndex() != other.hasSignatureIndex()) return false;
        if (hasSignatureIndex()) {
          if (getSignatureIndex()
              != other.getSignatureIndex()) return false;
        }
        if (hasSignature() != other.hasSignature()) return false;
        if (hasSignature()) {
          if (!getSignature()
              .equals(other.getSignature())) return false;
        }
        if (hasSerializedTx() != other.hasSerializedTx()) return false;
        if (hasSerializedTx()) {
          if (!getSerializedTx()
              .equals(other.getSerializedTx())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasSignatureIndex()) {
          hash = (37 * hash) + SIGNATURE_INDEX_FIELD_NUMBER;
          hash = (53 * hash) + getSignatureIndex();
        }
        if (hasSignature()) {
          hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
          hash = (53 * hash) + getSignature().hashCode();
        }
        if (hasSerializedTx()) {
          hash = (37 * hash) + SERIALIZED_TX_FIELD_NUMBER;
          hash = (53 * hash) + getSerializedTx().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * *
       * Structure representing serialized data
       * </pre>
       *
       * Protobuf type {@code hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType)
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestSerializedType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestSerializedType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          signatureIndex_ = 0;
          signature_ = com.google.protobuf.ByteString.EMPTY;
          serializedTx_ = com.google.protobuf.ByteString.EMPTY;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestSerializedType_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType getDefaultInstanceForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType build() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType buildPartial() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.signatureIndex_ = signatureIndex_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.signature_ = signature_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.serializedTx_ = serializedTx_;
            to_bitField0_ |= 0x00000004;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType) {
            return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType other) {
          if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType.getDefaultInstance()) return this;
          if (other.hasSignatureIndex()) {
            setSignatureIndex(other.getSignatureIndex());
          }
          if (other.hasSignature()) {
            setSignature(other.getSignature());
          }
          if (other.hasSerializedTx()) {
            setSerializedTx(other.getSerializedTx());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  signatureIndex_ = input.readUInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 18: {
                  signature_ = input.readBytes();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                case 26: {
                  serializedTx_ = input.readBytes();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 26
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int signatureIndex_ ;
        /**
         * <pre>
         * 'signature' field contains signed input of this index
         * </pre>
         *
         * <code>optional uint32 signature_index = 1;</code>
         * @return Whether the signatureIndex field is set.
         */
        @java.lang.Override
        public boolean hasSignatureIndex() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * 'signature' field contains signed input of this index
         * </pre>
         *
         * <code>optional uint32 signature_index = 1;</code>
         * @return The signatureIndex.
         */
        @java.lang.Override
        public int getSignatureIndex() {
          return signatureIndex_;
        }
        /**
         * <pre>
         * 'signature' field contains signed input of this index
         * </pre>
         *
         * <code>optional uint32 signature_index = 1;</code>
         * @param value The signatureIndex to set.
         * @return This builder for chaining.
         */
        public Builder setSignatureIndex(int value) {

          signatureIndex_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * 'signature' field contains signed input of this index
         * </pre>
         *
         * <code>optional uint32 signature_index = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearSignatureIndex() {
          bitField0_ = (bitField0_ & ~0x00000001);
          signatureIndex_ = 0;
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * signature of the signature_index input
         * </pre>
         *
         * <code>optional bytes signature = 2;</code>
         * @return Whether the signature field is set.
         */
        @java.lang.Override
        public boolean hasSignature() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * signature of the signature_index input
         * </pre>
         *
         * <code>optional bytes signature = 2;</code>
         * @return The signature.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getSignature() {
          return signature_;
        }
        /**
         * <pre>
         * signature of the signature_index input
         * </pre>
         *
         * <code>optional bytes signature = 2;</code>
         * @param value The signature to set.
         * @return This builder for chaining.
         */
        public Builder setSignature(com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          signature_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * signature of the signature_index input
         * </pre>
         *
         * <code>optional bytes signature = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearSignature() {
          bitField0_ = (bitField0_ & ~0x00000002);
          signature_ = getDefaultInstance().getSignature();
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString serializedTx_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * part of serialized and signed transaction
         * </pre>
         *
         * <code>optional bytes serialized_tx = 3;</code>
         * @return Whether the serializedTx field is set.
         */
        @java.lang.Override
        public boolean hasSerializedTx() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * part of serialized and signed transaction
         * </pre>
         *
         * <code>optional bytes serialized_tx = 3;</code>
         * @return The serializedTx.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getSerializedTx() {
          return serializedTx_;
        }
        /**
         * <pre>
         * part of serialized and signed transaction
         * </pre>
         *
         * <code>optional bytes serialized_tx = 3;</code>
         * @param value The serializedTx to set.
         * @return This builder for chaining.
         */
        public Builder setSerializedTx(com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          serializedTx_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * part of serialized and signed transaction
         * </pre>
         *
         * <code>optional bytes serialized_tx = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearSerializedTx() {
          bitField0_ = (bitField0_ & ~0x00000004);
          serializedTx_ = getDefaultInstance().getSerializedTx();
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType)
      }

      // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType)
      private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType();
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TxRequestSerializedType>
          PARSER = new com.google.protobuf.AbstractParser<TxRequestSerializedType>() {
        @java.lang.Override
        public TxRequestSerializedType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TxRequestSerializedType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TxRequestSerializedType> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int REQUEST_TYPE_FIELD_NUMBER = 1;
    private int requestType_ = 0;
    /**
     * <pre>
     * what should be filled in TxAck message?
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.TxRequest.RequestType request_type = 1;</code>
     * @return Whether the requestType field is set.
     */
    @java.lang.Override public boolean hasRequestType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * what should be filled in TxAck message?
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.TxRequest.RequestType request_type = 1;</code>
     * @return The requestType.
     */
    @java.lang.Override public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.RequestType getRequestType() {
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.RequestType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.RequestType.forNumber(requestType_);
      return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.RequestType.TXINPUT : result;
    }

    public static final int DETAILS_FIELD_NUMBER = 2;
    private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType details_;
    /**
     * <pre>
     * request for tx details
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType details = 2;</code>
     * @return Whether the details field is set.
     */
    @java.lang.Override
    public boolean hasDetails() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * request for tx details
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType details = 2;</code>
     * @return The details.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType getDetails() {
      return details_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType.getDefaultInstance() : details_;
    }
    /**
     * <pre>
     * request for tx details
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType details = 2;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsTypeOrBuilder getDetailsOrBuilder() {
      return details_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType.getDefaultInstance() : details_;
    }

    public static final int SERIALIZED_FIELD_NUMBER = 3;
    private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType serialized_;
    /**
     * <pre>
     * serialized data and request for next
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType serialized = 3;</code>
     * @return Whether the serialized field is set.
     */
    @java.lang.Override
    public boolean hasSerialized() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * serialized data and request for next
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType serialized = 3;</code>
     * @return The serialized.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType getSerialized() {
      return serialized_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType.getDefaultInstance() : serialized_;
    }
    /**
     * <pre>
     * serialized data and request for next
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType serialized = 3;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedTypeOrBuilder getSerializedOrBuilder() {
      return serialized_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType.getDefaultInstance() : serialized_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeEnum(1, requestType_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getDetails());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getSerialized());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, requestType_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getDetails());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getSerialized());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest) obj;

      if (hasRequestType() != other.hasRequestType()) return false;
      if (hasRequestType()) {
        if (requestType_ != other.requestType_) return false;
      }
      if (hasDetails() != other.hasDetails()) return false;
      if (hasDetails()) {
        if (!getDetails()
            .equals(other.getDetails())) return false;
      }
      if (hasSerialized() != other.hasSerialized()) return false;
      if (hasSerialized()) {
        if (!getSerialized()
            .equals(other.getSerialized())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasRequestType()) {
        hash = (37 * hash) + REQUEST_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + requestType_;
      }
      if (hasDetails()) {
        hash = (37 * hash) + DETAILS_FIELD_NUMBER;
        hash = (53 * hash) + getDetails().hashCode();
      }
      if (hasSerialized()) {
        hash = (37 * hash) + SERIALIZED_FIELD_NUMBER;
        hash = (53 * hash) + getSerialized().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Response: Device asks for information for signing transaction or returns the last result
     * If request_index is set, device awaits TxAck&lt;any&gt; matching the request type.
     * If signature_index is set, 'signature' contains signed input of signature_index's input
     * &#64;end
     * &#64;next TxAckInput
     * &#64;next TxAckOutput
     * &#64;next TxAckPrevMeta
     * &#64;next TxAckPrevInput
     * &#64;next TxAckPrevOutput
     * &#64;next TxAckPrevExtraData
     * &#64;next TxAckPaymentRequest
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxRequest)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getDetailsFieldBuilder();
          getSerializedFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        requestType_ = 0;
        details_ = null;
        if (detailsBuilder_ != null) {
          detailsBuilder_.dispose();
          detailsBuilder_ = null;
        }
        serialized_ = null;
        if (serializedBuilder_ != null) {
          serializedBuilder_.dispose();
          serializedBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxRequest_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.requestType_ = requestType_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.details_ = detailsBuilder_ == null
              ? details_
              : detailsBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.serialized_ = serializedBuilder_ == null
              ? serialized_
              : serializedBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.getDefaultInstance()) return this;
        if (other.hasRequestType()) {
          setRequestType(other.getRequestType());
        }
        if (other.hasDetails()) {
          mergeDetails(other.getDetails());
        }
        if (other.hasSerialized()) {
          mergeSerialized(other.getSerialized());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int tmpRaw = input.readEnum();
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.RequestType tmpValue =
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.RequestType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(1, tmpRaw);
                } else {
                  requestType_ = tmpRaw;
                  bitField0_ |= 0x00000001;
                }
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getDetailsFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getSerializedFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int requestType_ = 0;
      /**
       * <pre>
       * what should be filled in TxAck message?
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.RequestType request_type = 1;</code>
       * @return Whether the requestType field is set.
       */
      @java.lang.Override public boolean hasRequestType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * what should be filled in TxAck message?
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.RequestType request_type = 1;</code>
       * @return The requestType.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.RequestType getRequestType() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.RequestType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.RequestType.forNumber(requestType_);
        return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.RequestType.TXINPUT : result;
      }
      /**
       * <pre>
       * what should be filled in TxAck message?
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.RequestType request_type = 1;</code>
       * @param value The requestType to set.
       * @return This builder for chaining.
       */
      public Builder setRequestType(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.RequestType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        requestType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * what should be filled in TxAck message?
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.RequestType request_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearRequestType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        requestType_ = 0;
        onChanged();
        return this;
      }

      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType details_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsTypeOrBuilder> detailsBuilder_;
      /**
       * <pre>
       * request for tx details
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType details = 2;</code>
       * @return Whether the details field is set.
       */
      public boolean hasDetails() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * request for tx details
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType details = 2;</code>
       * @return The details.
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType getDetails() {
        if (detailsBuilder_ == null) {
          return details_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType.getDefaultInstance() : details_;
        } else {
          return detailsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * request for tx details
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType details = 2;</code>
       */
      public Builder setDetails(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType value) {
        if (detailsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          details_ = value;
        } else {
          detailsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * request for tx details
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType details = 2;</code>
       */
      public Builder setDetails(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType.Builder builderForValue) {
        if (detailsBuilder_ == null) {
          details_ = builderForValue.build();
        } else {
          detailsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * request for tx details
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType details = 2;</code>
       */
      public Builder mergeDetails(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType value) {
        if (detailsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            details_ != null &&
            details_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType.getDefaultInstance()) {
            getDetailsBuilder().mergeFrom(value);
          } else {
            details_ = value;
          }
        } else {
          detailsBuilder_.mergeFrom(value);
        }
        if (details_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * request for tx details
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType details = 2;</code>
       */
      public Builder clearDetails() {
        bitField0_ = (bitField0_ & ~0x00000002);
        details_ = null;
        if (detailsBuilder_ != null) {
          detailsBuilder_.dispose();
          detailsBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * request for tx details
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType details = 2;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType.Builder getDetailsBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getDetailsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * request for tx details
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType details = 2;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsTypeOrBuilder getDetailsOrBuilder() {
        if (detailsBuilder_ != null) {
          return detailsBuilder_.getMessageOrBuilder();
        } else {
          return details_ == null ?
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType.getDefaultInstance() : details_;
        }
      }
      /**
       * <pre>
       * request for tx details
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType details = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsTypeOrBuilder> 
          getDetailsFieldBuilder() {
        if (detailsBuilder_ == null) {
          detailsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestDetailsTypeOrBuilder>(
                  getDetails(),
                  getParentForChildren(),
                  isClean());
          details_ = null;
        }
        return detailsBuilder_;
      }

      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType serialized_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedTypeOrBuilder> serializedBuilder_;
      /**
       * <pre>
       * serialized data and request for next
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType serialized = 3;</code>
       * @return Whether the serialized field is set.
       */
      public boolean hasSerialized() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * serialized data and request for next
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType serialized = 3;</code>
       * @return The serialized.
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType getSerialized() {
        if (serializedBuilder_ == null) {
          return serialized_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType.getDefaultInstance() : serialized_;
        } else {
          return serializedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * serialized data and request for next
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType serialized = 3;</code>
       */
      public Builder setSerialized(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType value) {
        if (serializedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          serialized_ = value;
        } else {
          serializedBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * serialized data and request for next
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType serialized = 3;</code>
       */
      public Builder setSerialized(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType.Builder builderForValue) {
        if (serializedBuilder_ == null) {
          serialized_ = builderForValue.build();
        } else {
          serializedBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * serialized data and request for next
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType serialized = 3;</code>
       */
      public Builder mergeSerialized(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType value) {
        if (serializedBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            serialized_ != null &&
            serialized_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType.getDefaultInstance()) {
            getSerializedBuilder().mergeFrom(value);
          } else {
            serialized_ = value;
          }
        } else {
          serializedBuilder_.mergeFrom(value);
        }
        if (serialized_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * serialized data and request for next
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType serialized = 3;</code>
       */
      public Builder clearSerialized() {
        bitField0_ = (bitField0_ & ~0x00000004);
        serialized_ = null;
        if (serializedBuilder_ != null) {
          serializedBuilder_.dispose();
          serializedBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * serialized data and request for next
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType serialized = 3;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType.Builder getSerializedBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getSerializedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * serialized data and request for next
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType serialized = 3;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedTypeOrBuilder getSerializedOrBuilder() {
        if (serializedBuilder_ != null) {
          return serializedBuilder_.getMessageOrBuilder();
        } else {
          return serialized_ == null ?
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType.getDefaultInstance() : serialized_;
        }
      }
      /**
       * <pre>
       * serialized data and request for next
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType serialized = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedTypeOrBuilder> 
          getSerializedFieldBuilder() {
        if (serializedBuilder_ == null) {
          serializedBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest.TxRequestSerializedTypeOrBuilder>(
                  getSerialized(),
                  getParentForChildren(),
                  isClean());
          serialized_ = null;
        }
        return serializedBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxRequest)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxRequest)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TxRequest>
        PARSER = new com.google.protobuf.AbstractParser<TxRequest>() {
      @java.lang.Override
      public TxRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TxRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TxRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  @java.lang.Deprecated public interface TxAckOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAck)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .hw.trezor.messages.bitcoin.TxAck.TransactionType tx = 1;</code>
     * @return Whether the tx field is set.
     */
    boolean hasTx();
    /**
     * <code>optional .hw.trezor.messages.bitcoin.TxAck.TransactionType tx = 1;</code>
     * @return The tx.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType getTx();
    /**
     * <code>optional .hw.trezor.messages.bitcoin.TxAck.TransactionType tx = 1;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionTypeOrBuilder getTxOrBuilder();
  }
  /**
   * <pre>
   * *
   * Request: Reported transaction data (legacy)
   *
   * This message contains all possible field that can be sent in response to a TxRequest.
   * Depending on the request_type, the host is supposed to fill some of these fields.
   *
   * The interface is wire-compatible with the new method of specialized TxAck subtypes,
   * so it can be used in the old way. However, it is now recommended to use more
   * specialized messages, which have better-configured constraints on field values.
   *
   * &#64;next TxRequest
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.TxAck}
   */
  @java.lang.Deprecated public static final class TxAck extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAck)
      TxAckOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        TxAck.class.getName());
    }
    // Use TxAck.newBuilder() to construct.
    private TxAck(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TxAck() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.Builder.class);
    }

    public interface TransactionTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAck.TransactionType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional uint32 version = 1;</code>
       * @return Whether the version field is set.
       */
      boolean hasVersion();
      /**
       * <code>optional uint32 version = 1;</code>
       * @return The version.
       */
      int getVersion();

      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
       */
      java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType> 
          getInputsList();
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType getInputs(int index);
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
       */
      int getInputsCount();
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
       */
      java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputTypeOrBuilder> 
          getInputsOrBuilderList();
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputTypeOrBuilder getInputsOrBuilder(
          int index);

      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
       */
      java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType> 
          getBinOutputsList();
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType getBinOutputs(int index);
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
       */
      int getBinOutputsCount();
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
       */
      java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinTypeOrBuilder> 
          getBinOutputsOrBuilderList();
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinTypeOrBuilder getBinOutputsOrBuilder(
          int index);

      /**
       * <code>optional uint32 lock_time = 4;</code>
       * @return Whether the lockTime field is set.
       */
      boolean hasLockTime();
      /**
       * <code>optional uint32 lock_time = 4;</code>
       * @return The lockTime.
       */
      int getLockTime();

      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
       */
      java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType> 
          getOutputsList();
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType getOutputs(int index);
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
       */
      int getOutputsCount();
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
       */
      java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputTypeOrBuilder> 
          getOutputsOrBuilderList();
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputTypeOrBuilder getOutputsOrBuilder(
          int index);

      /**
       * <code>optional uint32 inputs_cnt = 6;</code>
       * @return Whether the inputsCnt field is set.
       */
      boolean hasInputsCnt();
      /**
       * <code>optional uint32 inputs_cnt = 6;</code>
       * @return The inputsCnt.
       */
      int getInputsCnt();

      /**
       * <code>optional uint32 outputs_cnt = 7;</code>
       * @return Whether the outputsCnt field is set.
       */
      boolean hasOutputsCnt();
      /**
       * <code>optional uint32 outputs_cnt = 7;</code>
       * @return The outputsCnt.
       */
      int getOutputsCnt();

      /**
       * <pre>
       * only for Dash, Zcash
       * </pre>
       *
       * <code>optional bytes extra_data = 8;</code>
       * @return Whether the extraData field is set.
       */
      boolean hasExtraData();
      /**
       * <pre>
       * only for Dash, Zcash
       * </pre>
       *
       * <code>optional bytes extra_data = 8;</code>
       * @return The extraData.
       */
      com.google.protobuf.ByteString getExtraData();

      /**
       * <pre>
       * only for Dash, Zcash
       * </pre>
       *
       * <code>optional uint32 extra_data_len = 9;</code>
       * @return Whether the extraDataLen field is set.
       */
      boolean hasExtraDataLen();
      /**
       * <pre>
       * only for Dash, Zcash
       * </pre>
       *
       * <code>optional uint32 extra_data_len = 9;</code>
       * @return The extraDataLen.
       */
      int getExtraDataLen();

      /**
       * <pre>
       * only for Decred and Zcash
       * </pre>
       *
       * <code>optional uint32 expiry = 10;</code>
       * @return Whether the expiry field is set.
       */
      boolean hasExpiry();
      /**
       * <pre>
       * only for Decred and Zcash
       * </pre>
       *
       * <code>optional uint32 expiry = 10;</code>
       * @return The expiry.
       */
      int getExpiry();

      /**
       * <pre>
       * Zcash only; deprecated in 2.3.2, the field is not needed, it can be derived from `version`
       * </pre>
       *
       * <code>optional bool overwintered = 11 [deprecated = true];</code>
       * @deprecated hw.trezor.messages.bitcoin.TxAck.TransactionType.overwintered is deprecated.
       *     See messages-bitcoin.proto;l=298
       * @return Whether the overwintered field is set.
       */
      @java.lang.Deprecated boolean hasOverwintered();
      /**
       * <pre>
       * Zcash only; deprecated in 2.3.2, the field is not needed, it can be derived from `version`
       * </pre>
       *
       * <code>optional bool overwintered = 11 [deprecated = true];</code>
       * @deprecated hw.trezor.messages.bitcoin.TxAck.TransactionType.overwintered is deprecated.
       *     See messages-bitcoin.proto;l=298
       * @return The overwintered.
       */
      @java.lang.Deprecated boolean getOverwintered();

      /**
       * <pre>
       * only for Zcash, nVersionGroupId
       * </pre>
       *
       * <code>optional uint32 version_group_id = 12;</code>
       * @return Whether the versionGroupId field is set.
       */
      boolean hasVersionGroupId();
      /**
       * <pre>
       * only for Zcash, nVersionGroupId
       * </pre>
       *
       * <code>optional uint32 version_group_id = 12;</code>
       * @return The versionGroupId.
       */
      int getVersionGroupId();

      /**
       * <pre>
       * only for Peercoin
       * </pre>
       *
       * <code>optional uint32 timestamp = 13;</code>
       * @return Whether the timestamp field is set.
       */
      boolean hasTimestamp();
      /**
       * <pre>
       * only for Peercoin
       * </pre>
       *
       * <code>optional uint32 timestamp = 13;</code>
       * @return The timestamp.
       */
      int getTimestamp();

      /**
       * <pre>
       * only for Zcash, BRANCH_ID
       * </pre>
       *
       * <code>optional uint32 branch_id = 14;</code>
       * @return Whether the branchId field is set.
       */
      boolean hasBranchId();
      /**
       * <pre>
       * only for Zcash, BRANCH_ID
       * </pre>
       *
       * <code>optional uint32 branch_id = 14;</code>
       * @return The branchId.
       */
      int getBranchId();
    }
    /**
     * <pre>
     * *
     * Structure representing transaction
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAck.TransactionType}
     */
    public static final class TransactionType extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAck.TransactionType)
        TransactionTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          TransactionType.class.getName());
      }
      // Use TransactionType.newBuilder() to construct.
      private TransactionType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private TransactionType() {
        inputs_ = java.util.Collections.emptyList();
        binOutputs_ = java.util.Collections.emptyList();
        outputs_ = java.util.Collections.emptyList();
        extraData_ = com.google.protobuf.ByteString.EMPTY;
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.Builder.class);
      }

      public interface TxInputTypeOrBuilder extends
          // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * BIP-32 path to derive the key from master node
         * </pre>
         *
         * <code>repeated uint32 address_n = 1;</code>
         * @return A list containing the addressN.
         */
        java.util.List<java.lang.Integer> getAddressNList();
        /**
         * <pre>
         * BIP-32 path to derive the key from master node
         * </pre>
         *
         * <code>repeated uint32 address_n = 1;</code>
         * @return The count of addressN.
         */
        int getAddressNCount();
        /**
         * <pre>
         * BIP-32 path to derive the key from master node
         * </pre>
         *
         * <code>repeated uint32 address_n = 1;</code>
         * @param index The index of the element to return.
         * @return The addressN at the given index.
         */
        int getAddressN(int index);

        /**
         * <pre>
         * hash of previous transaction output to spend by this input
         * </pre>
         *
         * <code>required bytes prev_hash = 2;</code>
         * @return Whether the prevHash field is set.
         */
        boolean hasPrevHash();
        /**
         * <pre>
         * hash of previous transaction output to spend by this input
         * </pre>
         *
         * <code>required bytes prev_hash = 2;</code>
         * @return The prevHash.
         */
        com.google.protobuf.ByteString getPrevHash();

        /**
         * <pre>
         * index of previous output to spend
         * </pre>
         *
         * <code>required uint32 prev_index = 3;</code>
         * @return Whether the prevIndex field is set.
         */
        boolean hasPrevIndex();
        /**
         * <pre>
         * index of previous output to spend
         * </pre>
         *
         * <code>required uint32 prev_index = 3;</code>
         * @return The prevIndex.
         */
        int getPrevIndex();

        /**
         * <pre>
         * script signature, unset for tx to sign
         * </pre>
         *
         * <code>optional bytes script_sig = 4;</code>
         * @return Whether the scriptSig field is set.
         */
        boolean hasScriptSig();
        /**
         * <pre>
         * script signature, unset for tx to sign
         * </pre>
         *
         * <code>optional bytes script_sig = 4;</code>
         * @return The scriptSig.
         */
        com.google.protobuf.ByteString getScriptSig();

        /**
         * <pre>
         * sequence (default=0xffffffff)
         * </pre>
         *
         * <code>optional uint32 sequence = 5 [default = 4294967295];</code>
         * @return Whether the sequence field is set.
         */
        boolean hasSequence();
        /**
         * <pre>
         * sequence (default=0xffffffff)
         * </pre>
         *
         * <code>optional uint32 sequence = 5 [default = 4294967295];</code>
         * @return The sequence.
         */
        int getSequence();

        /**
         * <pre>
         * defines template of input script
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 6 [default = SPENDADDRESS];</code>
         * @return Whether the scriptType field is set.
         */
        boolean hasScriptType();
        /**
         * <pre>
         * defines template of input script
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 6 [default = SPENDADDRESS];</code>
         * @return The scriptType.
         */
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType();

        /**
         * <pre>
         * Filled if input is going to spend multisig tx
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
         * @return Whether the multisig field is set.
         */
        boolean hasMultisig();
        /**
         * <pre>
         * Filled if input is going to spend multisig tx
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
         * @return The multisig.
         */
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig();
        /**
         * <pre>
         * Filled if input is going to spend multisig tx
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
         */
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder();

        /**
         * <pre>
         * amount of previous transaction output (for segwit only)
         * </pre>
         *
         * <code>optional uint64 amount = 8;</code>
         * @return Whether the amount field is set.
         */
        boolean hasAmount();
        /**
         * <pre>
         * amount of previous transaction output (for segwit only)
         * </pre>
         *
         * <code>optional uint64 amount = 8;</code>
         * @return The amount.
         */
        long getAmount();

        /**
         * <pre>
         * only for Decred, 0 is a normal transaction while 1 is a stake transaction
         * </pre>
         *
         * <code>optional uint32 decred_tree = 9;</code>
         * @return Whether the decredTree field is set.
         */
        boolean hasDecredTree();
        /**
         * <pre>
         * only for Decred, 0 is a normal transaction while 1 is a stake transaction
         * </pre>
         *
         * <code>optional uint32 decred_tree = 9;</code>
         * @return The decredTree.
         */
        int getDecredTree();

        /**
         * <pre>
         * optional uint32 decred_script_version = 10;                         // only for Decred  // deprecated -&gt; only 0 is supported
         * optional bytes prev_block_hash_bip115 = 11;     // BIP-115 support dropped
         * optional uint32 prev_block_height_bip115 = 12;  // BIP-115 support dropped
         * </pre>
         *
         * <code>optional bytes witness = 13;</code>
         * @return Whether the witness field is set.
         */
        boolean hasWitness();
        /**
         * <pre>
         * optional uint32 decred_script_version = 10;                         // only for Decred  // deprecated -&gt; only 0 is supported
         * optional bytes prev_block_hash_bip115 = 11;     // BIP-115 support dropped
         * optional uint32 prev_block_height_bip115 = 12;  // BIP-115 support dropped
         * </pre>
         *
         * <code>optional bytes witness = 13;</code>
         * @return The witness.
         */
        com.google.protobuf.ByteString getWitness();

        /**
         * <pre>
         * SLIP-0019 proof of ownership, only set for EXTERNAL inputs
         * </pre>
         *
         * <code>optional bytes ownership_proof = 14;</code>
         * @return Whether the ownershipProof field is set.
         */
        boolean hasOwnershipProof();
        /**
         * <pre>
         * SLIP-0019 proof of ownership, only set for EXTERNAL inputs
         * </pre>
         *
         * <code>optional bytes ownership_proof = 14;</code>
         * @return The ownershipProof.
         */
        com.google.protobuf.ByteString getOwnershipProof();

        /**
         * <pre>
         * optional commitment data for the SLIP-0019 proof of ownership
         * </pre>
         *
         * <code>optional bytes commitment_data = 15;</code>
         * @return Whether the commitmentData field is set.
         */
        boolean hasCommitmentData();
        /**
         * <pre>
         * optional commitment data for the SLIP-0019 proof of ownership
         * </pre>
         *
         * <code>optional bytes commitment_data = 15;</code>
         * @return The commitmentData.
         */
        com.google.protobuf.ByteString getCommitmentData();

        /**
         * <pre>
         * tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
         * </pre>
         *
         * <code>optional bytes orig_hash = 16;</code>
         * @return Whether the origHash field is set.
         */
        boolean hasOrigHash();
        /**
         * <pre>
         * tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
         * </pre>
         *
         * <code>optional bytes orig_hash = 16;</code>
         * @return The origHash.
         */
        com.google.protobuf.ByteString getOrigHash();

        /**
         * <pre>
         * index of the input in the original transaction (used when creating a replacement transaction)
         * </pre>
         *
         * <code>optional uint32 orig_index = 17;</code>
         * @return Whether the origIndex field is set.
         */
        boolean hasOrigIndex();
        /**
         * <pre>
         * index of the input in the original transaction (used when creating a replacement transaction)
         * </pre>
         *
         * <code>optional uint32 orig_index = 17;</code>
         * @return The origIndex.
         */
        int getOrigIndex();

        /**
         * <pre>
         * if not None this holds the type of stake spend: revocation or stake generation
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.DecredStakingSpendType decred_staking_spend = 18;</code>
         * @return Whether the decredStakingSpend field is set.
         */
        boolean hasDecredStakingSpend();
        /**
         * <pre>
         * if not None this holds the type of stake spend: revocation or stake generation
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.DecredStakingSpendType decred_staking_spend = 18;</code>
         * @return The decredStakingSpend.
         */
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType getDecredStakingSpend();

        /**
         * <pre>
         * scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
         * </pre>
         *
         * <code>optional bytes script_pubkey = 19;</code>
         * @return Whether the scriptPubkey field is set.
         */
        boolean hasScriptPubkey();
        /**
         * <pre>
         * scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
         * </pre>
         *
         * <code>optional bytes script_pubkey = 19;</code>
         * @return The scriptPubkey.
         */
        com.google.protobuf.ByteString getScriptPubkey();

        /**
         * <pre>
         * bit field of CoinJoin-specific flags
         * </pre>
         *
         * <code>optional uint32 coinjoin_flags = 20 [default = 0];</code>
         * @return Whether the coinjoinFlags field is set.
         */
        boolean hasCoinjoinFlags();
        /**
         * <pre>
         * bit field of CoinJoin-specific flags
         * </pre>
         *
         * <code>optional uint32 coinjoin_flags = 20 [default = 0];</code>
         * @return The coinjoinFlags.
         */
        int getCoinjoinFlags();
      }
      /**
       * <pre>
       * *
       * Structure representing transaction input
       * </pre>
       *
       * Protobuf type {@code hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType}
       */
      public static final class TxInputType extends
          com.google.protobuf.GeneratedMessage implements
          // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType)
          TxInputTypeOrBuilder {
      private static final long serialVersionUID = 0L;
        static {
          com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
            com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
            /* major= */ 4,
            /* minor= */ 28,
            /* patch= */ 3,
            /* suffix= */ "",
            TxInputType.class.getName());
        }
        // Use TxInputType.newBuilder() to construct.
        private TxInputType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
          super(builder);
        }
        private TxInputType() {
          addressN_ = emptyIntList();
          prevHash_ = com.google.protobuf.ByteString.EMPTY;
          scriptSig_ = com.google.protobuf.ByteString.EMPTY;
          sequence_ = -1;
          scriptType_ = 0;
          witness_ = com.google.protobuf.ByteString.EMPTY;
          ownershipProof_ = com.google.protobuf.ByteString.EMPTY;
          commitmentData_ = com.google.protobuf.ByteString.EMPTY;
          origHash_ = com.google.protobuf.ByteString.EMPTY;
          decredStakingSpend_ = 0;
          scriptPubkey_ = com.google.protobuf.ByteString.EMPTY;
        }

        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxInputType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxInputType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.Builder.class);
        }

        private int bitField0_;
        public static final int ADDRESS_N_FIELD_NUMBER = 1;
        @SuppressWarnings("serial")
        private com.google.protobuf.Internal.IntList addressN_ =
            emptyIntList();
        /**
         * <pre>
         * BIP-32 path to derive the key from master node
         * </pre>
         *
         * <code>repeated uint32 address_n = 1;</code>
         * @return A list containing the addressN.
         */
        @java.lang.Override
        public java.util.List<java.lang.Integer>
            getAddressNList() {
          return addressN_;
        }
        /**
         * <pre>
         * BIP-32 path to derive the key from master node
         * </pre>
         *
         * <code>repeated uint32 address_n = 1;</code>
         * @return The count of addressN.
         */
        public int getAddressNCount() {
          return addressN_.size();
        }
        /**
         * <pre>
         * BIP-32 path to derive the key from master node
         * </pre>
         *
         * <code>repeated uint32 address_n = 1;</code>
         * @param index The index of the element to return.
         * @return The addressN at the given index.
         */
        public int getAddressN(int index) {
          return addressN_.getInt(index);
        }

        public static final int PREV_HASH_FIELD_NUMBER = 2;
        private com.google.protobuf.ByteString prevHash_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * hash of previous transaction output to spend by this input
         * </pre>
         *
         * <code>required bytes prev_hash = 2;</code>
         * @return Whether the prevHash field is set.
         */
        @java.lang.Override
        public boolean hasPrevHash() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * hash of previous transaction output to spend by this input
         * </pre>
         *
         * <code>required bytes prev_hash = 2;</code>
         * @return The prevHash.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getPrevHash() {
          return prevHash_;
        }

        public static final int PREV_INDEX_FIELD_NUMBER = 3;
        private int prevIndex_ = 0;
        /**
         * <pre>
         * index of previous output to spend
         * </pre>
         *
         * <code>required uint32 prev_index = 3;</code>
         * @return Whether the prevIndex field is set.
         */
        @java.lang.Override
        public boolean hasPrevIndex() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * index of previous output to spend
         * </pre>
         *
         * <code>required uint32 prev_index = 3;</code>
         * @return The prevIndex.
         */
        @java.lang.Override
        public int getPrevIndex() {
          return prevIndex_;
        }

        public static final int SCRIPT_SIG_FIELD_NUMBER = 4;
        private com.google.protobuf.ByteString scriptSig_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * script signature, unset for tx to sign
         * </pre>
         *
         * <code>optional bytes script_sig = 4;</code>
         * @return Whether the scriptSig field is set.
         */
        @java.lang.Override
        public boolean hasScriptSig() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * script signature, unset for tx to sign
         * </pre>
         *
         * <code>optional bytes script_sig = 4;</code>
         * @return The scriptSig.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getScriptSig() {
          return scriptSig_;
        }

        public static final int SEQUENCE_FIELD_NUMBER = 5;
        private int sequence_ = -1;
        /**
         * <pre>
         * sequence (default=0xffffffff)
         * </pre>
         *
         * <code>optional uint32 sequence = 5 [default = 4294967295];</code>
         * @return Whether the sequence field is set.
         */
        @java.lang.Override
        public boolean hasSequence() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * sequence (default=0xffffffff)
         * </pre>
         *
         * <code>optional uint32 sequence = 5 [default = 4294967295];</code>
         * @return The sequence.
         */
        @java.lang.Override
        public int getSequence() {
          return sequence_;
        }

        public static final int SCRIPT_TYPE_FIELD_NUMBER = 6;
        private int scriptType_ = 0;
        /**
         * <pre>
         * defines template of input script
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 6 [default = SPENDADDRESS];</code>
         * @return Whether the scriptType field is set.
         */
        @java.lang.Override public boolean hasScriptType() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         * defines template of input script
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 6 [default = SPENDADDRESS];</code>
         * @return The scriptType.
         */
        @java.lang.Override public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(scriptType_);
          return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.SPENDADDRESS : result;
        }

        public static final int MULTISIG_FIELD_NUMBER = 7;
        private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType multisig_;
        /**
         * <pre>
         * Filled if input is going to spend multisig tx
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
         * @return Whether the multisig field is set.
         */
        @java.lang.Override
        public boolean hasMultisig() {
          return ((bitField0_ & 0x00000020) != 0);
        }
        /**
         * <pre>
         * Filled if input is going to spend multisig tx
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
         * @return The multisig.
         */
        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig() {
          return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
        }
        /**
         * <pre>
         * Filled if input is going to spend multisig tx
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
         */
        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder() {
          return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
        }

        public static final int AMOUNT_FIELD_NUMBER = 8;
        private long amount_ = 0L;
        /**
         * <pre>
         * amount of previous transaction output (for segwit only)
         * </pre>
         *
         * <code>optional uint64 amount = 8;</code>
         * @return Whether the amount field is set.
         */
        @java.lang.Override
        public boolean hasAmount() {
          return ((bitField0_ & 0x00000040) != 0);
        }
        /**
         * <pre>
         * amount of previous transaction output (for segwit only)
         * </pre>
         *
         * <code>optional uint64 amount = 8;</code>
         * @return The amount.
         */
        @java.lang.Override
        public long getAmount() {
          return amount_;
        }

        public static final int DECRED_TREE_FIELD_NUMBER = 9;
        private int decredTree_ = 0;
        /**
         * <pre>
         * only for Decred, 0 is a normal transaction while 1 is a stake transaction
         * </pre>
         *
         * <code>optional uint32 decred_tree = 9;</code>
         * @return Whether the decredTree field is set.
         */
        @java.lang.Override
        public boolean hasDecredTree() {
          return ((bitField0_ & 0x00000080) != 0);
        }
        /**
         * <pre>
         * only for Decred, 0 is a normal transaction while 1 is a stake transaction
         * </pre>
         *
         * <code>optional uint32 decred_tree = 9;</code>
         * @return The decredTree.
         */
        @java.lang.Override
        public int getDecredTree() {
          return decredTree_;
        }

        public static final int WITNESS_FIELD_NUMBER = 13;
        private com.google.protobuf.ByteString witness_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * optional uint32 decred_script_version = 10;                         // only for Decred  // deprecated -&gt; only 0 is supported
         * optional bytes prev_block_hash_bip115 = 11;     // BIP-115 support dropped
         * optional uint32 prev_block_height_bip115 = 12;  // BIP-115 support dropped
         * </pre>
         *
         * <code>optional bytes witness = 13;</code>
         * @return Whether the witness field is set.
         */
        @java.lang.Override
        public boolean hasWitness() {
          return ((bitField0_ & 0x00000100) != 0);
        }
        /**
         * <pre>
         * optional uint32 decred_script_version = 10;                         // only for Decred  // deprecated -&gt; only 0 is supported
         * optional bytes prev_block_hash_bip115 = 11;     // BIP-115 support dropped
         * optional uint32 prev_block_height_bip115 = 12;  // BIP-115 support dropped
         * </pre>
         *
         * <code>optional bytes witness = 13;</code>
         * @return The witness.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getWitness() {
          return witness_;
        }

        public static final int OWNERSHIP_PROOF_FIELD_NUMBER = 14;
        private com.google.protobuf.ByteString ownershipProof_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * SLIP-0019 proof of ownership, only set for EXTERNAL inputs
         * </pre>
         *
         * <code>optional bytes ownership_proof = 14;</code>
         * @return Whether the ownershipProof field is set.
         */
        @java.lang.Override
        public boolean hasOwnershipProof() {
          return ((bitField0_ & 0x00000200) != 0);
        }
        /**
         * <pre>
         * SLIP-0019 proof of ownership, only set for EXTERNAL inputs
         * </pre>
         *
         * <code>optional bytes ownership_proof = 14;</code>
         * @return The ownershipProof.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getOwnershipProof() {
          return ownershipProof_;
        }

        public static final int COMMITMENT_DATA_FIELD_NUMBER = 15;
        private com.google.protobuf.ByteString commitmentData_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * optional commitment data for the SLIP-0019 proof of ownership
         * </pre>
         *
         * <code>optional bytes commitment_data = 15;</code>
         * @return Whether the commitmentData field is set.
         */
        @java.lang.Override
        public boolean hasCommitmentData() {
          return ((bitField0_ & 0x00000400) != 0);
        }
        /**
         * <pre>
         * optional commitment data for the SLIP-0019 proof of ownership
         * </pre>
         *
         * <code>optional bytes commitment_data = 15;</code>
         * @return The commitmentData.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getCommitmentData() {
          return commitmentData_;
        }

        public static final int ORIG_HASH_FIELD_NUMBER = 16;
        private com.google.protobuf.ByteString origHash_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
         * </pre>
         *
         * <code>optional bytes orig_hash = 16;</code>
         * @return Whether the origHash field is set.
         */
        @java.lang.Override
        public boolean hasOrigHash() {
          return ((bitField0_ & 0x00000800) != 0);
        }
        /**
         * <pre>
         * tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
         * </pre>
         *
         * <code>optional bytes orig_hash = 16;</code>
         * @return The origHash.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getOrigHash() {
          return origHash_;
        }

        public static final int ORIG_INDEX_FIELD_NUMBER = 17;
        private int origIndex_ = 0;
        /**
         * <pre>
         * index of the input in the original transaction (used when creating a replacement transaction)
         * </pre>
         *
         * <code>optional uint32 orig_index = 17;</code>
         * @return Whether the origIndex field is set.
         */
        @java.lang.Override
        public boolean hasOrigIndex() {
          return ((bitField0_ & 0x00001000) != 0);
        }
        /**
         * <pre>
         * index of the input in the original transaction (used when creating a replacement transaction)
         * </pre>
         *
         * <code>optional uint32 orig_index = 17;</code>
         * @return The origIndex.
         */
        @java.lang.Override
        public int getOrigIndex() {
          return origIndex_;
        }

        public static final int DECRED_STAKING_SPEND_FIELD_NUMBER = 18;
        private int decredStakingSpend_ = 0;
        /**
         * <pre>
         * if not None this holds the type of stake spend: revocation or stake generation
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.DecredStakingSpendType decred_staking_spend = 18;</code>
         * @return Whether the decredStakingSpend field is set.
         */
        @java.lang.Override public boolean hasDecredStakingSpend() {
          return ((bitField0_ & 0x00002000) != 0);
        }
        /**
         * <pre>
         * if not None this holds the type of stake spend: revocation or stake generation
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.DecredStakingSpendType decred_staking_spend = 18;</code>
         * @return The decredStakingSpend.
         */
        @java.lang.Override public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType getDecredStakingSpend() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType.forNumber(decredStakingSpend_);
          return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType.SSGen : result;
        }

        public static final int SCRIPT_PUBKEY_FIELD_NUMBER = 19;
        private com.google.protobuf.ByteString scriptPubkey_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
         * </pre>
         *
         * <code>optional bytes script_pubkey = 19;</code>
         * @return Whether the scriptPubkey field is set.
         */
        @java.lang.Override
        public boolean hasScriptPubkey() {
          return ((bitField0_ & 0x00004000) != 0);
        }
        /**
         * <pre>
         * scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
         * </pre>
         *
         * <code>optional bytes script_pubkey = 19;</code>
         * @return The scriptPubkey.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getScriptPubkey() {
          return scriptPubkey_;
        }

        public static final int COINJOIN_FLAGS_FIELD_NUMBER = 20;
        private int coinjoinFlags_ = 0;
        /**
         * <pre>
         * bit field of CoinJoin-specific flags
         * </pre>
         *
         * <code>optional uint32 coinjoin_flags = 20 [default = 0];</code>
         * @return Whether the coinjoinFlags field is set.
         */
        @java.lang.Override
        public boolean hasCoinjoinFlags() {
          return ((bitField0_ & 0x00008000) != 0);
        }
        /**
         * <pre>
         * bit field of CoinJoin-specific flags
         * </pre>
         *
         * <code>optional uint32 coinjoin_flags = 20 [default = 0];</code>
         * @return The coinjoinFlags.
         */
        @java.lang.Override
        public int getCoinjoinFlags() {
          return coinjoinFlags_;
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          if (!hasPrevHash()) {
            memoizedIsInitialized = 0;
            return false;
          }
          if (!hasPrevIndex()) {
            memoizedIsInitialized = 0;
            return false;
          }
          if (hasMultisig()) {
            if (!getMultisig().isInitialized()) {
              memoizedIsInitialized = 0;
              return false;
            }
          }
          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          for (int i = 0; i < addressN_.size(); i++) {
            output.writeUInt32(1, addressN_.getInt(i));
          }
          if (((bitField0_ & 0x00000001) != 0)) {
            output.writeBytes(2, prevHash_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            output.writeUInt32(3, prevIndex_);
          }
          if (((bitField0_ & 0x00000004) != 0)) {
            output.writeBytes(4, scriptSig_);
          }
          if (((bitField0_ & 0x00000008) != 0)) {
            output.writeUInt32(5, sequence_);
          }
          if (((bitField0_ & 0x00000010) != 0)) {
            output.writeEnum(6, scriptType_);
          }
          if (((bitField0_ & 0x00000020) != 0)) {
            output.writeMessage(7, getMultisig());
          }
          if (((bitField0_ & 0x00000040) != 0)) {
            output.writeUInt64(8, amount_);
          }
          if (((bitField0_ & 0x00000080) != 0)) {
            output.writeUInt32(9, decredTree_);
          }
          if (((bitField0_ & 0x00000100) != 0)) {
            output.writeBytes(13, witness_);
          }
          if (((bitField0_ & 0x00000200) != 0)) {
            output.writeBytes(14, ownershipProof_);
          }
          if (((bitField0_ & 0x00000400) != 0)) {
            output.writeBytes(15, commitmentData_);
          }
          if (((bitField0_ & 0x00000800) != 0)) {
            output.writeBytes(16, origHash_);
          }
          if (((bitField0_ & 0x00001000) != 0)) {
            output.writeUInt32(17, origIndex_);
          }
          if (((bitField0_ & 0x00002000) != 0)) {
            output.writeEnum(18, decredStakingSpend_);
          }
          if (((bitField0_ & 0x00004000) != 0)) {
            output.writeBytes(19, scriptPubkey_);
          }
          if (((bitField0_ & 0x00008000) != 0)) {
            output.writeUInt32(20, coinjoinFlags_);
          }
          getUnknownFields().writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          {
            int dataSize = 0;
            for (int i = 0; i < addressN_.size(); i++) {
              dataSize += com.google.protobuf.CodedOutputStream
                .computeUInt32SizeNoTag(addressN_.getInt(i));
            }
            size += dataSize;
            size += 1 * getAddressNList().size();
          }
          if (((bitField0_ & 0x00000001) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeBytesSize(2, prevHash_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(3, prevIndex_);
          }
          if (((bitField0_ & 0x00000004) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeBytesSize(4, scriptSig_);
          }
          if (((bitField0_ & 0x00000008) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(5, sequence_);
          }
          if (((bitField0_ & 0x00000010) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeEnumSize(6, scriptType_);
          }
          if (((bitField0_ & 0x00000020) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(7, getMultisig());
          }
          if (((bitField0_ & 0x00000040) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt64Size(8, amount_);
          }
          if (((bitField0_ & 0x00000080) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(9, decredTree_);
          }
          if (((bitField0_ & 0x00000100) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeBytesSize(13, witness_);
          }
          if (((bitField0_ & 0x00000200) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeBytesSize(14, ownershipProof_);
          }
          if (((bitField0_ & 0x00000400) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeBytesSize(15, commitmentData_);
          }
          if (((bitField0_ & 0x00000800) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeBytesSize(16, origHash_);
          }
          if (((bitField0_ & 0x00001000) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(17, origIndex_);
          }
          if (((bitField0_ & 0x00002000) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeEnumSize(18, decredStakingSpend_);
          }
          if (((bitField0_ & 0x00004000) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeBytesSize(19, scriptPubkey_);
          }
          if (((bitField0_ & 0x00008000) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(20, coinjoinFlags_);
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType)) {
            return super.equals(obj);
          }
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType) obj;

          if (!getAddressNList()
              .equals(other.getAddressNList())) return false;
          if (hasPrevHash() != other.hasPrevHash()) return false;
          if (hasPrevHash()) {
            if (!getPrevHash()
                .equals(other.getPrevHash())) return false;
          }
          if (hasPrevIndex() != other.hasPrevIndex()) return false;
          if (hasPrevIndex()) {
            if (getPrevIndex()
                != other.getPrevIndex()) return false;
          }
          if (hasScriptSig() != other.hasScriptSig()) return false;
          if (hasScriptSig()) {
            if (!getScriptSig()
                .equals(other.getScriptSig())) return false;
          }
          if (hasSequence() != other.hasSequence()) return false;
          if (hasSequence()) {
            if (getSequence()
                != other.getSequence()) return false;
          }
          if (hasScriptType() != other.hasScriptType()) return false;
          if (hasScriptType()) {
            if (scriptType_ != other.scriptType_) return false;
          }
          if (hasMultisig() != other.hasMultisig()) return false;
          if (hasMultisig()) {
            if (!getMultisig()
                .equals(other.getMultisig())) return false;
          }
          if (hasAmount() != other.hasAmount()) return false;
          if (hasAmount()) {
            if (getAmount()
                != other.getAmount()) return false;
          }
          if (hasDecredTree() != other.hasDecredTree()) return false;
          if (hasDecredTree()) {
            if (getDecredTree()
                != other.getDecredTree()) return false;
          }
          if (hasWitness() != other.hasWitness()) return false;
          if (hasWitness()) {
            if (!getWitness()
                .equals(other.getWitness())) return false;
          }
          if (hasOwnershipProof() != other.hasOwnershipProof()) return false;
          if (hasOwnershipProof()) {
            if (!getOwnershipProof()
                .equals(other.getOwnershipProof())) return false;
          }
          if (hasCommitmentData() != other.hasCommitmentData()) return false;
          if (hasCommitmentData()) {
            if (!getCommitmentData()
                .equals(other.getCommitmentData())) return false;
          }
          if (hasOrigHash() != other.hasOrigHash()) return false;
          if (hasOrigHash()) {
            if (!getOrigHash()
                .equals(other.getOrigHash())) return false;
          }
          if (hasOrigIndex() != other.hasOrigIndex()) return false;
          if (hasOrigIndex()) {
            if (getOrigIndex()
                != other.getOrigIndex()) return false;
          }
          if (hasDecredStakingSpend() != other.hasDecredStakingSpend()) return false;
          if (hasDecredStakingSpend()) {
            if (decredStakingSpend_ != other.decredStakingSpend_) return false;
          }
          if (hasScriptPubkey() != other.hasScriptPubkey()) return false;
          if (hasScriptPubkey()) {
            if (!getScriptPubkey()
                .equals(other.getScriptPubkey())) return false;
          }
          if (hasCoinjoinFlags() != other.hasCoinjoinFlags()) return false;
          if (hasCoinjoinFlags()) {
            if (getCoinjoinFlags()
                != other.getCoinjoinFlags()) return false;
          }
          if (!getUnknownFields().equals(other.getUnknownFields())) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          if (getAddressNCount() > 0) {
            hash = (37 * hash) + ADDRESS_N_FIELD_NUMBER;
            hash = (53 * hash) + getAddressNList().hashCode();
          }
          if (hasPrevHash()) {
            hash = (37 * hash) + PREV_HASH_FIELD_NUMBER;
            hash = (53 * hash) + getPrevHash().hashCode();
          }
          if (hasPrevIndex()) {
            hash = (37 * hash) + PREV_INDEX_FIELD_NUMBER;
            hash = (53 * hash) + getPrevIndex();
          }
          if (hasScriptSig()) {
            hash = (37 * hash) + SCRIPT_SIG_FIELD_NUMBER;
            hash = (53 * hash) + getScriptSig().hashCode();
          }
          if (hasSequence()) {
            hash = (37 * hash) + SEQUENCE_FIELD_NUMBER;
            hash = (53 * hash) + getSequence();
          }
          if (hasScriptType()) {
            hash = (37 * hash) + SCRIPT_TYPE_FIELD_NUMBER;
            hash = (53 * hash) + scriptType_;
          }
          if (hasMultisig()) {
            hash = (37 * hash) + MULTISIG_FIELD_NUMBER;
            hash = (53 * hash) + getMultisig().hashCode();
          }
          if (hasAmount()) {
            hash = (37 * hash) + AMOUNT_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getAmount());
          }
          if (hasDecredTree()) {
            hash = (37 * hash) + DECRED_TREE_FIELD_NUMBER;
            hash = (53 * hash) + getDecredTree();
          }
          if (hasWitness()) {
            hash = (37 * hash) + WITNESS_FIELD_NUMBER;
            hash = (53 * hash) + getWitness().hashCode();
          }
          if (hasOwnershipProof()) {
            hash = (37 * hash) + OWNERSHIP_PROOF_FIELD_NUMBER;
            hash = (53 * hash) + getOwnershipProof().hashCode();
          }
          if (hasCommitmentData()) {
            hash = (37 * hash) + COMMITMENT_DATA_FIELD_NUMBER;
            hash = (53 * hash) + getCommitmentData().hashCode();
          }
          if (hasOrigHash()) {
            hash = (37 * hash) + ORIG_HASH_FIELD_NUMBER;
            hash = (53 * hash) + getOrigHash().hashCode();
          }
          if (hasOrigIndex()) {
            hash = (37 * hash) + ORIG_INDEX_FIELD_NUMBER;
            hash = (53 * hash) + getOrigIndex();
          }
          if (hasDecredStakingSpend()) {
            hash = (37 * hash) + DECRED_STAKING_SPEND_FIELD_NUMBER;
            hash = (53 * hash) + decredStakingSpend_;
          }
          if (hasScriptPubkey()) {
            hash = (37 * hash) + SCRIPT_PUBKEY_FIELD_NUMBER;
            hash = (53 * hash) + getScriptPubkey().hashCode();
          }
          if (hasCoinjoinFlags()) {
            hash = (37 * hash) + COINJOIN_FLAGS_FIELD_NUMBER;
            hash = (53 * hash) + getCoinjoinFlags();
          }
          hash = (29 * hash) + getUnknownFields().hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseDelimitedWithIOException(PARSER, input);
        }

        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * <pre>
         * *
         * Structure representing transaction input
         * </pre>
         *
         * Protobuf type {@code hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessage.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType)
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputTypeOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxInputType_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxInputType_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.Builder.class);
          }

          // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessage
                    .alwaysUseFieldBuilders) {
              getMultisigFieldBuilder();
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            bitField0_ = 0;
            addressN_ = emptyIntList();
            prevHash_ = com.google.protobuf.ByteString.EMPTY;
            prevIndex_ = 0;
            scriptSig_ = com.google.protobuf.ByteString.EMPTY;
            sequence_ = -1;
            scriptType_ = 0;
            multisig_ = null;
            if (multisigBuilder_ != null) {
              multisigBuilder_.dispose();
              multisigBuilder_ = null;
            }
            amount_ = 0L;
            decredTree_ = 0;
            witness_ = com.google.protobuf.ByteString.EMPTY;
            ownershipProof_ = com.google.protobuf.ByteString.EMPTY;
            commitmentData_ = com.google.protobuf.ByteString.EMPTY;
            origHash_ = com.google.protobuf.ByteString.EMPTY;
            origIndex_ = 0;
            decredStakingSpend_ = 0;
            scriptPubkey_ = com.google.protobuf.ByteString.EMPTY;
            coinjoinFlags_ = 0;
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxInputType_descriptor;
          }

          @java.lang.Override
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType getDefaultInstanceForType() {
            return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.getDefaultInstance();
          }

          @java.lang.Override
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType build() {
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType buildPartial() {
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType(this);
            if (bitField0_ != 0) { buildPartial0(result); }
            onBuilt();
            return result;
          }

          private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType result) {
            int from_bitField0_ = bitField0_;
            if (((from_bitField0_ & 0x00000001) != 0)) {
              addressN_.makeImmutable();
              result.addressN_ = addressN_;
            }
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000002) != 0)) {
              result.prevHash_ = prevHash_;
              to_bitField0_ |= 0x00000001;
            }
            if (((from_bitField0_ & 0x00000004) != 0)) {
              result.prevIndex_ = prevIndex_;
              to_bitField0_ |= 0x00000002;
            }
            if (((from_bitField0_ & 0x00000008) != 0)) {
              result.scriptSig_ = scriptSig_;
              to_bitField0_ |= 0x00000004;
            }
            if (((from_bitField0_ & 0x00000010) != 0)) {
              result.sequence_ = sequence_;
              to_bitField0_ |= 0x00000008;
            }
            if (((from_bitField0_ & 0x00000020) != 0)) {
              result.scriptType_ = scriptType_;
              to_bitField0_ |= 0x00000010;
            }
            if (((from_bitField0_ & 0x00000040) != 0)) {
              result.multisig_ = multisigBuilder_ == null
                  ? multisig_
                  : multisigBuilder_.build();
              to_bitField0_ |= 0x00000020;
            }
            if (((from_bitField0_ & 0x00000080) != 0)) {
              result.amount_ = amount_;
              to_bitField0_ |= 0x00000040;
            }
            if (((from_bitField0_ & 0x00000100) != 0)) {
              result.decredTree_ = decredTree_;
              to_bitField0_ |= 0x00000080;
            }
            if (((from_bitField0_ & 0x00000200) != 0)) {
              result.witness_ = witness_;
              to_bitField0_ |= 0x00000100;
            }
            if (((from_bitField0_ & 0x00000400) != 0)) {
              result.ownershipProof_ = ownershipProof_;
              to_bitField0_ |= 0x00000200;
            }
            if (((from_bitField0_ & 0x00000800) != 0)) {
              result.commitmentData_ = commitmentData_;
              to_bitField0_ |= 0x00000400;
            }
            if (((from_bitField0_ & 0x00001000) != 0)) {
              result.origHash_ = origHash_;
              to_bitField0_ |= 0x00000800;
            }
            if (((from_bitField0_ & 0x00002000) != 0)) {
              result.origIndex_ = origIndex_;
              to_bitField0_ |= 0x00001000;
            }
            if (((from_bitField0_ & 0x00004000) != 0)) {
              result.decredStakingSpend_ = decredStakingSpend_;
              to_bitField0_ |= 0x00002000;
            }
            if (((from_bitField0_ & 0x00008000) != 0)) {
              result.scriptPubkey_ = scriptPubkey_;
              to_bitField0_ |= 0x00004000;
            }
            if (((from_bitField0_ & 0x00010000) != 0)) {
              result.coinjoinFlags_ = coinjoinFlags_;
              to_bitField0_ |= 0x00008000;
            }
            result.bitField0_ |= to_bitField0_;
          }

          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType) {
              return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType other) {
            if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.getDefaultInstance()) return this;
            if (!other.addressN_.isEmpty()) {
              if (addressN_.isEmpty()) {
                addressN_ = other.addressN_;
                addressN_.makeImmutable();
                bitField0_ |= 0x00000001;
              } else {
                ensureAddressNIsMutable();
                addressN_.addAll(other.addressN_);
              }
              onChanged();
            }
            if (other.hasPrevHash()) {
              setPrevHash(other.getPrevHash());
            }
            if (other.hasPrevIndex()) {
              setPrevIndex(other.getPrevIndex());
            }
            if (other.hasScriptSig()) {
              setScriptSig(other.getScriptSig());
            }
            if (other.hasSequence()) {
              setSequence(other.getSequence());
            }
            if (other.hasScriptType()) {
              setScriptType(other.getScriptType());
            }
            if (other.hasMultisig()) {
              mergeMultisig(other.getMultisig());
            }
            if (other.hasAmount()) {
              setAmount(other.getAmount());
            }
            if (other.hasDecredTree()) {
              setDecredTree(other.getDecredTree());
            }
            if (other.hasWitness()) {
              setWitness(other.getWitness());
            }
            if (other.hasOwnershipProof()) {
              setOwnershipProof(other.getOwnershipProof());
            }
            if (other.hasCommitmentData()) {
              setCommitmentData(other.getCommitmentData());
            }
            if (other.hasOrigHash()) {
              setOrigHash(other.getOrigHash());
            }
            if (other.hasOrigIndex()) {
              setOrigIndex(other.getOrigIndex());
            }
            if (other.hasDecredStakingSpend()) {
              setDecredStakingSpend(other.getDecredStakingSpend());
            }
            if (other.hasScriptPubkey()) {
              setScriptPubkey(other.getScriptPubkey());
            }
            if (other.hasCoinjoinFlags()) {
              setCoinjoinFlags(other.getCoinjoinFlags());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            if (!hasPrevHash()) {
              return false;
            }
            if (!hasPrevIndex()) {
              return false;
            }
            if (hasMultisig()) {
              if (!getMultisig().isInitialized()) {
                return false;
              }
            }
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 8: {
                    int v = input.readUInt32();
                    ensureAddressNIsMutable();
                    addressN_.addInt(v);
                    break;
                  } // case 8
                  case 10: {
                    int length = input.readRawVarint32();
                    int limit = input.pushLimit(length);
                    ensureAddressNIsMutable();
                    while (input.getBytesUntilLimit() > 0) {
                      addressN_.addInt(input.readUInt32());
                    }
                    input.popLimit(limit);
                    break;
                  } // case 10
                  case 18: {
                    prevHash_ = input.readBytes();
                    bitField0_ |= 0x00000002;
                    break;
                  } // case 18
                  case 24: {
                    prevIndex_ = input.readUInt32();
                    bitField0_ |= 0x00000004;
                    break;
                  } // case 24
                  case 34: {
                    scriptSig_ = input.readBytes();
                    bitField0_ |= 0x00000008;
                    break;
                  } // case 34
                  case 40: {
                    sequence_ = input.readUInt32();
                    bitField0_ |= 0x00000010;
                    break;
                  } // case 40
                  case 48: {
                    int tmpRaw = input.readEnum();
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType tmpValue =
                        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(tmpRaw);
                    if (tmpValue == null) {
                      mergeUnknownVarintField(6, tmpRaw);
                    } else {
                      scriptType_ = tmpRaw;
                      bitField0_ |= 0x00000020;
                    }
                    break;
                  } // case 48
                  case 58: {
                    input.readMessage(
                        getMultisigFieldBuilder().getBuilder(),
                        extensionRegistry);
                    bitField0_ |= 0x00000040;
                    break;
                  } // case 58
                  case 64: {
                    amount_ = input.readUInt64();
                    bitField0_ |= 0x00000080;
                    break;
                  } // case 64
                  case 72: {
                    decredTree_ = input.readUInt32();
                    bitField0_ |= 0x00000100;
                    break;
                  } // case 72
                  case 106: {
                    witness_ = input.readBytes();
                    bitField0_ |= 0x00000200;
                    break;
                  } // case 106
                  case 114: {
                    ownershipProof_ = input.readBytes();
                    bitField0_ |= 0x00000400;
                    break;
                  } // case 114
                  case 122: {
                    commitmentData_ = input.readBytes();
                    bitField0_ |= 0x00000800;
                    break;
                  } // case 122
                  case 130: {
                    origHash_ = input.readBytes();
                    bitField0_ |= 0x00001000;
                    break;
                  } // case 130
                  case 136: {
                    origIndex_ = input.readUInt32();
                    bitField0_ |= 0x00002000;
                    break;
                  } // case 136
                  case 144: {
                    int tmpRaw = input.readEnum();
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType tmpValue =
                        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType.forNumber(tmpRaw);
                    if (tmpValue == null) {
                      mergeUnknownVarintField(18, tmpRaw);
                    } else {
                      decredStakingSpend_ = tmpRaw;
                      bitField0_ |= 0x00004000;
                    }
                    break;
                  } // case 144
                  case 154: {
                    scriptPubkey_ = input.readBytes();
                    bitField0_ |= 0x00008000;
                    break;
                  } // case 154
                  case 160: {
                    coinjoinFlags_ = input.readUInt32();
                    bitField0_ |= 0x00010000;
                    break;
                  } // case 160
                  default: {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
                } // switch (tag)
              } // while (!done)
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.unwrapIOException();
            } finally {
              onChanged();
            } // finally
            return this;
          }
          private int bitField0_;

          private com.google.protobuf.Internal.IntList addressN_ = emptyIntList();
          private void ensureAddressNIsMutable() {
            if (!addressN_.isModifiable()) {
              addressN_ = makeMutableCopy(addressN_);
            }
            bitField0_ |= 0x00000001;
          }
          /**
           * <pre>
           * BIP-32 path to derive the key from master node
           * </pre>
           *
           * <code>repeated uint32 address_n = 1;</code>
           * @return A list containing the addressN.
           */
          public java.util.List<java.lang.Integer>
              getAddressNList() {
            addressN_.makeImmutable();
            return addressN_;
          }
          /**
           * <pre>
           * BIP-32 path to derive the key from master node
           * </pre>
           *
           * <code>repeated uint32 address_n = 1;</code>
           * @return The count of addressN.
           */
          public int getAddressNCount() {
            return addressN_.size();
          }
          /**
           * <pre>
           * BIP-32 path to derive the key from master node
           * </pre>
           *
           * <code>repeated uint32 address_n = 1;</code>
           * @param index The index of the element to return.
           * @return The addressN at the given index.
           */
          public int getAddressN(int index) {
            return addressN_.getInt(index);
          }
          /**
           * <pre>
           * BIP-32 path to derive the key from master node
           * </pre>
           *
           * <code>repeated uint32 address_n = 1;</code>
           * @param index The index to set the value at.
           * @param value The addressN to set.
           * @return This builder for chaining.
           */
          public Builder setAddressN(
              int index, int value) {

            ensureAddressNIsMutable();
            addressN_.setInt(index, value);
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * BIP-32 path to derive the key from master node
           * </pre>
           *
           * <code>repeated uint32 address_n = 1;</code>
           * @param value The addressN to add.
           * @return This builder for chaining.
           */
          public Builder addAddressN(int value) {

            ensureAddressNIsMutable();
            addressN_.addInt(value);
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * BIP-32 path to derive the key from master node
           * </pre>
           *
           * <code>repeated uint32 address_n = 1;</code>
           * @param values The addressN to add.
           * @return This builder for chaining.
           */
          public Builder addAllAddressN(
              java.lang.Iterable<? extends java.lang.Integer> values) {
            ensureAddressNIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, addressN_);
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * BIP-32 path to derive the key from master node
           * </pre>
           *
           * <code>repeated uint32 address_n = 1;</code>
           * @return This builder for chaining.
           */
          public Builder clearAddressN() {
            addressN_ = emptyIntList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
            return this;
          }

          private com.google.protobuf.ByteString prevHash_ = com.google.protobuf.ByteString.EMPTY;
          /**
           * <pre>
           * hash of previous transaction output to spend by this input
           * </pre>
           *
           * <code>required bytes prev_hash = 2;</code>
           * @return Whether the prevHash field is set.
           */
          @java.lang.Override
          public boolean hasPrevHash() {
            return ((bitField0_ & 0x00000002) != 0);
          }
          /**
           * <pre>
           * hash of previous transaction output to spend by this input
           * </pre>
           *
           * <code>required bytes prev_hash = 2;</code>
           * @return The prevHash.
           */
          @java.lang.Override
          public com.google.protobuf.ByteString getPrevHash() {
            return prevHash_;
          }
          /**
           * <pre>
           * hash of previous transaction output to spend by this input
           * </pre>
           *
           * <code>required bytes prev_hash = 2;</code>
           * @param value The prevHash to set.
           * @return This builder for chaining.
           */
          public Builder setPrevHash(com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            prevHash_ = value;
            bitField0_ |= 0x00000002;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * hash of previous transaction output to spend by this input
           * </pre>
           *
           * <code>required bytes prev_hash = 2;</code>
           * @return This builder for chaining.
           */
          public Builder clearPrevHash() {
            bitField0_ = (bitField0_ & ~0x00000002);
            prevHash_ = getDefaultInstance().getPrevHash();
            onChanged();
            return this;
          }

          private int prevIndex_ ;
          /**
           * <pre>
           * index of previous output to spend
           * </pre>
           *
           * <code>required uint32 prev_index = 3;</code>
           * @return Whether the prevIndex field is set.
           */
          @java.lang.Override
          public boolean hasPrevIndex() {
            return ((bitField0_ & 0x00000004) != 0);
          }
          /**
           * <pre>
           * index of previous output to spend
           * </pre>
           *
           * <code>required uint32 prev_index = 3;</code>
           * @return The prevIndex.
           */
          @java.lang.Override
          public int getPrevIndex() {
            return prevIndex_;
          }
          /**
           * <pre>
           * index of previous output to spend
           * </pre>
           *
           * <code>required uint32 prev_index = 3;</code>
           * @param value The prevIndex to set.
           * @return This builder for chaining.
           */
          public Builder setPrevIndex(int value) {

            prevIndex_ = value;
            bitField0_ |= 0x00000004;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * index of previous output to spend
           * </pre>
           *
           * <code>required uint32 prev_index = 3;</code>
           * @return This builder for chaining.
           */
          public Builder clearPrevIndex() {
            bitField0_ = (bitField0_ & ~0x00000004);
            prevIndex_ = 0;
            onChanged();
            return this;
          }

          private com.google.protobuf.ByteString scriptSig_ = com.google.protobuf.ByteString.EMPTY;
          /**
           * <pre>
           * script signature, unset for tx to sign
           * </pre>
           *
           * <code>optional bytes script_sig = 4;</code>
           * @return Whether the scriptSig field is set.
           */
          @java.lang.Override
          public boolean hasScriptSig() {
            return ((bitField0_ & 0x00000008) != 0);
          }
          /**
           * <pre>
           * script signature, unset for tx to sign
           * </pre>
           *
           * <code>optional bytes script_sig = 4;</code>
           * @return The scriptSig.
           */
          @java.lang.Override
          public com.google.protobuf.ByteString getScriptSig() {
            return scriptSig_;
          }
          /**
           * <pre>
           * script signature, unset for tx to sign
           * </pre>
           *
           * <code>optional bytes script_sig = 4;</code>
           * @param value The scriptSig to set.
           * @return This builder for chaining.
           */
          public Builder setScriptSig(com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            scriptSig_ = value;
            bitField0_ |= 0x00000008;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * script signature, unset for tx to sign
           * </pre>
           *
           * <code>optional bytes script_sig = 4;</code>
           * @return This builder for chaining.
           */
          public Builder clearScriptSig() {
            bitField0_ = (bitField0_ & ~0x00000008);
            scriptSig_ = getDefaultInstance().getScriptSig();
            onChanged();
            return this;
          }

          private int sequence_ = -1;
          /**
           * <pre>
           * sequence (default=0xffffffff)
           * </pre>
           *
           * <code>optional uint32 sequence = 5 [default = 4294967295];</code>
           * @return Whether the sequence field is set.
           */
          @java.lang.Override
          public boolean hasSequence() {
            return ((bitField0_ & 0x00000010) != 0);
          }
          /**
           * <pre>
           * sequence (default=0xffffffff)
           * </pre>
           *
           * <code>optional uint32 sequence = 5 [default = 4294967295];</code>
           * @return The sequence.
           */
          @java.lang.Override
          public int getSequence() {
            return sequence_;
          }
          /**
           * <pre>
           * sequence (default=0xffffffff)
           * </pre>
           *
           * <code>optional uint32 sequence = 5 [default = 4294967295];</code>
           * @param value The sequence to set.
           * @return This builder for chaining.
           */
          public Builder setSequence(int value) {

            sequence_ = value;
            bitField0_ |= 0x00000010;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * sequence (default=0xffffffff)
           * </pre>
           *
           * <code>optional uint32 sequence = 5 [default = 4294967295];</code>
           * @return This builder for chaining.
           */
          public Builder clearSequence() {
            bitField0_ = (bitField0_ & ~0x00000010);
            sequence_ = -1;
            onChanged();
            return this;
          }

          private int scriptType_ = 0;
          /**
           * <pre>
           * defines template of input script
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 6 [default = SPENDADDRESS];</code>
           * @return Whether the scriptType field is set.
           */
          @java.lang.Override public boolean hasScriptType() {
            return ((bitField0_ & 0x00000020) != 0);
          }
          /**
           * <pre>
           * defines template of input script
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 6 [default = SPENDADDRESS];</code>
           * @return The scriptType.
           */
          @java.lang.Override
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType() {
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(scriptType_);
            return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.SPENDADDRESS : result;
          }
          /**
           * <pre>
           * defines template of input script
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 6 [default = SPENDADDRESS];</code>
           * @param value The scriptType to set.
           * @return This builder for chaining.
           */
          public Builder setScriptType(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType value) {
            if (value == null) {
              throw new NullPointerException();
            }
            bitField0_ |= 0x00000020;
            scriptType_ = value.getNumber();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * defines template of input script
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 6 [default = SPENDADDRESS];</code>
           * @return This builder for chaining.
           */
          public Builder clearScriptType() {
            bitField0_ = (bitField0_ & ~0x00000020);
            scriptType_ = 0;
            onChanged();
            return this;
          }

          private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType multisig_;
          private com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder> multisigBuilder_;
          /**
           * <pre>
           * Filled if input is going to spend multisig tx
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
           * @return Whether the multisig field is set.
           */
          public boolean hasMultisig() {
            return ((bitField0_ & 0x00000040) != 0);
          }
          /**
           * <pre>
           * Filled if input is going to spend multisig tx
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
           * @return The multisig.
           */
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig() {
            if (multisigBuilder_ == null) {
              return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
            } else {
              return multisigBuilder_.getMessage();
            }
          }
          /**
           * <pre>
           * Filled if input is going to spend multisig tx
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
           */
          public Builder setMultisig(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType value) {
            if (multisigBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              multisig_ = value;
            } else {
              multisigBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000040;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Filled if input is going to spend multisig tx
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
           */
          public Builder setMultisig(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder builderForValue) {
            if (multisigBuilder_ == null) {
              multisig_ = builderForValue.build();
            } else {
              multisigBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000040;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Filled if input is going to spend multisig tx
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
           */
          public Builder mergeMultisig(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType value) {
            if (multisigBuilder_ == null) {
              if (((bitField0_ & 0x00000040) != 0) &&
                multisig_ != null &&
                multisig_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance()) {
                getMultisigBuilder().mergeFrom(value);
              } else {
                multisig_ = value;
              }
            } else {
              multisigBuilder_.mergeFrom(value);
            }
            if (multisig_ != null) {
              bitField0_ |= 0x00000040;
              onChanged();
            }
            return this;
          }
          /**
           * <pre>
           * Filled if input is going to spend multisig tx
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
           */
          public Builder clearMultisig() {
            bitField0_ = (bitField0_ & ~0x00000040);
            multisig_ = null;
            if (multisigBuilder_ != null) {
              multisigBuilder_.dispose();
              multisigBuilder_ = null;
            }
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Filled if input is going to spend multisig tx
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
           */
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder getMultisigBuilder() {
            bitField0_ |= 0x00000040;
            onChanged();
            return getMultisigFieldBuilder().getBuilder();
          }
          /**
           * <pre>
           * Filled if input is going to spend multisig tx
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
           */
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder() {
            if (multisigBuilder_ != null) {
              return multisigBuilder_.getMessageOrBuilder();
            } else {
              return multisig_ == null ?
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
            }
          }
          /**
           * <pre>
           * Filled if input is going to spend multisig tx
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
           */
          private com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder> 
              getMultisigFieldBuilder() {
            if (multisigBuilder_ == null) {
              multisigBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder>(
                      getMultisig(),
                      getParentForChildren(),
                      isClean());
              multisig_ = null;
            }
            return multisigBuilder_;
          }

          private long amount_ ;
          /**
           * <pre>
           * amount of previous transaction output (for segwit only)
           * </pre>
           *
           * <code>optional uint64 amount = 8;</code>
           * @return Whether the amount field is set.
           */
          @java.lang.Override
          public boolean hasAmount() {
            return ((bitField0_ & 0x00000080) != 0);
          }
          /**
           * <pre>
           * amount of previous transaction output (for segwit only)
           * </pre>
           *
           * <code>optional uint64 amount = 8;</code>
           * @return The amount.
           */
          @java.lang.Override
          public long getAmount() {
            return amount_;
          }
          /**
           * <pre>
           * amount of previous transaction output (for segwit only)
           * </pre>
           *
           * <code>optional uint64 amount = 8;</code>
           * @param value The amount to set.
           * @return This builder for chaining.
           */
          public Builder setAmount(long value) {

            amount_ = value;
            bitField0_ |= 0x00000080;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * amount of previous transaction output (for segwit only)
           * </pre>
           *
           * <code>optional uint64 amount = 8;</code>
           * @return This builder for chaining.
           */
          public Builder clearAmount() {
            bitField0_ = (bitField0_ & ~0x00000080);
            amount_ = 0L;
            onChanged();
            return this;
          }

          private int decredTree_ ;
          /**
           * <pre>
           * only for Decred, 0 is a normal transaction while 1 is a stake transaction
           * </pre>
           *
           * <code>optional uint32 decred_tree = 9;</code>
           * @return Whether the decredTree field is set.
           */
          @java.lang.Override
          public boolean hasDecredTree() {
            return ((bitField0_ & 0x00000100) != 0);
          }
          /**
           * <pre>
           * only for Decred, 0 is a normal transaction while 1 is a stake transaction
           * </pre>
           *
           * <code>optional uint32 decred_tree = 9;</code>
           * @return The decredTree.
           */
          @java.lang.Override
          public int getDecredTree() {
            return decredTree_;
          }
          /**
           * <pre>
           * only for Decred, 0 is a normal transaction while 1 is a stake transaction
           * </pre>
           *
           * <code>optional uint32 decred_tree = 9;</code>
           * @param value The decredTree to set.
           * @return This builder for chaining.
           */
          public Builder setDecredTree(int value) {

            decredTree_ = value;
            bitField0_ |= 0x00000100;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * only for Decred, 0 is a normal transaction while 1 is a stake transaction
           * </pre>
           *
           * <code>optional uint32 decred_tree = 9;</code>
           * @return This builder for chaining.
           */
          public Builder clearDecredTree() {
            bitField0_ = (bitField0_ & ~0x00000100);
            decredTree_ = 0;
            onChanged();
            return this;
          }

          private com.google.protobuf.ByteString witness_ = com.google.protobuf.ByteString.EMPTY;
          /**
           * <pre>
           * optional uint32 decred_script_version = 10;                         // only for Decred  // deprecated -&gt; only 0 is supported
           * optional bytes prev_block_hash_bip115 = 11;     // BIP-115 support dropped
           * optional uint32 prev_block_height_bip115 = 12;  // BIP-115 support dropped
           * </pre>
           *
           * <code>optional bytes witness = 13;</code>
           * @return Whether the witness field is set.
           */
          @java.lang.Override
          public boolean hasWitness() {
            return ((bitField0_ & 0x00000200) != 0);
          }
          /**
           * <pre>
           * optional uint32 decred_script_version = 10;                         // only for Decred  // deprecated -&gt; only 0 is supported
           * optional bytes prev_block_hash_bip115 = 11;     // BIP-115 support dropped
           * optional uint32 prev_block_height_bip115 = 12;  // BIP-115 support dropped
           * </pre>
           *
           * <code>optional bytes witness = 13;</code>
           * @return The witness.
           */
          @java.lang.Override
          public com.google.protobuf.ByteString getWitness() {
            return witness_;
          }
          /**
           * <pre>
           * optional uint32 decred_script_version = 10;                         // only for Decred  // deprecated -&gt; only 0 is supported
           * optional bytes prev_block_hash_bip115 = 11;     // BIP-115 support dropped
           * optional uint32 prev_block_height_bip115 = 12;  // BIP-115 support dropped
           * </pre>
           *
           * <code>optional bytes witness = 13;</code>
           * @param value The witness to set.
           * @return This builder for chaining.
           */
          public Builder setWitness(com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            witness_ = value;
            bitField0_ |= 0x00000200;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * optional uint32 decred_script_version = 10;                         // only for Decred  // deprecated -&gt; only 0 is supported
           * optional bytes prev_block_hash_bip115 = 11;     // BIP-115 support dropped
           * optional uint32 prev_block_height_bip115 = 12;  // BIP-115 support dropped
           * </pre>
           *
           * <code>optional bytes witness = 13;</code>
           * @return This builder for chaining.
           */
          public Builder clearWitness() {
            bitField0_ = (bitField0_ & ~0x00000200);
            witness_ = getDefaultInstance().getWitness();
            onChanged();
            return this;
          }

          private com.google.protobuf.ByteString ownershipProof_ = com.google.protobuf.ByteString.EMPTY;
          /**
           * <pre>
           * SLIP-0019 proof of ownership, only set for EXTERNAL inputs
           * </pre>
           *
           * <code>optional bytes ownership_proof = 14;</code>
           * @return Whether the ownershipProof field is set.
           */
          @java.lang.Override
          public boolean hasOwnershipProof() {
            return ((bitField0_ & 0x00000400) != 0);
          }
          /**
           * <pre>
           * SLIP-0019 proof of ownership, only set for EXTERNAL inputs
           * </pre>
           *
           * <code>optional bytes ownership_proof = 14;</code>
           * @return The ownershipProof.
           */
          @java.lang.Override
          public com.google.protobuf.ByteString getOwnershipProof() {
            return ownershipProof_;
          }
          /**
           * <pre>
           * SLIP-0019 proof of ownership, only set for EXTERNAL inputs
           * </pre>
           *
           * <code>optional bytes ownership_proof = 14;</code>
           * @param value The ownershipProof to set.
           * @return This builder for chaining.
           */
          public Builder setOwnershipProof(com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            ownershipProof_ = value;
            bitField0_ |= 0x00000400;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * SLIP-0019 proof of ownership, only set for EXTERNAL inputs
           * </pre>
           *
           * <code>optional bytes ownership_proof = 14;</code>
           * @return This builder for chaining.
           */
          public Builder clearOwnershipProof() {
            bitField0_ = (bitField0_ & ~0x00000400);
            ownershipProof_ = getDefaultInstance().getOwnershipProof();
            onChanged();
            return this;
          }

          private com.google.protobuf.ByteString commitmentData_ = com.google.protobuf.ByteString.EMPTY;
          /**
           * <pre>
           * optional commitment data for the SLIP-0019 proof of ownership
           * </pre>
           *
           * <code>optional bytes commitment_data = 15;</code>
           * @return Whether the commitmentData field is set.
           */
          @java.lang.Override
          public boolean hasCommitmentData() {
            return ((bitField0_ & 0x00000800) != 0);
          }
          /**
           * <pre>
           * optional commitment data for the SLIP-0019 proof of ownership
           * </pre>
           *
           * <code>optional bytes commitment_data = 15;</code>
           * @return The commitmentData.
           */
          @java.lang.Override
          public com.google.protobuf.ByteString getCommitmentData() {
            return commitmentData_;
          }
          /**
           * <pre>
           * optional commitment data for the SLIP-0019 proof of ownership
           * </pre>
           *
           * <code>optional bytes commitment_data = 15;</code>
           * @param value The commitmentData to set.
           * @return This builder for chaining.
           */
          public Builder setCommitmentData(com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            commitmentData_ = value;
            bitField0_ |= 0x00000800;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * optional commitment data for the SLIP-0019 proof of ownership
           * </pre>
           *
           * <code>optional bytes commitment_data = 15;</code>
           * @return This builder for chaining.
           */
          public Builder clearCommitmentData() {
            bitField0_ = (bitField0_ & ~0x00000800);
            commitmentData_ = getDefaultInstance().getCommitmentData();
            onChanged();
            return this;
          }

          private com.google.protobuf.ByteString origHash_ = com.google.protobuf.ByteString.EMPTY;
          /**
           * <pre>
           * tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
           * </pre>
           *
           * <code>optional bytes orig_hash = 16;</code>
           * @return Whether the origHash field is set.
           */
          @java.lang.Override
          public boolean hasOrigHash() {
            return ((bitField0_ & 0x00001000) != 0);
          }
          /**
           * <pre>
           * tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
           * </pre>
           *
           * <code>optional bytes orig_hash = 16;</code>
           * @return The origHash.
           */
          @java.lang.Override
          public com.google.protobuf.ByteString getOrigHash() {
            return origHash_;
          }
          /**
           * <pre>
           * tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
           * </pre>
           *
           * <code>optional bytes orig_hash = 16;</code>
           * @param value The origHash to set.
           * @return This builder for chaining.
           */
          public Builder setOrigHash(com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            origHash_ = value;
            bitField0_ |= 0x00001000;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
           * </pre>
           *
           * <code>optional bytes orig_hash = 16;</code>
           * @return This builder for chaining.
           */
          public Builder clearOrigHash() {
            bitField0_ = (bitField0_ & ~0x00001000);
            origHash_ = getDefaultInstance().getOrigHash();
            onChanged();
            return this;
          }

          private int origIndex_ ;
          /**
           * <pre>
           * index of the input in the original transaction (used when creating a replacement transaction)
           * </pre>
           *
           * <code>optional uint32 orig_index = 17;</code>
           * @return Whether the origIndex field is set.
           */
          @java.lang.Override
          public boolean hasOrigIndex() {
            return ((bitField0_ & 0x00002000) != 0);
          }
          /**
           * <pre>
           * index of the input in the original transaction (used when creating a replacement transaction)
           * </pre>
           *
           * <code>optional uint32 orig_index = 17;</code>
           * @return The origIndex.
           */
          @java.lang.Override
          public int getOrigIndex() {
            return origIndex_;
          }
          /**
           * <pre>
           * index of the input in the original transaction (used when creating a replacement transaction)
           * </pre>
           *
           * <code>optional uint32 orig_index = 17;</code>
           * @param value The origIndex to set.
           * @return This builder for chaining.
           */
          public Builder setOrigIndex(int value) {

            origIndex_ = value;
            bitField0_ |= 0x00002000;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * index of the input in the original transaction (used when creating a replacement transaction)
           * </pre>
           *
           * <code>optional uint32 orig_index = 17;</code>
           * @return This builder for chaining.
           */
          public Builder clearOrigIndex() {
            bitField0_ = (bitField0_ & ~0x00002000);
            origIndex_ = 0;
            onChanged();
            return this;
          }

          private int decredStakingSpend_ = 0;
          /**
           * <pre>
           * if not None this holds the type of stake spend: revocation or stake generation
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.DecredStakingSpendType decred_staking_spend = 18;</code>
           * @return Whether the decredStakingSpend field is set.
           */
          @java.lang.Override public boolean hasDecredStakingSpend() {
            return ((bitField0_ & 0x00004000) != 0);
          }
          /**
           * <pre>
           * if not None this holds the type of stake spend: revocation or stake generation
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.DecredStakingSpendType decred_staking_spend = 18;</code>
           * @return The decredStakingSpend.
           */
          @java.lang.Override
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType getDecredStakingSpend() {
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType.forNumber(decredStakingSpend_);
            return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType.SSGen : result;
          }
          /**
           * <pre>
           * if not None this holds the type of stake spend: revocation or stake generation
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.DecredStakingSpendType decred_staking_spend = 18;</code>
           * @param value The decredStakingSpend to set.
           * @return This builder for chaining.
           */
          public Builder setDecredStakingSpend(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType value) {
            if (value == null) {
              throw new NullPointerException();
            }
            bitField0_ |= 0x00004000;
            decredStakingSpend_ = value.getNumber();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * if not None this holds the type of stake spend: revocation or stake generation
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.DecredStakingSpendType decred_staking_spend = 18;</code>
           * @return This builder for chaining.
           */
          public Builder clearDecredStakingSpend() {
            bitField0_ = (bitField0_ & ~0x00004000);
            decredStakingSpend_ = 0;
            onChanged();
            return this;
          }

          private com.google.protobuf.ByteString scriptPubkey_ = com.google.protobuf.ByteString.EMPTY;
          /**
           * <pre>
           * scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
           * </pre>
           *
           * <code>optional bytes script_pubkey = 19;</code>
           * @return Whether the scriptPubkey field is set.
           */
          @java.lang.Override
          public boolean hasScriptPubkey() {
            return ((bitField0_ & 0x00008000) != 0);
          }
          /**
           * <pre>
           * scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
           * </pre>
           *
           * <code>optional bytes script_pubkey = 19;</code>
           * @return The scriptPubkey.
           */
          @java.lang.Override
          public com.google.protobuf.ByteString getScriptPubkey() {
            return scriptPubkey_;
          }
          /**
           * <pre>
           * scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
           * </pre>
           *
           * <code>optional bytes script_pubkey = 19;</code>
           * @param value The scriptPubkey to set.
           * @return This builder for chaining.
           */
          public Builder setScriptPubkey(com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            scriptPubkey_ = value;
            bitField0_ |= 0x00008000;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
           * </pre>
           *
           * <code>optional bytes script_pubkey = 19;</code>
           * @return This builder for chaining.
           */
          public Builder clearScriptPubkey() {
            bitField0_ = (bitField0_ & ~0x00008000);
            scriptPubkey_ = getDefaultInstance().getScriptPubkey();
            onChanged();
            return this;
          }

          private int coinjoinFlags_ ;
          /**
           * <pre>
           * bit field of CoinJoin-specific flags
           * </pre>
           *
           * <code>optional uint32 coinjoin_flags = 20 [default = 0];</code>
           * @return Whether the coinjoinFlags field is set.
           */
          @java.lang.Override
          public boolean hasCoinjoinFlags() {
            return ((bitField0_ & 0x00010000) != 0);
          }
          /**
           * <pre>
           * bit field of CoinJoin-specific flags
           * </pre>
           *
           * <code>optional uint32 coinjoin_flags = 20 [default = 0];</code>
           * @return The coinjoinFlags.
           */
          @java.lang.Override
          public int getCoinjoinFlags() {
            return coinjoinFlags_;
          }
          /**
           * <pre>
           * bit field of CoinJoin-specific flags
           * </pre>
           *
           * <code>optional uint32 coinjoin_flags = 20 [default = 0];</code>
           * @param value The coinjoinFlags to set.
           * @return This builder for chaining.
           */
          public Builder setCoinjoinFlags(int value) {

            coinjoinFlags_ = value;
            bitField0_ |= 0x00010000;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * bit field of CoinJoin-specific flags
           * </pre>
           *
           * <code>optional uint32 coinjoin_flags = 20 [default = 0];</code>
           * @return This builder for chaining.
           */
          public Builder clearCoinjoinFlags() {
            bitField0_ = (bitField0_ & ~0x00010000);
            coinjoinFlags_ = 0;
            onChanged();
            return this;
          }

          // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType)
        }

        // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType)
        private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType();
        }

        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<TxInputType>
            PARSER = new com.google.protobuf.AbstractParser<TxInputType>() {
          @java.lang.Override
          public TxInputType parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

        public static com.google.protobuf.Parser<TxInputType> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<TxInputType> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public interface TxOutputBinTypeOrBuilder extends
          // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required uint64 amount = 1;</code>
         * @return Whether the amount field is set.
         */
        boolean hasAmount();
        /**
         * <code>required uint64 amount = 1;</code>
         * @return The amount.
         */
        long getAmount();

        /**
         * <code>required bytes script_pubkey = 2;</code>
         * @return Whether the scriptPubkey field is set.
         */
        boolean hasScriptPubkey();
        /**
         * <code>required bytes script_pubkey = 2;</code>
         * @return The scriptPubkey.
         */
        com.google.protobuf.ByteString getScriptPubkey();

        /**
         * <pre>
         * only for Decred, currently only 0 is supported
         * </pre>
         *
         * <code>optional uint32 decred_script_version = 3;</code>
         * @return Whether the decredScriptVersion field is set.
         */
        boolean hasDecredScriptVersion();
        /**
         * <pre>
         * only for Decred, currently only 0 is supported
         * </pre>
         *
         * <code>optional uint32 decred_script_version = 3;</code>
         * @return The decredScriptVersion.
         */
        int getDecredScriptVersion();
      }
      /**
       * <pre>
       * *
       * Structure representing compiled transaction output
       * </pre>
       *
       * Protobuf type {@code hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType}
       */
      public static final class TxOutputBinType extends
          com.google.protobuf.GeneratedMessage implements
          // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType)
          TxOutputBinTypeOrBuilder {
      private static final long serialVersionUID = 0L;
        static {
          com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
            com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
            /* major= */ 4,
            /* minor= */ 28,
            /* patch= */ 3,
            /* suffix= */ "",
            TxOutputBinType.class.getName());
        }
        // Use TxOutputBinType.newBuilder() to construct.
        private TxOutputBinType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
          super(builder);
        }
        private TxOutputBinType() {
          scriptPubkey_ = com.google.protobuf.ByteString.EMPTY;
        }

        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputBinType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputBinType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.Builder.class);
        }

        private int bitField0_;
        public static final int AMOUNT_FIELD_NUMBER = 1;
        private long amount_ = 0L;
        /**
         * <code>required uint64 amount = 1;</code>
         * @return Whether the amount field is set.
         */
        @java.lang.Override
        public boolean hasAmount() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>required uint64 amount = 1;</code>
         * @return The amount.
         */
        @java.lang.Override
        public long getAmount() {
          return amount_;
        }

        public static final int SCRIPT_PUBKEY_FIELD_NUMBER = 2;
        private com.google.protobuf.ByteString scriptPubkey_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <code>required bytes script_pubkey = 2;</code>
         * @return Whether the scriptPubkey field is set.
         */
        @java.lang.Override
        public boolean hasScriptPubkey() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>required bytes script_pubkey = 2;</code>
         * @return The scriptPubkey.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getScriptPubkey() {
          return scriptPubkey_;
        }

        public static final int DECRED_SCRIPT_VERSION_FIELD_NUMBER = 3;
        private int decredScriptVersion_ = 0;
        /**
         * <pre>
         * only for Decred, currently only 0 is supported
         * </pre>
         *
         * <code>optional uint32 decred_script_version = 3;</code>
         * @return Whether the decredScriptVersion field is set.
         */
        @java.lang.Override
        public boolean hasDecredScriptVersion() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * only for Decred, currently only 0 is supported
         * </pre>
         *
         * <code>optional uint32 decred_script_version = 3;</code>
         * @return The decredScriptVersion.
         */
        @java.lang.Override
        public int getDecredScriptVersion() {
          return decredScriptVersion_;
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          if (!hasAmount()) {
            memoizedIsInitialized = 0;
            return false;
          }
          if (!hasScriptPubkey()) {
            memoizedIsInitialized = 0;
            return false;
          }
          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (((bitField0_ & 0x00000001) != 0)) {
            output.writeUInt64(1, amount_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            output.writeBytes(2, scriptPubkey_);
          }
          if (((bitField0_ & 0x00000004) != 0)) {
            output.writeUInt32(3, decredScriptVersion_);
          }
          getUnknownFields().writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt64Size(1, amount_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeBytesSize(2, scriptPubkey_);
          }
          if (((bitField0_ & 0x00000004) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(3, decredScriptVersion_);
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType)) {
            return super.equals(obj);
          }
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType) obj;

          if (hasAmount() != other.hasAmount()) return false;
          if (hasAmount()) {
            if (getAmount()
                != other.getAmount()) return false;
          }
          if (hasScriptPubkey() != other.hasScriptPubkey()) return false;
          if (hasScriptPubkey()) {
            if (!getScriptPubkey()
                .equals(other.getScriptPubkey())) return false;
          }
          if (hasDecredScriptVersion() != other.hasDecredScriptVersion()) return false;
          if (hasDecredScriptVersion()) {
            if (getDecredScriptVersion()
                != other.getDecredScriptVersion()) return false;
          }
          if (!getUnknownFields().equals(other.getUnknownFields())) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          if (hasAmount()) {
            hash = (37 * hash) + AMOUNT_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getAmount());
          }
          if (hasScriptPubkey()) {
            hash = (37 * hash) + SCRIPT_PUBKEY_FIELD_NUMBER;
            hash = (53 * hash) + getScriptPubkey().hashCode();
          }
          if (hasDecredScriptVersion()) {
            hash = (37 * hash) + DECRED_SCRIPT_VERSION_FIELD_NUMBER;
            hash = (53 * hash) + getDecredScriptVersion();
          }
          hash = (29 * hash) + getUnknownFields().hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseDelimitedWithIOException(PARSER, input);
        }

        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * <pre>
         * *
         * Structure representing compiled transaction output
         * </pre>
         *
         * Protobuf type {@code hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessage.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType)
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinTypeOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputBinType_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputBinType_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.Builder.class);
          }

          // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.newBuilder()
          private Builder() {

          }

          private Builder(
              com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            super(parent);

          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            bitField0_ = 0;
            amount_ = 0L;
            scriptPubkey_ = com.google.protobuf.ByteString.EMPTY;
            decredScriptVersion_ = 0;
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputBinType_descriptor;
          }

          @java.lang.Override
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType getDefaultInstanceForType() {
            return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.getDefaultInstance();
          }

          @java.lang.Override
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType build() {
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType buildPartial() {
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType(this);
            if (bitField0_ != 0) { buildPartial0(result); }
            onBuilt();
            return result;
          }

          private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType result) {
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) != 0)) {
              result.amount_ = amount_;
              to_bitField0_ |= 0x00000001;
            }
            if (((from_bitField0_ & 0x00000002) != 0)) {
              result.scriptPubkey_ = scriptPubkey_;
              to_bitField0_ |= 0x00000002;
            }
            if (((from_bitField0_ & 0x00000004) != 0)) {
              result.decredScriptVersion_ = decredScriptVersion_;
              to_bitField0_ |= 0x00000004;
            }
            result.bitField0_ |= to_bitField0_;
          }

          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType) {
              return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType other) {
            if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.getDefaultInstance()) return this;
            if (other.hasAmount()) {
              setAmount(other.getAmount());
            }
            if (other.hasScriptPubkey()) {
              setScriptPubkey(other.getScriptPubkey());
            }
            if (other.hasDecredScriptVersion()) {
              setDecredScriptVersion(other.getDecredScriptVersion());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            if (!hasAmount()) {
              return false;
            }
            if (!hasScriptPubkey()) {
              return false;
            }
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 8: {
                    amount_ = input.readUInt64();
                    bitField0_ |= 0x00000001;
                    break;
                  } // case 8
                  case 18: {
                    scriptPubkey_ = input.readBytes();
                    bitField0_ |= 0x00000002;
                    break;
                  } // case 18
                  case 24: {
                    decredScriptVersion_ = input.readUInt32();
                    bitField0_ |= 0x00000004;
                    break;
                  } // case 24
                  default: {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
                } // switch (tag)
              } // while (!done)
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.unwrapIOException();
            } finally {
              onChanged();
            } // finally
            return this;
          }
          private int bitField0_;

          private long amount_ ;
          /**
           * <code>required uint64 amount = 1;</code>
           * @return Whether the amount field is set.
           */
          @java.lang.Override
          public boolean hasAmount() {
            return ((bitField0_ & 0x00000001) != 0);
          }
          /**
           * <code>required uint64 amount = 1;</code>
           * @return The amount.
           */
          @java.lang.Override
          public long getAmount() {
            return amount_;
          }
          /**
           * <code>required uint64 amount = 1;</code>
           * @param value The amount to set.
           * @return This builder for chaining.
           */
          public Builder setAmount(long value) {

            amount_ = value;
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }
          /**
           * <code>required uint64 amount = 1;</code>
           * @return This builder for chaining.
           */
          public Builder clearAmount() {
            bitField0_ = (bitField0_ & ~0x00000001);
            amount_ = 0L;
            onChanged();
            return this;
          }

          private com.google.protobuf.ByteString scriptPubkey_ = com.google.protobuf.ByteString.EMPTY;
          /**
           * <code>required bytes script_pubkey = 2;</code>
           * @return Whether the scriptPubkey field is set.
           */
          @java.lang.Override
          public boolean hasScriptPubkey() {
            return ((bitField0_ & 0x00000002) != 0);
          }
          /**
           * <code>required bytes script_pubkey = 2;</code>
           * @return The scriptPubkey.
           */
          @java.lang.Override
          public com.google.protobuf.ByteString getScriptPubkey() {
            return scriptPubkey_;
          }
          /**
           * <code>required bytes script_pubkey = 2;</code>
           * @param value The scriptPubkey to set.
           * @return This builder for chaining.
           */
          public Builder setScriptPubkey(com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            scriptPubkey_ = value;
            bitField0_ |= 0x00000002;
            onChanged();
            return this;
          }
          /**
           * <code>required bytes script_pubkey = 2;</code>
           * @return This builder for chaining.
           */
          public Builder clearScriptPubkey() {
            bitField0_ = (bitField0_ & ~0x00000002);
            scriptPubkey_ = getDefaultInstance().getScriptPubkey();
            onChanged();
            return this;
          }

          private int decredScriptVersion_ ;
          /**
           * <pre>
           * only for Decred, currently only 0 is supported
           * </pre>
           *
           * <code>optional uint32 decred_script_version = 3;</code>
           * @return Whether the decredScriptVersion field is set.
           */
          @java.lang.Override
          public boolean hasDecredScriptVersion() {
            return ((bitField0_ & 0x00000004) != 0);
          }
          /**
           * <pre>
           * only for Decred, currently only 0 is supported
           * </pre>
           *
           * <code>optional uint32 decred_script_version = 3;</code>
           * @return The decredScriptVersion.
           */
          @java.lang.Override
          public int getDecredScriptVersion() {
            return decredScriptVersion_;
          }
          /**
           * <pre>
           * only for Decred, currently only 0 is supported
           * </pre>
           *
           * <code>optional uint32 decred_script_version = 3;</code>
           * @param value The decredScriptVersion to set.
           * @return This builder for chaining.
           */
          public Builder setDecredScriptVersion(int value) {

            decredScriptVersion_ = value;
            bitField0_ |= 0x00000004;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * only for Decred, currently only 0 is supported
           * </pre>
           *
           * <code>optional uint32 decred_script_version = 3;</code>
           * @return This builder for chaining.
           */
          public Builder clearDecredScriptVersion() {
            bitField0_ = (bitField0_ & ~0x00000004);
            decredScriptVersion_ = 0;
            onChanged();
            return this;
          }

          // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType)
        }

        // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType)
        private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType();
        }

        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<TxOutputBinType>
            PARSER = new com.google.protobuf.AbstractParser<TxOutputBinType>() {
          @java.lang.Override
          public TxOutputBinType parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

        public static com.google.protobuf.Parser<TxOutputBinType> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<TxOutputBinType> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public interface TxOutputTypeOrBuilder extends
          // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * target coin address in Base58 encoding
         * </pre>
         *
         * <code>optional string address = 1;</code>
         * @return Whether the address field is set.
         */
        boolean hasAddress();
        /**
         * <pre>
         * target coin address in Base58 encoding
         * </pre>
         *
         * <code>optional string address = 1;</code>
         * @return The address.
         */
        java.lang.String getAddress();
        /**
         * <pre>
         * target coin address in Base58 encoding
         * </pre>
         *
         * <code>optional string address = 1;</code>
         * @return The bytes for address.
         */
        com.google.protobuf.ByteString
            getAddressBytes();

        /**
         * <pre>
         * BIP-32 path to derive the key from master node; has higher priority than "address"
         * </pre>
         *
         * <code>repeated uint32 address_n = 2;</code>
         * @return A list containing the addressN.
         */
        java.util.List<java.lang.Integer> getAddressNList();
        /**
         * <pre>
         * BIP-32 path to derive the key from master node; has higher priority than "address"
         * </pre>
         *
         * <code>repeated uint32 address_n = 2;</code>
         * @return The count of addressN.
         */
        int getAddressNCount();
        /**
         * <pre>
         * BIP-32 path to derive the key from master node; has higher priority than "address"
         * </pre>
         *
         * <code>repeated uint32 address_n = 2;</code>
         * @param index The index of the element to return.
         * @return The addressN at the given index.
         */
        int getAddressN(int index);

        /**
         * <pre>
         * amount to spend in satoshis
         * </pre>
         *
         * <code>required uint64 amount = 3;</code>
         * @return Whether the amount field is set.
         */
        boolean hasAmount();
        /**
         * <pre>
         * amount to spend in satoshis
         * </pre>
         *
         * <code>required uint64 amount = 3;</code>
         * @return The amount.
         */
        long getAmount();

        /**
         * <pre>
         * output script type
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.OutputScriptType script_type = 4 [default = PAYTOADDRESS];</code>
         * @return Whether the scriptType field is set.
         */
        boolean hasScriptType();
        /**
         * <pre>
         * output script type
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.OutputScriptType script_type = 4 [default = PAYTOADDRESS];</code>
         * @return The scriptType.
         */
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType getScriptType();

        /**
         * <pre>
         * defines multisig address; script_type must be PAYTOMULTISIG
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
         * @return Whether the multisig field is set.
         */
        boolean hasMultisig();
        /**
         * <pre>
         * defines multisig address; script_type must be PAYTOMULTISIG
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
         * @return The multisig.
         */
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig();
        /**
         * <pre>
         * defines multisig address; script_type must be PAYTOMULTISIG
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
         */
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder();

        /**
         * <pre>
         * defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
         * </pre>
         *
         * <code>optional bytes op_return_data = 6;</code>
         * @return Whether the opReturnData field is set.
         */
        boolean hasOpReturnData();
        /**
         * <pre>
         * defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
         * </pre>
         *
         * <code>optional bytes op_return_data = 6;</code>
         * @return The opReturnData.
         */
        com.google.protobuf.ByteString getOpReturnData();

        /**
         * <pre>
         * optional uint32 decred_script_version = 7;      // only for Decred  // deprecated -&gt; only 0 is supported
         * optional bytes block_hash_bip115 = 8;        // BIP-115 support dropped
         * optional uint32 block_height_bip115 = 9;     // BIP-115 support dropped
         * </pre>
         *
         * <code>optional bytes orig_hash = 10;</code>
         * @return Whether the origHash field is set.
         */
        boolean hasOrigHash();
        /**
         * <pre>
         * optional uint32 decred_script_version = 7;      // only for Decred  // deprecated -&gt; only 0 is supported
         * optional bytes block_hash_bip115 = 8;        // BIP-115 support dropped
         * optional uint32 block_height_bip115 = 9;     // BIP-115 support dropped
         * </pre>
         *
         * <code>optional bytes orig_hash = 10;</code>
         * @return The origHash.
         */
        com.google.protobuf.ByteString getOrigHash();

        /**
         * <pre>
         * index of the output in the original transaction (used when creating a replacement transaction)
         * </pre>
         *
         * <code>optional uint32 orig_index = 11;</code>
         * @return Whether the origIndex field is set.
         */
        boolean hasOrigIndex();
        /**
         * <pre>
         * index of the output in the original transaction (used when creating a replacement transaction)
         * </pre>
         *
         * <code>optional uint32 orig_index = 11;</code>
         * @return The origIndex.
         */
        int getOrigIndex();

        /**
         * <pre>
         * index of the PaymentRequest containing this output
         * </pre>
         *
         * <code>optional uint32 payment_req_index = 12 [(.hw.trezor.messages.experimental_field) = true];</code>
         * @return Whether the paymentReqIndex field is set.
         */
        boolean hasPaymentReqIndex();
        /**
         * <pre>
         * index of the PaymentRequest containing this output
         * </pre>
         *
         * <code>optional uint32 payment_req_index = 12 [(.hw.trezor.messages.experimental_field) = true];</code>
         * @return The paymentReqIndex.
         */
        int getPaymentReqIndex();
      }
      /**
       * <pre>
       * *
       * Structure representing transaction output
       * </pre>
       *
       * Protobuf type {@code hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType}
       */
      public static final class TxOutputType extends
          com.google.protobuf.GeneratedMessage implements
          // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType)
          TxOutputTypeOrBuilder {
      private static final long serialVersionUID = 0L;
        static {
          com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
            com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
            /* major= */ 4,
            /* minor= */ 28,
            /* patch= */ 3,
            /* suffix= */ "",
            TxOutputType.class.getName());
        }
        // Use TxOutputType.newBuilder() to construct.
        private TxOutputType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
          super(builder);
        }
        private TxOutputType() {
          address_ = "";
          addressN_ = emptyIntList();
          scriptType_ = 0;
          opReturnData_ = com.google.protobuf.ByteString.EMPTY;
          origHash_ = com.google.protobuf.ByteString.EMPTY;
        }

        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.Builder.class);
        }

        private int bitField0_;
        public static final int ADDRESS_FIELD_NUMBER = 1;
        @SuppressWarnings("serial")
        private volatile java.lang.Object address_ = "";
        /**
         * <pre>
         * target coin address in Base58 encoding
         * </pre>
         *
         * <code>optional string address = 1;</code>
         * @return Whether the address field is set.
         */
        @java.lang.Override
        public boolean hasAddress() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * target coin address in Base58 encoding
         * </pre>
         *
         * <code>optional string address = 1;</code>
         * @return The address.
         */
        @java.lang.Override
        public java.lang.String getAddress() {
          java.lang.Object ref = address_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              address_ = s;
            }
            return s;
          }
        }
        /**
         * <pre>
         * target coin address in Base58 encoding
         * </pre>
         *
         * <code>optional string address = 1;</code>
         * @return The bytes for address.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getAddressBytes() {
          java.lang.Object ref = address_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            address_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int ADDRESS_N_FIELD_NUMBER = 2;
        @SuppressWarnings("serial")
        private com.google.protobuf.Internal.IntList addressN_ =
            emptyIntList();
        /**
         * <pre>
         * BIP-32 path to derive the key from master node; has higher priority than "address"
         * </pre>
         *
         * <code>repeated uint32 address_n = 2;</code>
         * @return A list containing the addressN.
         */
        @java.lang.Override
        public java.util.List<java.lang.Integer>
            getAddressNList() {
          return addressN_;
        }
        /**
         * <pre>
         * BIP-32 path to derive the key from master node; has higher priority than "address"
         * </pre>
         *
         * <code>repeated uint32 address_n = 2;</code>
         * @return The count of addressN.
         */
        public int getAddressNCount() {
          return addressN_.size();
        }
        /**
         * <pre>
         * BIP-32 path to derive the key from master node; has higher priority than "address"
         * </pre>
         *
         * <code>repeated uint32 address_n = 2;</code>
         * @param index The index of the element to return.
         * @return The addressN at the given index.
         */
        public int getAddressN(int index) {
          return addressN_.getInt(index);
        }

        public static final int AMOUNT_FIELD_NUMBER = 3;
        private long amount_ = 0L;
        /**
         * <pre>
         * amount to spend in satoshis
         * </pre>
         *
         * <code>required uint64 amount = 3;</code>
         * @return Whether the amount field is set.
         */
        @java.lang.Override
        public boolean hasAmount() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * amount to spend in satoshis
         * </pre>
         *
         * <code>required uint64 amount = 3;</code>
         * @return The amount.
         */
        @java.lang.Override
        public long getAmount() {
          return amount_;
        }

        public static final int SCRIPT_TYPE_FIELD_NUMBER = 4;
        private int scriptType_ = 0;
        /**
         * <pre>
         * output script type
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.OutputScriptType script_type = 4 [default = PAYTOADDRESS];</code>
         * @return Whether the scriptType field is set.
         */
        @java.lang.Override public boolean hasScriptType() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * output script type
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.OutputScriptType script_type = 4 [default = PAYTOADDRESS];</code>
         * @return The scriptType.
         */
        @java.lang.Override public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType getScriptType() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType.forNumber(scriptType_);
          return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType.PAYTOADDRESS : result;
        }

        public static final int MULTISIG_FIELD_NUMBER = 5;
        private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType multisig_;
        /**
         * <pre>
         * defines multisig address; script_type must be PAYTOMULTISIG
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
         * @return Whether the multisig field is set.
         */
        @java.lang.Override
        public boolean hasMultisig() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * defines multisig address; script_type must be PAYTOMULTISIG
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
         * @return The multisig.
         */
        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig() {
          return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
        }
        /**
         * <pre>
         * defines multisig address; script_type must be PAYTOMULTISIG
         * </pre>
         *
         * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
         */
        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder() {
          return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
        }

        public static final int OP_RETURN_DATA_FIELD_NUMBER = 6;
        private com.google.protobuf.ByteString opReturnData_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
         * </pre>
         *
         * <code>optional bytes op_return_data = 6;</code>
         * @return Whether the opReturnData field is set.
         */
        @java.lang.Override
        public boolean hasOpReturnData() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         * defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
         * </pre>
         *
         * <code>optional bytes op_return_data = 6;</code>
         * @return The opReturnData.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getOpReturnData() {
          return opReturnData_;
        }

        public static final int ORIG_HASH_FIELD_NUMBER = 10;
        private com.google.protobuf.ByteString origHash_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * optional uint32 decred_script_version = 7;      // only for Decred  // deprecated -&gt; only 0 is supported
         * optional bytes block_hash_bip115 = 8;        // BIP-115 support dropped
         * optional uint32 block_height_bip115 = 9;     // BIP-115 support dropped
         * </pre>
         *
         * <code>optional bytes orig_hash = 10;</code>
         * @return Whether the origHash field is set.
         */
        @java.lang.Override
        public boolean hasOrigHash() {
          return ((bitField0_ & 0x00000020) != 0);
        }
        /**
         * <pre>
         * optional uint32 decred_script_version = 7;      // only for Decred  // deprecated -&gt; only 0 is supported
         * optional bytes block_hash_bip115 = 8;        // BIP-115 support dropped
         * optional uint32 block_height_bip115 = 9;     // BIP-115 support dropped
         * </pre>
         *
         * <code>optional bytes orig_hash = 10;</code>
         * @return The origHash.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getOrigHash() {
          return origHash_;
        }

        public static final int ORIG_INDEX_FIELD_NUMBER = 11;
        private int origIndex_ = 0;
        /**
         * <pre>
         * index of the output in the original transaction (used when creating a replacement transaction)
         * </pre>
         *
         * <code>optional uint32 orig_index = 11;</code>
         * @return Whether the origIndex field is set.
         */
        @java.lang.Override
        public boolean hasOrigIndex() {
          return ((bitField0_ & 0x00000040) != 0);
        }
        /**
         * <pre>
         * index of the output in the original transaction (used when creating a replacement transaction)
         * </pre>
         *
         * <code>optional uint32 orig_index = 11;</code>
         * @return The origIndex.
         */
        @java.lang.Override
        public int getOrigIndex() {
          return origIndex_;
        }

        public static final int PAYMENT_REQ_INDEX_FIELD_NUMBER = 12;
        private int paymentReqIndex_ = 0;
        /**
         * <pre>
         * index of the PaymentRequest containing this output
         * </pre>
         *
         * <code>optional uint32 payment_req_index = 12 [(.hw.trezor.messages.experimental_field) = true];</code>
         * @return Whether the paymentReqIndex field is set.
         */
        @java.lang.Override
        public boolean hasPaymentReqIndex() {
          return ((bitField0_ & 0x00000080) != 0);
        }
        /**
         * <pre>
         * index of the PaymentRequest containing this output
         * </pre>
         *
         * <code>optional uint32 payment_req_index = 12 [(.hw.trezor.messages.experimental_field) = true];</code>
         * @return The paymentReqIndex.
         */
        @java.lang.Override
        public int getPaymentReqIndex() {
          return paymentReqIndex_;
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          if (!hasAmount()) {
            memoizedIsInitialized = 0;
            return false;
          }
          if (hasMultisig()) {
            if (!getMultisig().isInitialized()) {
              memoizedIsInitialized = 0;
              return false;
            }
          }
          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (((bitField0_ & 0x00000001) != 0)) {
            com.google.protobuf.GeneratedMessage.writeString(output, 1, address_);
          }
          for (int i = 0; i < addressN_.size(); i++) {
            output.writeUInt32(2, addressN_.getInt(i));
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            output.writeUInt64(3, amount_);
          }
          if (((bitField0_ & 0x00000004) != 0)) {
            output.writeEnum(4, scriptType_);
          }
          if (((bitField0_ & 0x00000008) != 0)) {
            output.writeMessage(5, getMultisig());
          }
          if (((bitField0_ & 0x00000010) != 0)) {
            output.writeBytes(6, opReturnData_);
          }
          if (((bitField0_ & 0x00000020) != 0)) {
            output.writeBytes(10, origHash_);
          }
          if (((bitField0_ & 0x00000040) != 0)) {
            output.writeUInt32(11, origIndex_);
          }
          if (((bitField0_ & 0x00000080) != 0)) {
            output.writeUInt32(12, paymentReqIndex_);
          }
          getUnknownFields().writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) != 0)) {
            size += com.google.protobuf.GeneratedMessage.computeStringSize(1, address_);
          }
          {
            int dataSize = 0;
            for (int i = 0; i < addressN_.size(); i++) {
              dataSize += com.google.protobuf.CodedOutputStream
                .computeUInt32SizeNoTag(addressN_.getInt(i));
            }
            size += dataSize;
            size += 1 * getAddressNList().size();
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt64Size(3, amount_);
          }
          if (((bitField0_ & 0x00000004) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeEnumSize(4, scriptType_);
          }
          if (((bitField0_ & 0x00000008) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(5, getMultisig());
          }
          if (((bitField0_ & 0x00000010) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeBytesSize(6, opReturnData_);
          }
          if (((bitField0_ & 0x00000020) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeBytesSize(10, origHash_);
          }
          if (((bitField0_ & 0x00000040) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(11, origIndex_);
          }
          if (((bitField0_ & 0x00000080) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(12, paymentReqIndex_);
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType)) {
            return super.equals(obj);
          }
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType) obj;

          if (hasAddress() != other.hasAddress()) return false;
          if (hasAddress()) {
            if (!getAddress()
                .equals(other.getAddress())) return false;
          }
          if (!getAddressNList()
              .equals(other.getAddressNList())) return false;
          if (hasAmount() != other.hasAmount()) return false;
          if (hasAmount()) {
            if (getAmount()
                != other.getAmount()) return false;
          }
          if (hasScriptType() != other.hasScriptType()) return false;
          if (hasScriptType()) {
            if (scriptType_ != other.scriptType_) return false;
          }
          if (hasMultisig() != other.hasMultisig()) return false;
          if (hasMultisig()) {
            if (!getMultisig()
                .equals(other.getMultisig())) return false;
          }
          if (hasOpReturnData() != other.hasOpReturnData()) return false;
          if (hasOpReturnData()) {
            if (!getOpReturnData()
                .equals(other.getOpReturnData())) return false;
          }
          if (hasOrigHash() != other.hasOrigHash()) return false;
          if (hasOrigHash()) {
            if (!getOrigHash()
                .equals(other.getOrigHash())) return false;
          }
          if (hasOrigIndex() != other.hasOrigIndex()) return false;
          if (hasOrigIndex()) {
            if (getOrigIndex()
                != other.getOrigIndex()) return false;
          }
          if (hasPaymentReqIndex() != other.hasPaymentReqIndex()) return false;
          if (hasPaymentReqIndex()) {
            if (getPaymentReqIndex()
                != other.getPaymentReqIndex()) return false;
          }
          if (!getUnknownFields().equals(other.getUnknownFields())) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          if (hasAddress()) {
            hash = (37 * hash) + ADDRESS_FIELD_NUMBER;
            hash = (53 * hash) + getAddress().hashCode();
          }
          if (getAddressNCount() > 0) {
            hash = (37 * hash) + ADDRESS_N_FIELD_NUMBER;
            hash = (53 * hash) + getAddressNList().hashCode();
          }
          if (hasAmount()) {
            hash = (37 * hash) + AMOUNT_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getAmount());
          }
          if (hasScriptType()) {
            hash = (37 * hash) + SCRIPT_TYPE_FIELD_NUMBER;
            hash = (53 * hash) + scriptType_;
          }
          if (hasMultisig()) {
            hash = (37 * hash) + MULTISIG_FIELD_NUMBER;
            hash = (53 * hash) + getMultisig().hashCode();
          }
          if (hasOpReturnData()) {
            hash = (37 * hash) + OP_RETURN_DATA_FIELD_NUMBER;
            hash = (53 * hash) + getOpReturnData().hashCode();
          }
          if (hasOrigHash()) {
            hash = (37 * hash) + ORIG_HASH_FIELD_NUMBER;
            hash = (53 * hash) + getOrigHash().hashCode();
          }
          if (hasOrigIndex()) {
            hash = (37 * hash) + ORIG_INDEX_FIELD_NUMBER;
            hash = (53 * hash) + getOrigIndex();
          }
          if (hasPaymentReqIndex()) {
            hash = (37 * hash) + PAYMENT_REQ_INDEX_FIELD_NUMBER;
            hash = (53 * hash) + getPaymentReqIndex();
          }
          hash = (29 * hash) + getUnknownFields().hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseDelimitedWithIOException(PARSER, input);
        }

        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input);
        }
        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * <pre>
         * *
         * Structure representing transaction output
         * </pre>
         *
         * Protobuf type {@code hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessage.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType)
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputTypeOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputType_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputType_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.Builder.class);
          }

          // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessage
                    .alwaysUseFieldBuilders) {
              getMultisigFieldBuilder();
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            bitField0_ = 0;
            address_ = "";
            addressN_ = emptyIntList();
            amount_ = 0L;
            scriptType_ = 0;
            multisig_ = null;
            if (multisigBuilder_ != null) {
              multisigBuilder_.dispose();
              multisigBuilder_ = null;
            }
            opReturnData_ = com.google.protobuf.ByteString.EMPTY;
            origHash_ = com.google.protobuf.ByteString.EMPTY;
            origIndex_ = 0;
            paymentReqIndex_ = 0;
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputType_descriptor;
          }

          @java.lang.Override
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType getDefaultInstanceForType() {
            return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.getDefaultInstance();
          }

          @java.lang.Override
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType build() {
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType buildPartial() {
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType(this);
            if (bitField0_ != 0) { buildPartial0(result); }
            onBuilt();
            return result;
          }

          private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType result) {
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) != 0)) {
              result.address_ = address_;
              to_bitField0_ |= 0x00000001;
            }
            if (((from_bitField0_ & 0x00000002) != 0)) {
              addressN_.makeImmutable();
              result.addressN_ = addressN_;
            }
            if (((from_bitField0_ & 0x00000004) != 0)) {
              result.amount_ = amount_;
              to_bitField0_ |= 0x00000002;
            }
            if (((from_bitField0_ & 0x00000008) != 0)) {
              result.scriptType_ = scriptType_;
              to_bitField0_ |= 0x00000004;
            }
            if (((from_bitField0_ & 0x00000010) != 0)) {
              result.multisig_ = multisigBuilder_ == null
                  ? multisig_
                  : multisigBuilder_.build();
              to_bitField0_ |= 0x00000008;
            }
            if (((from_bitField0_ & 0x00000020) != 0)) {
              result.opReturnData_ = opReturnData_;
              to_bitField0_ |= 0x00000010;
            }
            if (((from_bitField0_ & 0x00000040) != 0)) {
              result.origHash_ = origHash_;
              to_bitField0_ |= 0x00000020;
            }
            if (((from_bitField0_ & 0x00000080) != 0)) {
              result.origIndex_ = origIndex_;
              to_bitField0_ |= 0x00000040;
            }
            if (((from_bitField0_ & 0x00000100) != 0)) {
              result.paymentReqIndex_ = paymentReqIndex_;
              to_bitField0_ |= 0x00000080;
            }
            result.bitField0_ |= to_bitField0_;
          }

          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType) {
              return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType other) {
            if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.getDefaultInstance()) return this;
            if (other.hasAddress()) {
              address_ = other.address_;
              bitField0_ |= 0x00000001;
              onChanged();
            }
            if (!other.addressN_.isEmpty()) {
              if (addressN_.isEmpty()) {
                addressN_ = other.addressN_;
                addressN_.makeImmutable();
                bitField0_ |= 0x00000002;
              } else {
                ensureAddressNIsMutable();
                addressN_.addAll(other.addressN_);
              }
              onChanged();
            }
            if (other.hasAmount()) {
              setAmount(other.getAmount());
            }
            if (other.hasScriptType()) {
              setScriptType(other.getScriptType());
            }
            if (other.hasMultisig()) {
              mergeMultisig(other.getMultisig());
            }
            if (other.hasOpReturnData()) {
              setOpReturnData(other.getOpReturnData());
            }
            if (other.hasOrigHash()) {
              setOrigHash(other.getOrigHash());
            }
            if (other.hasOrigIndex()) {
              setOrigIndex(other.getOrigIndex());
            }
            if (other.hasPaymentReqIndex()) {
              setPaymentReqIndex(other.getPaymentReqIndex());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            if (!hasAmount()) {
              return false;
            }
            if (hasMultisig()) {
              if (!getMultisig().isInitialized()) {
                return false;
              }
            }
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 10: {
                    address_ = input.readBytes();
                    bitField0_ |= 0x00000001;
                    break;
                  } // case 10
                  case 16: {
                    int v = input.readUInt32();
                    ensureAddressNIsMutable();
                    addressN_.addInt(v);
                    break;
                  } // case 16
                  case 18: {
                    int length = input.readRawVarint32();
                    int limit = input.pushLimit(length);
                    ensureAddressNIsMutable();
                    while (input.getBytesUntilLimit() > 0) {
                      addressN_.addInt(input.readUInt32());
                    }
                    input.popLimit(limit);
                    break;
                  } // case 18
                  case 24: {
                    amount_ = input.readUInt64();
                    bitField0_ |= 0x00000004;
                    break;
                  } // case 24
                  case 32: {
                    int tmpRaw = input.readEnum();
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType tmpValue =
                        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType.forNumber(tmpRaw);
                    if (tmpValue == null) {
                      mergeUnknownVarintField(4, tmpRaw);
                    } else {
                      scriptType_ = tmpRaw;
                      bitField0_ |= 0x00000008;
                    }
                    break;
                  } // case 32
                  case 42: {
                    input.readMessage(
                        getMultisigFieldBuilder().getBuilder(),
                        extensionRegistry);
                    bitField0_ |= 0x00000010;
                    break;
                  } // case 42
                  case 50: {
                    opReturnData_ = input.readBytes();
                    bitField0_ |= 0x00000020;
                    break;
                  } // case 50
                  case 82: {
                    origHash_ = input.readBytes();
                    bitField0_ |= 0x00000040;
                    break;
                  } // case 82
                  case 88: {
                    origIndex_ = input.readUInt32();
                    bitField0_ |= 0x00000080;
                    break;
                  } // case 88
                  case 96: {
                    paymentReqIndex_ = input.readUInt32();
                    bitField0_ |= 0x00000100;
                    break;
                  } // case 96
                  default: {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
                } // switch (tag)
              } // while (!done)
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.unwrapIOException();
            } finally {
              onChanged();
            } // finally
            return this;
          }
          private int bitField0_;

          private java.lang.Object address_ = "";
          /**
           * <pre>
           * target coin address in Base58 encoding
           * </pre>
           *
           * <code>optional string address = 1;</code>
           * @return Whether the address field is set.
           */
          public boolean hasAddress() {
            return ((bitField0_ & 0x00000001) != 0);
          }
          /**
           * <pre>
           * target coin address in Base58 encoding
           * </pre>
           *
           * <code>optional string address = 1;</code>
           * @return The address.
           */
          public java.lang.String getAddress() {
            java.lang.Object ref = address_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              if (bs.isValidUtf8()) {
                address_ = s;
              }
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * target coin address in Base58 encoding
           * </pre>
           *
           * <code>optional string address = 1;</code>
           * @return The bytes for address.
           */
          public com.google.protobuf.ByteString
              getAddressBytes() {
            java.lang.Object ref = address_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              address_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * target coin address in Base58 encoding
           * </pre>
           *
           * <code>optional string address = 1;</code>
           * @param value The address to set.
           * @return This builder for chaining.
           */
          public Builder setAddress(
              java.lang.String value) {
            if (value == null) { throw new NullPointerException(); }
            address_ = value;
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * target coin address in Base58 encoding
           * </pre>
           *
           * <code>optional string address = 1;</code>
           * @return This builder for chaining.
           */
          public Builder clearAddress() {
            address_ = getDefaultInstance().getAddress();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
            return this;
          }
          /**
           * <pre>
           * target coin address in Base58 encoding
           * </pre>
           *
           * <code>optional string address = 1;</code>
           * @param value The bytes for address to set.
           * @return This builder for chaining.
           */
          public Builder setAddressBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            address_ = value;
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }

          private com.google.protobuf.Internal.IntList addressN_ = emptyIntList();
          private void ensureAddressNIsMutable() {
            if (!addressN_.isModifiable()) {
              addressN_ = makeMutableCopy(addressN_);
            }
            bitField0_ |= 0x00000002;
          }
          /**
           * <pre>
           * BIP-32 path to derive the key from master node; has higher priority than "address"
           * </pre>
           *
           * <code>repeated uint32 address_n = 2;</code>
           * @return A list containing the addressN.
           */
          public java.util.List<java.lang.Integer>
              getAddressNList() {
            addressN_.makeImmutable();
            return addressN_;
          }
          /**
           * <pre>
           * BIP-32 path to derive the key from master node; has higher priority than "address"
           * </pre>
           *
           * <code>repeated uint32 address_n = 2;</code>
           * @return The count of addressN.
           */
          public int getAddressNCount() {
            return addressN_.size();
          }
          /**
           * <pre>
           * BIP-32 path to derive the key from master node; has higher priority than "address"
           * </pre>
           *
           * <code>repeated uint32 address_n = 2;</code>
           * @param index The index of the element to return.
           * @return The addressN at the given index.
           */
          public int getAddressN(int index) {
            return addressN_.getInt(index);
          }
          /**
           * <pre>
           * BIP-32 path to derive the key from master node; has higher priority than "address"
           * </pre>
           *
           * <code>repeated uint32 address_n = 2;</code>
           * @param index The index to set the value at.
           * @param value The addressN to set.
           * @return This builder for chaining.
           */
          public Builder setAddressN(
              int index, int value) {

            ensureAddressNIsMutable();
            addressN_.setInt(index, value);
            bitField0_ |= 0x00000002;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * BIP-32 path to derive the key from master node; has higher priority than "address"
           * </pre>
           *
           * <code>repeated uint32 address_n = 2;</code>
           * @param value The addressN to add.
           * @return This builder for chaining.
           */
          public Builder addAddressN(int value) {

            ensureAddressNIsMutable();
            addressN_.addInt(value);
            bitField0_ |= 0x00000002;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * BIP-32 path to derive the key from master node; has higher priority than "address"
           * </pre>
           *
           * <code>repeated uint32 address_n = 2;</code>
           * @param values The addressN to add.
           * @return This builder for chaining.
           */
          public Builder addAllAddressN(
              java.lang.Iterable<? extends java.lang.Integer> values) {
            ensureAddressNIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, addressN_);
            bitField0_ |= 0x00000002;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * BIP-32 path to derive the key from master node; has higher priority than "address"
           * </pre>
           *
           * <code>repeated uint32 address_n = 2;</code>
           * @return This builder for chaining.
           */
          public Builder clearAddressN() {
            addressN_ = emptyIntList();
            bitField0_ = (bitField0_ & ~0x00000002);
            onChanged();
            return this;
          }

          private long amount_ ;
          /**
           * <pre>
           * amount to spend in satoshis
           * </pre>
           *
           * <code>required uint64 amount = 3;</code>
           * @return Whether the amount field is set.
           */
          @java.lang.Override
          public boolean hasAmount() {
            return ((bitField0_ & 0x00000004) != 0);
          }
          /**
           * <pre>
           * amount to spend in satoshis
           * </pre>
           *
           * <code>required uint64 amount = 3;</code>
           * @return The amount.
           */
          @java.lang.Override
          public long getAmount() {
            return amount_;
          }
          /**
           * <pre>
           * amount to spend in satoshis
           * </pre>
           *
           * <code>required uint64 amount = 3;</code>
           * @param value The amount to set.
           * @return This builder for chaining.
           */
          public Builder setAmount(long value) {

            amount_ = value;
            bitField0_ |= 0x00000004;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * amount to spend in satoshis
           * </pre>
           *
           * <code>required uint64 amount = 3;</code>
           * @return This builder for chaining.
           */
          public Builder clearAmount() {
            bitField0_ = (bitField0_ & ~0x00000004);
            amount_ = 0L;
            onChanged();
            return this;
          }

          private int scriptType_ = 0;
          /**
           * <pre>
           * output script type
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.OutputScriptType script_type = 4 [default = PAYTOADDRESS];</code>
           * @return Whether the scriptType field is set.
           */
          @java.lang.Override public boolean hasScriptType() {
            return ((bitField0_ & 0x00000008) != 0);
          }
          /**
           * <pre>
           * output script type
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.OutputScriptType script_type = 4 [default = PAYTOADDRESS];</code>
           * @return The scriptType.
           */
          @java.lang.Override
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType getScriptType() {
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType.forNumber(scriptType_);
            return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType.PAYTOADDRESS : result;
          }
          /**
           * <pre>
           * output script type
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.OutputScriptType script_type = 4 [default = PAYTOADDRESS];</code>
           * @param value The scriptType to set.
           * @return This builder for chaining.
           */
          public Builder setScriptType(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType value) {
            if (value == null) {
              throw new NullPointerException();
            }
            bitField0_ |= 0x00000008;
            scriptType_ = value.getNumber();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * output script type
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.OutputScriptType script_type = 4 [default = PAYTOADDRESS];</code>
           * @return This builder for chaining.
           */
          public Builder clearScriptType() {
            bitField0_ = (bitField0_ & ~0x00000008);
            scriptType_ = 0;
            onChanged();
            return this;
          }

          private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType multisig_;
          private com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder> multisigBuilder_;
          /**
           * <pre>
           * defines multisig address; script_type must be PAYTOMULTISIG
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
           * @return Whether the multisig field is set.
           */
          public boolean hasMultisig() {
            return ((bitField0_ & 0x00000010) != 0);
          }
          /**
           * <pre>
           * defines multisig address; script_type must be PAYTOMULTISIG
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
           * @return The multisig.
           */
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig() {
            if (multisigBuilder_ == null) {
              return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
            } else {
              return multisigBuilder_.getMessage();
            }
          }
          /**
           * <pre>
           * defines multisig address; script_type must be PAYTOMULTISIG
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
           */
          public Builder setMultisig(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType value) {
            if (multisigBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              multisig_ = value;
            } else {
              multisigBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000010;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * defines multisig address; script_type must be PAYTOMULTISIG
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
           */
          public Builder setMultisig(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder builderForValue) {
            if (multisigBuilder_ == null) {
              multisig_ = builderForValue.build();
            } else {
              multisigBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000010;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * defines multisig address; script_type must be PAYTOMULTISIG
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
           */
          public Builder mergeMultisig(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType value) {
            if (multisigBuilder_ == null) {
              if (((bitField0_ & 0x00000010) != 0) &&
                multisig_ != null &&
                multisig_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance()) {
                getMultisigBuilder().mergeFrom(value);
              } else {
                multisig_ = value;
              }
            } else {
              multisigBuilder_.mergeFrom(value);
            }
            if (multisig_ != null) {
              bitField0_ |= 0x00000010;
              onChanged();
            }
            return this;
          }
          /**
           * <pre>
           * defines multisig address; script_type must be PAYTOMULTISIG
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
           */
          public Builder clearMultisig() {
            bitField0_ = (bitField0_ & ~0x00000010);
            multisig_ = null;
            if (multisigBuilder_ != null) {
              multisigBuilder_.dispose();
              multisigBuilder_ = null;
            }
            onChanged();
            return this;
          }
          /**
           * <pre>
           * defines multisig address; script_type must be PAYTOMULTISIG
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
           */
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder getMultisigBuilder() {
            bitField0_ |= 0x00000010;
            onChanged();
            return getMultisigFieldBuilder().getBuilder();
          }
          /**
           * <pre>
           * defines multisig address; script_type must be PAYTOMULTISIG
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
           */
          public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder() {
            if (multisigBuilder_ != null) {
              return multisigBuilder_.getMessageOrBuilder();
            } else {
              return multisig_ == null ?
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
            }
          }
          /**
           * <pre>
           * defines multisig address; script_type must be PAYTOMULTISIG
           * </pre>
           *
           * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
           */
          private com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder> 
              getMultisigFieldBuilder() {
            if (multisigBuilder_ == null) {
              multisigBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder>(
                      getMultisig(),
                      getParentForChildren(),
                      isClean());
              multisig_ = null;
            }
            return multisigBuilder_;
          }

          private com.google.protobuf.ByteString opReturnData_ = com.google.protobuf.ByteString.EMPTY;
          /**
           * <pre>
           * defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
           * </pre>
           *
           * <code>optional bytes op_return_data = 6;</code>
           * @return Whether the opReturnData field is set.
           */
          @java.lang.Override
          public boolean hasOpReturnData() {
            return ((bitField0_ & 0x00000020) != 0);
          }
          /**
           * <pre>
           * defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
           * </pre>
           *
           * <code>optional bytes op_return_data = 6;</code>
           * @return The opReturnData.
           */
          @java.lang.Override
          public com.google.protobuf.ByteString getOpReturnData() {
            return opReturnData_;
          }
          /**
           * <pre>
           * defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
           * </pre>
           *
           * <code>optional bytes op_return_data = 6;</code>
           * @param value The opReturnData to set.
           * @return This builder for chaining.
           */
          public Builder setOpReturnData(com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            opReturnData_ = value;
            bitField0_ |= 0x00000020;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
           * </pre>
           *
           * <code>optional bytes op_return_data = 6;</code>
           * @return This builder for chaining.
           */
          public Builder clearOpReturnData() {
            bitField0_ = (bitField0_ & ~0x00000020);
            opReturnData_ = getDefaultInstance().getOpReturnData();
            onChanged();
            return this;
          }

          private com.google.protobuf.ByteString origHash_ = com.google.protobuf.ByteString.EMPTY;
          /**
           * <pre>
           * optional uint32 decred_script_version = 7;      // only for Decred  // deprecated -&gt; only 0 is supported
           * optional bytes block_hash_bip115 = 8;        // BIP-115 support dropped
           * optional uint32 block_height_bip115 = 9;     // BIP-115 support dropped
           * </pre>
           *
           * <code>optional bytes orig_hash = 10;</code>
           * @return Whether the origHash field is set.
           */
          @java.lang.Override
          public boolean hasOrigHash() {
            return ((bitField0_ & 0x00000040) != 0);
          }
          /**
           * <pre>
           * optional uint32 decred_script_version = 7;      // only for Decred  // deprecated -&gt; only 0 is supported
           * optional bytes block_hash_bip115 = 8;        // BIP-115 support dropped
           * optional uint32 block_height_bip115 = 9;     // BIP-115 support dropped
           * </pre>
           *
           * <code>optional bytes orig_hash = 10;</code>
           * @return The origHash.
           */
          @java.lang.Override
          public com.google.protobuf.ByteString getOrigHash() {
            return origHash_;
          }
          /**
           * <pre>
           * optional uint32 decred_script_version = 7;      // only for Decred  // deprecated -&gt; only 0 is supported
           * optional bytes block_hash_bip115 = 8;        // BIP-115 support dropped
           * optional uint32 block_height_bip115 = 9;     // BIP-115 support dropped
           * </pre>
           *
           * <code>optional bytes orig_hash = 10;</code>
           * @param value The origHash to set.
           * @return This builder for chaining.
           */
          public Builder setOrigHash(com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            origHash_ = value;
            bitField0_ |= 0x00000040;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * optional uint32 decred_script_version = 7;      // only for Decred  // deprecated -&gt; only 0 is supported
           * optional bytes block_hash_bip115 = 8;        // BIP-115 support dropped
           * optional uint32 block_height_bip115 = 9;     // BIP-115 support dropped
           * </pre>
           *
           * <code>optional bytes orig_hash = 10;</code>
           * @return This builder for chaining.
           */
          public Builder clearOrigHash() {
            bitField0_ = (bitField0_ & ~0x00000040);
            origHash_ = getDefaultInstance().getOrigHash();
            onChanged();
            return this;
          }

          private int origIndex_ ;
          /**
           * <pre>
           * index of the output in the original transaction (used when creating a replacement transaction)
           * </pre>
           *
           * <code>optional uint32 orig_index = 11;</code>
           * @return Whether the origIndex field is set.
           */
          @java.lang.Override
          public boolean hasOrigIndex() {
            return ((bitField0_ & 0x00000080) != 0);
          }
          /**
           * <pre>
           * index of the output in the original transaction (used when creating a replacement transaction)
           * </pre>
           *
           * <code>optional uint32 orig_index = 11;</code>
           * @return The origIndex.
           */
          @java.lang.Override
          public int getOrigIndex() {
            return origIndex_;
          }
          /**
           * <pre>
           * index of the output in the original transaction (used when creating a replacement transaction)
           * </pre>
           *
           * <code>optional uint32 orig_index = 11;</code>
           * @param value The origIndex to set.
           * @return This builder for chaining.
           */
          public Builder setOrigIndex(int value) {

            origIndex_ = value;
            bitField0_ |= 0x00000080;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * index of the output in the original transaction (used when creating a replacement transaction)
           * </pre>
           *
           * <code>optional uint32 orig_index = 11;</code>
           * @return This builder for chaining.
           */
          public Builder clearOrigIndex() {
            bitField0_ = (bitField0_ & ~0x00000080);
            origIndex_ = 0;
            onChanged();
            return this;
          }

          private int paymentReqIndex_ ;
          /**
           * <pre>
           * index of the PaymentRequest containing this output
           * </pre>
           *
           * <code>optional uint32 payment_req_index = 12 [(.hw.trezor.messages.experimental_field) = true];</code>
           * @return Whether the paymentReqIndex field is set.
           */
          @java.lang.Override
          public boolean hasPaymentReqIndex() {
            return ((bitField0_ & 0x00000100) != 0);
          }
          /**
           * <pre>
           * index of the PaymentRequest containing this output
           * </pre>
           *
           * <code>optional uint32 payment_req_index = 12 [(.hw.trezor.messages.experimental_field) = true];</code>
           * @return The paymentReqIndex.
           */
          @java.lang.Override
          public int getPaymentReqIndex() {
            return paymentReqIndex_;
          }
          /**
           * <pre>
           * index of the PaymentRequest containing this output
           * </pre>
           *
           * <code>optional uint32 payment_req_index = 12 [(.hw.trezor.messages.experimental_field) = true];</code>
           * @param value The paymentReqIndex to set.
           * @return This builder for chaining.
           */
          public Builder setPaymentReqIndex(int value) {

            paymentReqIndex_ = value;
            bitField0_ |= 0x00000100;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * index of the PaymentRequest containing this output
           * </pre>
           *
           * <code>optional uint32 payment_req_index = 12 [(.hw.trezor.messages.experimental_field) = true];</code>
           * @return This builder for chaining.
           */
          public Builder clearPaymentReqIndex() {
            bitField0_ = (bitField0_ & ~0x00000100);
            paymentReqIndex_ = 0;
            onChanged();
            return this;
          }

          // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType)
        }

        // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType)
        private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType();
        }

        public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<TxOutputType>
            PARSER = new com.google.protobuf.AbstractParser<TxOutputType>() {
          @java.lang.Override
          public TxOutputType parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

        public static com.google.protobuf.Parser<TxOutputType> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<TxOutputType> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      private int bitField0_;
      public static final int VERSION_FIELD_NUMBER = 1;
      private int version_ = 0;
      /**
       * <code>optional uint32 version = 1;</code>
       * @return Whether the version field is set.
       */
      @java.lang.Override
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional uint32 version = 1;</code>
       * @return The version.
       */
      @java.lang.Override
      public int getVersion() {
        return version_;
      }

      public static final int INPUTS_FIELD_NUMBER = 2;
      @SuppressWarnings("serial")
      private java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType> inputs_;
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
       */
      @java.lang.Override
      public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType> getInputsList() {
        return inputs_;
      }
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
       */
      @java.lang.Override
      public java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputTypeOrBuilder> 
          getInputsOrBuilderList() {
        return inputs_;
      }
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
       */
      @java.lang.Override
      public int getInputsCount() {
        return inputs_.size();
      }
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType getInputs(int index) {
        return inputs_.get(index);
      }
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputTypeOrBuilder getInputsOrBuilder(
          int index) {
        return inputs_.get(index);
      }

      public static final int BIN_OUTPUTS_FIELD_NUMBER = 3;
      @SuppressWarnings("serial")
      private java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType> binOutputs_;
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
       */
      @java.lang.Override
      public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType> getBinOutputsList() {
        return binOutputs_;
      }
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
       */
      @java.lang.Override
      public java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinTypeOrBuilder> 
          getBinOutputsOrBuilderList() {
        return binOutputs_;
      }
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
       */
      @java.lang.Override
      public int getBinOutputsCount() {
        return binOutputs_.size();
      }
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType getBinOutputs(int index) {
        return binOutputs_.get(index);
      }
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinTypeOrBuilder getBinOutputsOrBuilder(
          int index) {
        return binOutputs_.get(index);
      }

      public static final int LOCK_TIME_FIELD_NUMBER = 4;
      private int lockTime_ = 0;
      /**
       * <code>optional uint32 lock_time = 4;</code>
       * @return Whether the lockTime field is set.
       */
      @java.lang.Override
      public boolean hasLockTime() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional uint32 lock_time = 4;</code>
       * @return The lockTime.
       */
      @java.lang.Override
      public int getLockTime() {
        return lockTime_;
      }

      public static final int OUTPUTS_FIELD_NUMBER = 5;
      @SuppressWarnings("serial")
      private java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType> outputs_;
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
       */
      @java.lang.Override
      public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType> getOutputsList() {
        return outputs_;
      }
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
       */
      @java.lang.Override
      public java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputTypeOrBuilder> 
          getOutputsOrBuilderList() {
        return outputs_;
      }
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
       */
      @java.lang.Override
      public int getOutputsCount() {
        return outputs_.size();
      }
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType getOutputs(int index) {
        return outputs_.get(index);
      }
      /**
       * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputTypeOrBuilder getOutputsOrBuilder(
          int index) {
        return outputs_.get(index);
      }

      public static final int INPUTS_CNT_FIELD_NUMBER = 6;
      private int inputsCnt_ = 0;
      /**
       * <code>optional uint32 inputs_cnt = 6;</code>
       * @return Whether the inputsCnt field is set.
       */
      @java.lang.Override
      public boolean hasInputsCnt() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional uint32 inputs_cnt = 6;</code>
       * @return The inputsCnt.
       */
      @java.lang.Override
      public int getInputsCnt() {
        return inputsCnt_;
      }

      public static final int OUTPUTS_CNT_FIELD_NUMBER = 7;
      private int outputsCnt_ = 0;
      /**
       * <code>optional uint32 outputs_cnt = 7;</code>
       * @return Whether the outputsCnt field is set.
       */
      @java.lang.Override
      public boolean hasOutputsCnt() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional uint32 outputs_cnt = 7;</code>
       * @return The outputsCnt.
       */
      @java.lang.Override
      public int getOutputsCnt() {
        return outputsCnt_;
      }

      public static final int EXTRA_DATA_FIELD_NUMBER = 8;
      private com.google.protobuf.ByteString extraData_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * only for Dash, Zcash
       * </pre>
       *
       * <code>optional bytes extra_data = 8;</code>
       * @return Whether the extraData field is set.
       */
      @java.lang.Override
      public boolean hasExtraData() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * only for Dash, Zcash
       * </pre>
       *
       * <code>optional bytes extra_data = 8;</code>
       * @return The extraData.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getExtraData() {
        return extraData_;
      }

      public static final int EXTRA_DATA_LEN_FIELD_NUMBER = 9;
      private int extraDataLen_ = 0;
      /**
       * <pre>
       * only for Dash, Zcash
       * </pre>
       *
       * <code>optional uint32 extra_data_len = 9;</code>
       * @return Whether the extraDataLen field is set.
       */
      @java.lang.Override
      public boolean hasExtraDataLen() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * only for Dash, Zcash
       * </pre>
       *
       * <code>optional uint32 extra_data_len = 9;</code>
       * @return The extraDataLen.
       */
      @java.lang.Override
      public int getExtraDataLen() {
        return extraDataLen_;
      }

      public static final int EXPIRY_FIELD_NUMBER = 10;
      private int expiry_ = 0;
      /**
       * <pre>
       * only for Decred and Zcash
       * </pre>
       *
       * <code>optional uint32 expiry = 10;</code>
       * @return Whether the expiry field is set.
       */
      @java.lang.Override
      public boolean hasExpiry() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * only for Decred and Zcash
       * </pre>
       *
       * <code>optional uint32 expiry = 10;</code>
       * @return The expiry.
       */
      @java.lang.Override
      public int getExpiry() {
        return expiry_;
      }

      public static final int OVERWINTERED_FIELD_NUMBER = 11;
      private boolean overwintered_ = false;
      /**
       * <pre>
       * Zcash only; deprecated in 2.3.2, the field is not needed, it can be derived from `version`
       * </pre>
       *
       * <code>optional bool overwintered = 11 [deprecated = true];</code>
       * @deprecated hw.trezor.messages.bitcoin.TxAck.TransactionType.overwintered is deprecated.
       *     See messages-bitcoin.proto;l=298
       * @return Whether the overwintered field is set.
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean hasOverwintered() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * Zcash only; deprecated in 2.3.2, the field is not needed, it can be derived from `version`
       * </pre>
       *
       * <code>optional bool overwintered = 11 [deprecated = true];</code>
       * @deprecated hw.trezor.messages.bitcoin.TxAck.TransactionType.overwintered is deprecated.
       *     See messages-bitcoin.proto;l=298
       * @return The overwintered.
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean getOverwintered() {
        return overwintered_;
      }

      public static final int VERSION_GROUP_ID_FIELD_NUMBER = 12;
      private int versionGroupId_ = 0;
      /**
       * <pre>
       * only for Zcash, nVersionGroupId
       * </pre>
       *
       * <code>optional uint32 version_group_id = 12;</code>
       * @return Whether the versionGroupId field is set.
       */
      @java.lang.Override
      public boolean hasVersionGroupId() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * only for Zcash, nVersionGroupId
       * </pre>
       *
       * <code>optional uint32 version_group_id = 12;</code>
       * @return The versionGroupId.
       */
      @java.lang.Override
      public int getVersionGroupId() {
        return versionGroupId_;
      }

      public static final int TIMESTAMP_FIELD_NUMBER = 13;
      private int timestamp_ = 0;
      /**
       * <pre>
       * only for Peercoin
       * </pre>
       *
       * <code>optional uint32 timestamp = 13;</code>
       * @return Whether the timestamp field is set.
       */
      @java.lang.Override
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       * only for Peercoin
       * </pre>
       *
       * <code>optional uint32 timestamp = 13;</code>
       * @return The timestamp.
       */
      @java.lang.Override
      public int getTimestamp() {
        return timestamp_;
      }

      public static final int BRANCH_ID_FIELD_NUMBER = 14;
      private int branchId_ = 0;
      /**
       * <pre>
       * only for Zcash, BRANCH_ID
       * </pre>
       *
       * <code>optional uint32 branch_id = 14;</code>
       * @return Whether the branchId field is set.
       */
      @java.lang.Override
      public boolean hasBranchId() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       * only for Zcash, BRANCH_ID
       * </pre>
       *
       * <code>optional uint32 branch_id = 14;</code>
       * @return The branchId.
       */
      @java.lang.Override
      public int getBranchId() {
        return branchId_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        for (int i = 0; i < getInputsCount(); i++) {
          if (!getInputs(i).isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        for (int i = 0; i < getBinOutputsCount(); i++) {
          if (!getBinOutputs(i).isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        for (int i = 0; i < getOutputsCount(); i++) {
          if (!getOutputs(i).isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt32(1, version_);
        }
        for (int i = 0; i < inputs_.size(); i++) {
          output.writeMessage(2, inputs_.get(i));
        }
        for (int i = 0; i < binOutputs_.size(); i++) {
          output.writeMessage(3, binOutputs_.get(i));
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeUInt32(4, lockTime_);
        }
        for (int i = 0; i < outputs_.size(); i++) {
          output.writeMessage(5, outputs_.get(i));
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeUInt32(6, inputsCnt_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeUInt32(7, outputsCnt_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          output.writeBytes(8, extraData_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          output.writeUInt32(9, extraDataLen_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          output.writeUInt32(10, expiry_);
        }
        if (((bitField0_ & 0x00000080) != 0)) {
          output.writeBool(11, overwintered_);
        }
        if (((bitField0_ & 0x00000100) != 0)) {
          output.writeUInt32(12, versionGroupId_);
        }
        if (((bitField0_ & 0x00000200) != 0)) {
          output.writeUInt32(13, timestamp_);
        }
        if (((bitField0_ & 0x00000400) != 0)) {
          output.writeUInt32(14, branchId_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, version_);
        }
        for (int i = 0; i < inputs_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, inputs_.get(i));
        }
        for (int i = 0; i < binOutputs_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, binOutputs_.get(i));
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(4, lockTime_);
        }
        for (int i = 0; i < outputs_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, outputs_.get(i));
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(6, inputsCnt_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(7, outputsCnt_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(8, extraData_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(9, extraDataLen_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(10, expiry_);
        }
        if (((bitField0_ & 0x00000080) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(11, overwintered_);
        }
        if (((bitField0_ & 0x00000100) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(12, versionGroupId_);
        }
        if (((bitField0_ & 0x00000200) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(13, timestamp_);
        }
        if (((bitField0_ & 0x00000400) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(14, branchId_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType) obj;

        if (hasVersion() != other.hasVersion()) return false;
        if (hasVersion()) {
          if (getVersion()
              != other.getVersion()) return false;
        }
        if (!getInputsList()
            .equals(other.getInputsList())) return false;
        if (!getBinOutputsList()
            .equals(other.getBinOutputsList())) return false;
        if (hasLockTime() != other.hasLockTime()) return false;
        if (hasLockTime()) {
          if (getLockTime()
              != other.getLockTime()) return false;
        }
        if (!getOutputsList()
            .equals(other.getOutputsList())) return false;
        if (hasInputsCnt() != other.hasInputsCnt()) return false;
        if (hasInputsCnt()) {
          if (getInputsCnt()
              != other.getInputsCnt()) return false;
        }
        if (hasOutputsCnt() != other.hasOutputsCnt()) return false;
        if (hasOutputsCnt()) {
          if (getOutputsCnt()
              != other.getOutputsCnt()) return false;
        }
        if (hasExtraData() != other.hasExtraData()) return false;
        if (hasExtraData()) {
          if (!getExtraData()
              .equals(other.getExtraData())) return false;
        }
        if (hasExtraDataLen() != other.hasExtraDataLen()) return false;
        if (hasExtraDataLen()) {
          if (getExtraDataLen()
              != other.getExtraDataLen()) return false;
        }
        if (hasExpiry() != other.hasExpiry()) return false;
        if (hasExpiry()) {
          if (getExpiry()
              != other.getExpiry()) return false;
        }
        if (hasOverwintered() != other.hasOverwintered()) return false;
        if (hasOverwintered()) {
          if (getOverwintered()
              != other.getOverwintered()) return false;
        }
        if (hasVersionGroupId() != other.hasVersionGroupId()) return false;
        if (hasVersionGroupId()) {
          if (getVersionGroupId()
              != other.getVersionGroupId()) return false;
        }
        if (hasTimestamp() != other.hasTimestamp()) return false;
        if (hasTimestamp()) {
          if (getTimestamp()
              != other.getTimestamp()) return false;
        }
        if (hasBranchId() != other.hasBranchId()) return false;
        if (hasBranchId()) {
          if (getBranchId()
              != other.getBranchId()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasVersion()) {
          hash = (37 * hash) + VERSION_FIELD_NUMBER;
          hash = (53 * hash) + getVersion();
        }
        if (getInputsCount() > 0) {
          hash = (37 * hash) + INPUTS_FIELD_NUMBER;
          hash = (53 * hash) + getInputsList().hashCode();
        }
        if (getBinOutputsCount() > 0) {
          hash = (37 * hash) + BIN_OUTPUTS_FIELD_NUMBER;
          hash = (53 * hash) + getBinOutputsList().hashCode();
        }
        if (hasLockTime()) {
          hash = (37 * hash) + LOCK_TIME_FIELD_NUMBER;
          hash = (53 * hash) + getLockTime();
        }
        if (getOutputsCount() > 0) {
          hash = (37 * hash) + OUTPUTS_FIELD_NUMBER;
          hash = (53 * hash) + getOutputsList().hashCode();
        }
        if (hasInputsCnt()) {
          hash = (37 * hash) + INPUTS_CNT_FIELD_NUMBER;
          hash = (53 * hash) + getInputsCnt();
        }
        if (hasOutputsCnt()) {
          hash = (37 * hash) + OUTPUTS_CNT_FIELD_NUMBER;
          hash = (53 * hash) + getOutputsCnt();
        }
        if (hasExtraData()) {
          hash = (37 * hash) + EXTRA_DATA_FIELD_NUMBER;
          hash = (53 * hash) + getExtraData().hashCode();
        }
        if (hasExtraDataLen()) {
          hash = (37 * hash) + EXTRA_DATA_LEN_FIELD_NUMBER;
          hash = (53 * hash) + getExtraDataLen();
        }
        if (hasExpiry()) {
          hash = (37 * hash) + EXPIRY_FIELD_NUMBER;
          hash = (53 * hash) + getExpiry();
        }
        if (hasOverwintered()) {
          hash = (37 * hash) + OVERWINTERED_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getOverwintered());
        }
        if (hasVersionGroupId()) {
          hash = (37 * hash) + VERSION_GROUP_ID_FIELD_NUMBER;
          hash = (53 * hash) + getVersionGroupId();
        }
        if (hasTimestamp()) {
          hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
          hash = (53 * hash) + getTimestamp();
        }
        if (hasBranchId()) {
          hash = (37 * hash) + BRANCH_ID_FIELD_NUMBER;
          hash = (53 * hash) + getBranchId();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * *
       * Structure representing transaction
       * </pre>
       *
       * Protobuf type {@code hw.trezor.messages.bitcoin.TxAck.TransactionType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAck.TransactionType)
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          version_ = 0;
          if (inputsBuilder_ == null) {
            inputs_ = java.util.Collections.emptyList();
          } else {
            inputs_ = null;
            inputsBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          if (binOutputsBuilder_ == null) {
            binOutputs_ = java.util.Collections.emptyList();
          } else {
            binOutputs_ = null;
            binOutputsBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          lockTime_ = 0;
          if (outputsBuilder_ == null) {
            outputs_ = java.util.Collections.emptyList();
          } else {
            outputs_ = null;
            outputsBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          inputsCnt_ = 0;
          outputsCnt_ = 0;
          extraData_ = com.google.protobuf.ByteString.EMPTY;
          extraDataLen_ = 0;
          expiry_ = 0;
          overwintered_ = false;
          versionGroupId_ = 0;
          timestamp_ = 0;
          branchId_ = 0;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType getDefaultInstanceForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType build() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType buildPartial() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType(this);
          buildPartialRepeatedFields(result);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartialRepeatedFields(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType result) {
          if (inputsBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0)) {
              inputs_ = java.util.Collections.unmodifiableList(inputs_);
              bitField0_ = (bitField0_ & ~0x00000002);
            }
            result.inputs_ = inputs_;
          } else {
            result.inputs_ = inputsBuilder_.build();
          }
          if (binOutputsBuilder_ == null) {
            if (((bitField0_ & 0x00000004) != 0)) {
              binOutputs_ = java.util.Collections.unmodifiableList(binOutputs_);
              bitField0_ = (bitField0_ & ~0x00000004);
            }
            result.binOutputs_ = binOutputs_;
          } else {
            result.binOutputs_ = binOutputsBuilder_.build();
          }
          if (outputsBuilder_ == null) {
            if (((bitField0_ & 0x00000010) != 0)) {
              outputs_ = java.util.Collections.unmodifiableList(outputs_);
              bitField0_ = (bitField0_ & ~0x00000010);
            }
            result.outputs_ = outputs_;
          } else {
            result.outputs_ = outputsBuilder_.build();
          }
        }

        private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.version_ = version_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.lockTime_ = lockTime_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000020) != 0)) {
            result.inputsCnt_ = inputsCnt_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000040) != 0)) {
            result.outputsCnt_ = outputsCnt_;
            to_bitField0_ |= 0x00000008;
          }
          if (((from_bitField0_ & 0x00000080) != 0)) {
            result.extraData_ = extraData_;
            to_bitField0_ |= 0x00000010;
          }
          if (((from_bitField0_ & 0x00000100) != 0)) {
            result.extraDataLen_ = extraDataLen_;
            to_bitField0_ |= 0x00000020;
          }
          if (((from_bitField0_ & 0x00000200) != 0)) {
            result.expiry_ = expiry_;
            to_bitField0_ |= 0x00000040;
          }
          if (((from_bitField0_ & 0x00000400) != 0)) {
            result.overwintered_ = overwintered_;
            to_bitField0_ |= 0x00000080;
          }
          if (((from_bitField0_ & 0x00000800) != 0)) {
            result.versionGroupId_ = versionGroupId_;
            to_bitField0_ |= 0x00000100;
          }
          if (((from_bitField0_ & 0x00001000) != 0)) {
            result.timestamp_ = timestamp_;
            to_bitField0_ |= 0x00000200;
          }
          if (((from_bitField0_ & 0x00002000) != 0)) {
            result.branchId_ = branchId_;
            to_bitField0_ |= 0x00000400;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType) {
            return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType other) {
          if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.getDefaultInstance()) return this;
          if (other.hasVersion()) {
            setVersion(other.getVersion());
          }
          if (inputsBuilder_ == null) {
            if (!other.inputs_.isEmpty()) {
              if (inputs_.isEmpty()) {
                inputs_ = other.inputs_;
                bitField0_ = (bitField0_ & ~0x00000002);
              } else {
                ensureInputsIsMutable();
                inputs_.addAll(other.inputs_);
              }
              onChanged();
            }
          } else {
            if (!other.inputs_.isEmpty()) {
              if (inputsBuilder_.isEmpty()) {
                inputsBuilder_.dispose();
                inputsBuilder_ = null;
                inputs_ = other.inputs_;
                bitField0_ = (bitField0_ & ~0x00000002);
                inputsBuilder_ = 
                  com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                     getInputsFieldBuilder() : null;
              } else {
                inputsBuilder_.addAllMessages(other.inputs_);
              }
            }
          }
          if (binOutputsBuilder_ == null) {
            if (!other.binOutputs_.isEmpty()) {
              if (binOutputs_.isEmpty()) {
                binOutputs_ = other.binOutputs_;
                bitField0_ = (bitField0_ & ~0x00000004);
              } else {
                ensureBinOutputsIsMutable();
                binOutputs_.addAll(other.binOutputs_);
              }
              onChanged();
            }
          } else {
            if (!other.binOutputs_.isEmpty()) {
              if (binOutputsBuilder_.isEmpty()) {
                binOutputsBuilder_.dispose();
                binOutputsBuilder_ = null;
                binOutputs_ = other.binOutputs_;
                bitField0_ = (bitField0_ & ~0x00000004);
                binOutputsBuilder_ = 
                  com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                     getBinOutputsFieldBuilder() : null;
              } else {
                binOutputsBuilder_.addAllMessages(other.binOutputs_);
              }
            }
          }
          if (other.hasLockTime()) {
            setLockTime(other.getLockTime());
          }
          if (outputsBuilder_ == null) {
            if (!other.outputs_.isEmpty()) {
              if (outputs_.isEmpty()) {
                outputs_ = other.outputs_;
                bitField0_ = (bitField0_ & ~0x00000010);
              } else {
                ensureOutputsIsMutable();
                outputs_.addAll(other.outputs_);
              }
              onChanged();
            }
          } else {
            if (!other.outputs_.isEmpty()) {
              if (outputsBuilder_.isEmpty()) {
                outputsBuilder_.dispose();
                outputsBuilder_ = null;
                outputs_ = other.outputs_;
                bitField0_ = (bitField0_ & ~0x00000010);
                outputsBuilder_ = 
                  com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                     getOutputsFieldBuilder() : null;
              } else {
                outputsBuilder_.addAllMessages(other.outputs_);
              }
            }
          }
          if (other.hasInputsCnt()) {
            setInputsCnt(other.getInputsCnt());
          }
          if (other.hasOutputsCnt()) {
            setOutputsCnt(other.getOutputsCnt());
          }
          if (other.hasExtraData()) {
            setExtraData(other.getExtraData());
          }
          if (other.hasExtraDataLen()) {
            setExtraDataLen(other.getExtraDataLen());
          }
          if (other.hasExpiry()) {
            setExpiry(other.getExpiry());
          }
          if (other.hasOverwintered()) {
            setOverwintered(other.getOverwintered());
          }
          if (other.hasVersionGroupId()) {
            setVersionGroupId(other.getVersionGroupId());
          }
          if (other.hasTimestamp()) {
            setTimestamp(other.getTimestamp());
          }
          if (other.hasBranchId()) {
            setBranchId(other.getBranchId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          for (int i = 0; i < getInputsCount(); i++) {
            if (!getInputs(i).isInitialized()) {
              return false;
            }
          }
          for (int i = 0; i < getBinOutputsCount(); i++) {
            if (!getBinOutputs(i).isInitialized()) {
              return false;
            }
          }
          for (int i = 0; i < getOutputsCount(); i++) {
            if (!getOutputs(i).isInitialized()) {
              return false;
            }
          }
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  version_ = input.readUInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 18: {
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType m =
                      input.readMessage(
                          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.parser(),
                          extensionRegistry);
                  if (inputsBuilder_ == null) {
                    ensureInputsIsMutable();
                    inputs_.add(m);
                  } else {
                    inputsBuilder_.addMessage(m);
                  }
                  break;
                } // case 18
                case 26: {
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType m =
                      input.readMessage(
                          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.parser(),
                          extensionRegistry);
                  if (binOutputsBuilder_ == null) {
                    ensureBinOutputsIsMutable();
                    binOutputs_.add(m);
                  } else {
                    binOutputsBuilder_.addMessage(m);
                  }
                  break;
                } // case 26
                case 32: {
                  lockTime_ = input.readUInt32();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 32
                case 42: {
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType m =
                      input.readMessage(
                          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.parser(),
                          extensionRegistry);
                  if (outputsBuilder_ == null) {
                    ensureOutputsIsMutable();
                    outputs_.add(m);
                  } else {
                    outputsBuilder_.addMessage(m);
                  }
                  break;
                } // case 42
                case 48: {
                  inputsCnt_ = input.readUInt32();
                  bitField0_ |= 0x00000020;
                  break;
                } // case 48
                case 56: {
                  outputsCnt_ = input.readUInt32();
                  bitField0_ |= 0x00000040;
                  break;
                } // case 56
                case 66: {
                  extraData_ = input.readBytes();
                  bitField0_ |= 0x00000080;
                  break;
                } // case 66
                case 72: {
                  extraDataLen_ = input.readUInt32();
                  bitField0_ |= 0x00000100;
                  break;
                } // case 72
                case 80: {
                  expiry_ = input.readUInt32();
                  bitField0_ |= 0x00000200;
                  break;
                } // case 80
                case 88: {
                  overwintered_ = input.readBool();
                  bitField0_ |= 0x00000400;
                  break;
                } // case 88
                case 96: {
                  versionGroupId_ = input.readUInt32();
                  bitField0_ |= 0x00000800;
                  break;
                } // case 96
                case 104: {
                  timestamp_ = input.readUInt32();
                  bitField0_ |= 0x00001000;
                  break;
                } // case 104
                case 112: {
                  branchId_ = input.readUInt32();
                  bitField0_ |= 0x00002000;
                  break;
                } // case 112
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int version_ ;
        /**
         * <code>optional uint32 version = 1;</code>
         * @return Whether the version field is set.
         */
        @java.lang.Override
        public boolean hasVersion() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional uint32 version = 1;</code>
         * @return The version.
         */
        @java.lang.Override
        public int getVersion() {
          return version_;
        }
        /**
         * <code>optional uint32 version = 1;</code>
         * @param value The version to set.
         * @return This builder for chaining.
         */
        public Builder setVersion(int value) {

          version_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 version = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearVersion() {
          bitField0_ = (bitField0_ & ~0x00000001);
          version_ = 0;
          onChanged();
          return this;
        }

        private java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType> inputs_ =
          java.util.Collections.emptyList();
        private void ensureInputsIsMutable() {
          if (!((bitField0_ & 0x00000002) != 0)) {
            inputs_ = new java.util.ArrayList<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType>(inputs_);
            bitField0_ |= 0x00000002;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputTypeOrBuilder> inputsBuilder_;

        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType> getInputsList() {
          if (inputsBuilder_ == null) {
            return java.util.Collections.unmodifiableList(inputs_);
          } else {
            return inputsBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public int getInputsCount() {
          if (inputsBuilder_ == null) {
            return inputs_.size();
          } else {
            return inputsBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType getInputs(int index) {
          if (inputsBuilder_ == null) {
            return inputs_.get(index);
          } else {
            return inputsBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public Builder setInputs(
            int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType value) {
          if (inputsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureInputsIsMutable();
            inputs_.set(index, value);
            onChanged();
          } else {
            inputsBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public Builder setInputs(
            int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.Builder builderForValue) {
          if (inputsBuilder_ == null) {
            ensureInputsIsMutable();
            inputs_.set(index, builderForValue.build());
            onChanged();
          } else {
            inputsBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public Builder addInputs(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType value) {
          if (inputsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureInputsIsMutable();
            inputs_.add(value);
            onChanged();
          } else {
            inputsBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public Builder addInputs(
            int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType value) {
          if (inputsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureInputsIsMutable();
            inputs_.add(index, value);
            onChanged();
          } else {
            inputsBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public Builder addInputs(
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.Builder builderForValue) {
          if (inputsBuilder_ == null) {
            ensureInputsIsMutable();
            inputs_.add(builderForValue.build());
            onChanged();
          } else {
            inputsBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public Builder addInputs(
            int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.Builder builderForValue) {
          if (inputsBuilder_ == null) {
            ensureInputsIsMutable();
            inputs_.add(index, builderForValue.build());
            onChanged();
          } else {
            inputsBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public Builder addAllInputs(
            java.lang.Iterable<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType> values) {
          if (inputsBuilder_ == null) {
            ensureInputsIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, inputs_);
            onChanged();
          } else {
            inputsBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public Builder clearInputs() {
          if (inputsBuilder_ == null) {
            inputs_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
            onChanged();
          } else {
            inputsBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public Builder removeInputs(int index) {
          if (inputsBuilder_ == null) {
            ensureInputsIsMutable();
            inputs_.remove(index);
            onChanged();
          } else {
            inputsBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.Builder getInputsBuilder(
            int index) {
          return getInputsFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputTypeOrBuilder getInputsOrBuilder(
            int index) {
          if (inputsBuilder_ == null) {
            return inputs_.get(index);  } else {
            return inputsBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputTypeOrBuilder> 
             getInputsOrBuilderList() {
          if (inputsBuilder_ != null) {
            return inputsBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(inputs_);
          }
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.Builder addInputsBuilder() {
          return getInputsFieldBuilder().addBuilder(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.getDefaultInstance());
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.Builder addInputsBuilder(
            int index) {
          return getInputsFieldBuilder().addBuilder(
              index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.getDefaultInstance());
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType inputs = 2;</code>
         */
        public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.Builder> 
             getInputsBuilderList() {
          return getInputsFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputTypeOrBuilder> 
            getInputsFieldBuilder() {
          if (inputsBuilder_ == null) {
            inputsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxInputTypeOrBuilder>(
                    inputs_,
                    ((bitField0_ & 0x00000002) != 0),
                    getParentForChildren(),
                    isClean());
            inputs_ = null;
          }
          return inputsBuilder_;
        }

        private java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType> binOutputs_ =
          java.util.Collections.emptyList();
        private void ensureBinOutputsIsMutable() {
          if (!((bitField0_ & 0x00000004) != 0)) {
            binOutputs_ = new java.util.ArrayList<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType>(binOutputs_);
            bitField0_ |= 0x00000004;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinTypeOrBuilder> binOutputsBuilder_;

        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType> getBinOutputsList() {
          if (binOutputsBuilder_ == null) {
            return java.util.Collections.unmodifiableList(binOutputs_);
          } else {
            return binOutputsBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public int getBinOutputsCount() {
          if (binOutputsBuilder_ == null) {
            return binOutputs_.size();
          } else {
            return binOutputsBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType getBinOutputs(int index) {
          if (binOutputsBuilder_ == null) {
            return binOutputs_.get(index);
          } else {
            return binOutputsBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public Builder setBinOutputs(
            int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType value) {
          if (binOutputsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureBinOutputsIsMutable();
            binOutputs_.set(index, value);
            onChanged();
          } else {
            binOutputsBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public Builder setBinOutputs(
            int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.Builder builderForValue) {
          if (binOutputsBuilder_ == null) {
            ensureBinOutputsIsMutable();
            binOutputs_.set(index, builderForValue.build());
            onChanged();
          } else {
            binOutputsBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public Builder addBinOutputs(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType value) {
          if (binOutputsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureBinOutputsIsMutable();
            binOutputs_.add(value);
            onChanged();
          } else {
            binOutputsBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public Builder addBinOutputs(
            int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType value) {
          if (binOutputsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureBinOutputsIsMutable();
            binOutputs_.add(index, value);
            onChanged();
          } else {
            binOutputsBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public Builder addBinOutputs(
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.Builder builderForValue) {
          if (binOutputsBuilder_ == null) {
            ensureBinOutputsIsMutable();
            binOutputs_.add(builderForValue.build());
            onChanged();
          } else {
            binOutputsBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public Builder addBinOutputs(
            int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.Builder builderForValue) {
          if (binOutputsBuilder_ == null) {
            ensureBinOutputsIsMutable();
            binOutputs_.add(index, builderForValue.build());
            onChanged();
          } else {
            binOutputsBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public Builder addAllBinOutputs(
            java.lang.Iterable<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType> values) {
          if (binOutputsBuilder_ == null) {
            ensureBinOutputsIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, binOutputs_);
            onChanged();
          } else {
            binOutputsBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public Builder clearBinOutputs() {
          if (binOutputsBuilder_ == null) {
            binOutputs_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000004);
            onChanged();
          } else {
            binOutputsBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public Builder removeBinOutputs(int index) {
          if (binOutputsBuilder_ == null) {
            ensureBinOutputsIsMutable();
            binOutputs_.remove(index);
            onChanged();
          } else {
            binOutputsBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.Builder getBinOutputsBuilder(
            int index) {
          return getBinOutputsFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinTypeOrBuilder getBinOutputsOrBuilder(
            int index) {
          if (binOutputsBuilder_ == null) {
            return binOutputs_.get(index);  } else {
            return binOutputsBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinTypeOrBuilder> 
             getBinOutputsOrBuilderList() {
          if (binOutputsBuilder_ != null) {
            return binOutputsBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(binOutputs_);
          }
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.Builder addBinOutputsBuilder() {
          return getBinOutputsFieldBuilder().addBuilder(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.getDefaultInstance());
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.Builder addBinOutputsBuilder(
            int index) {
          return getBinOutputsFieldBuilder().addBuilder(
              index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.getDefaultInstance());
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType bin_outputs = 3;</code>
         */
        public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.Builder> 
             getBinOutputsBuilderList() {
          return getBinOutputsFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinTypeOrBuilder> 
            getBinOutputsFieldBuilder() {
          if (binOutputsBuilder_ == null) {
            binOutputsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputBinTypeOrBuilder>(
                    binOutputs_,
                    ((bitField0_ & 0x00000004) != 0),
                    getParentForChildren(),
                    isClean());
            binOutputs_ = null;
          }
          return binOutputsBuilder_;
        }

        private int lockTime_ ;
        /**
         * <code>optional uint32 lock_time = 4;</code>
         * @return Whether the lockTime field is set.
         */
        @java.lang.Override
        public boolean hasLockTime() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <code>optional uint32 lock_time = 4;</code>
         * @return The lockTime.
         */
        @java.lang.Override
        public int getLockTime() {
          return lockTime_;
        }
        /**
         * <code>optional uint32 lock_time = 4;</code>
         * @param value The lockTime to set.
         * @return This builder for chaining.
         */
        public Builder setLockTime(int value) {

          lockTime_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 lock_time = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearLockTime() {
          bitField0_ = (bitField0_ & ~0x00000008);
          lockTime_ = 0;
          onChanged();
          return this;
        }

        private java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType> outputs_ =
          java.util.Collections.emptyList();
        private void ensureOutputsIsMutable() {
          if (!((bitField0_ & 0x00000010) != 0)) {
            outputs_ = new java.util.ArrayList<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType>(outputs_);
            bitField0_ |= 0x00000010;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputTypeOrBuilder> outputsBuilder_;

        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType> getOutputsList() {
          if (outputsBuilder_ == null) {
            return java.util.Collections.unmodifiableList(outputs_);
          } else {
            return outputsBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public int getOutputsCount() {
          if (outputsBuilder_ == null) {
            return outputs_.size();
          } else {
            return outputsBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType getOutputs(int index) {
          if (outputsBuilder_ == null) {
            return outputs_.get(index);
          } else {
            return outputsBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public Builder setOutputs(
            int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType value) {
          if (outputsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureOutputsIsMutable();
            outputs_.set(index, value);
            onChanged();
          } else {
            outputsBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public Builder setOutputs(
            int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.Builder builderForValue) {
          if (outputsBuilder_ == null) {
            ensureOutputsIsMutable();
            outputs_.set(index, builderForValue.build());
            onChanged();
          } else {
            outputsBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public Builder addOutputs(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType value) {
          if (outputsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureOutputsIsMutable();
            outputs_.add(value);
            onChanged();
          } else {
            outputsBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public Builder addOutputs(
            int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType value) {
          if (outputsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureOutputsIsMutable();
            outputs_.add(index, value);
            onChanged();
          } else {
            outputsBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public Builder addOutputs(
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.Builder builderForValue) {
          if (outputsBuilder_ == null) {
            ensureOutputsIsMutable();
            outputs_.add(builderForValue.build());
            onChanged();
          } else {
            outputsBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public Builder addOutputs(
            int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.Builder builderForValue) {
          if (outputsBuilder_ == null) {
            ensureOutputsIsMutable();
            outputs_.add(index, builderForValue.build());
            onChanged();
          } else {
            outputsBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public Builder addAllOutputs(
            java.lang.Iterable<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType> values) {
          if (outputsBuilder_ == null) {
            ensureOutputsIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, outputs_);
            onChanged();
          } else {
            outputsBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public Builder clearOutputs() {
          if (outputsBuilder_ == null) {
            outputs_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000010);
            onChanged();
          } else {
            outputsBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public Builder removeOutputs(int index) {
          if (outputsBuilder_ == null) {
            ensureOutputsIsMutable();
            outputs_.remove(index);
            onChanged();
          } else {
            outputsBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.Builder getOutputsBuilder(
            int index) {
          return getOutputsFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputTypeOrBuilder getOutputsOrBuilder(
            int index) {
          if (outputsBuilder_ == null) {
            return outputs_.get(index);  } else {
            return outputsBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputTypeOrBuilder> 
             getOutputsOrBuilderList() {
          if (outputsBuilder_ != null) {
            return outputsBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(outputs_);
          }
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.Builder addOutputsBuilder() {
          return getOutputsFieldBuilder().addBuilder(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.getDefaultInstance());
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.Builder addOutputsBuilder(
            int index) {
          return getOutputsFieldBuilder().addBuilder(
              index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.getDefaultInstance());
        }
        /**
         * <code>repeated .hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType outputs = 5;</code>
         */
        public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.Builder> 
             getOutputsBuilderList() {
          return getOutputsFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputTypeOrBuilder> 
            getOutputsFieldBuilder() {
          if (outputsBuilder_ == null) {
            outputsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.TxOutputTypeOrBuilder>(
                    outputs_,
                    ((bitField0_ & 0x00000010) != 0),
                    getParentForChildren(),
                    isClean());
            outputs_ = null;
          }
          return outputsBuilder_;
        }

        private int inputsCnt_ ;
        /**
         * <code>optional uint32 inputs_cnt = 6;</code>
         * @return Whether the inputsCnt field is set.
         */
        @java.lang.Override
        public boolean hasInputsCnt() {
          return ((bitField0_ & 0x00000020) != 0);
        }
        /**
         * <code>optional uint32 inputs_cnt = 6;</code>
         * @return The inputsCnt.
         */
        @java.lang.Override
        public int getInputsCnt() {
          return inputsCnt_;
        }
        /**
         * <code>optional uint32 inputs_cnt = 6;</code>
         * @param value The inputsCnt to set.
         * @return This builder for chaining.
         */
        public Builder setInputsCnt(int value) {

          inputsCnt_ = value;
          bitField0_ |= 0x00000020;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 inputs_cnt = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearInputsCnt() {
          bitField0_ = (bitField0_ & ~0x00000020);
          inputsCnt_ = 0;
          onChanged();
          return this;
        }

        private int outputsCnt_ ;
        /**
         * <code>optional uint32 outputs_cnt = 7;</code>
         * @return Whether the outputsCnt field is set.
         */
        @java.lang.Override
        public boolean hasOutputsCnt() {
          return ((bitField0_ & 0x00000040) != 0);
        }
        /**
         * <code>optional uint32 outputs_cnt = 7;</code>
         * @return The outputsCnt.
         */
        @java.lang.Override
        public int getOutputsCnt() {
          return outputsCnt_;
        }
        /**
         * <code>optional uint32 outputs_cnt = 7;</code>
         * @param value The outputsCnt to set.
         * @return This builder for chaining.
         */
        public Builder setOutputsCnt(int value) {

          outputsCnt_ = value;
          bitField0_ |= 0x00000040;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 outputs_cnt = 7;</code>
         * @return This builder for chaining.
         */
        public Builder clearOutputsCnt() {
          bitField0_ = (bitField0_ & ~0x00000040);
          outputsCnt_ = 0;
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString extraData_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * only for Dash, Zcash
         * </pre>
         *
         * <code>optional bytes extra_data = 8;</code>
         * @return Whether the extraData field is set.
         */
        @java.lang.Override
        public boolean hasExtraData() {
          return ((bitField0_ & 0x00000080) != 0);
        }
        /**
         * <pre>
         * only for Dash, Zcash
         * </pre>
         *
         * <code>optional bytes extra_data = 8;</code>
         * @return The extraData.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getExtraData() {
          return extraData_;
        }
        /**
         * <pre>
         * only for Dash, Zcash
         * </pre>
         *
         * <code>optional bytes extra_data = 8;</code>
         * @param value The extraData to set.
         * @return This builder for chaining.
         */
        public Builder setExtraData(com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          extraData_ = value;
          bitField0_ |= 0x00000080;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * only for Dash, Zcash
         * </pre>
         *
         * <code>optional bytes extra_data = 8;</code>
         * @return This builder for chaining.
         */
        public Builder clearExtraData() {
          bitField0_ = (bitField0_ & ~0x00000080);
          extraData_ = getDefaultInstance().getExtraData();
          onChanged();
          return this;
        }

        private int extraDataLen_ ;
        /**
         * <pre>
         * only for Dash, Zcash
         * </pre>
         *
         * <code>optional uint32 extra_data_len = 9;</code>
         * @return Whether the extraDataLen field is set.
         */
        @java.lang.Override
        public boolean hasExtraDataLen() {
          return ((bitField0_ & 0x00000100) != 0);
        }
        /**
         * <pre>
         * only for Dash, Zcash
         * </pre>
         *
         * <code>optional uint32 extra_data_len = 9;</code>
         * @return The extraDataLen.
         */
        @java.lang.Override
        public int getExtraDataLen() {
          return extraDataLen_;
        }
        /**
         * <pre>
         * only for Dash, Zcash
         * </pre>
         *
         * <code>optional uint32 extra_data_len = 9;</code>
         * @param value The extraDataLen to set.
         * @return This builder for chaining.
         */
        public Builder setExtraDataLen(int value) {

          extraDataLen_ = value;
          bitField0_ |= 0x00000100;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * only for Dash, Zcash
         * </pre>
         *
         * <code>optional uint32 extra_data_len = 9;</code>
         * @return This builder for chaining.
         */
        public Builder clearExtraDataLen() {
          bitField0_ = (bitField0_ & ~0x00000100);
          extraDataLen_ = 0;
          onChanged();
          return this;
        }

        private int expiry_ ;
        /**
         * <pre>
         * only for Decred and Zcash
         * </pre>
         *
         * <code>optional uint32 expiry = 10;</code>
         * @return Whether the expiry field is set.
         */
        @java.lang.Override
        public boolean hasExpiry() {
          return ((bitField0_ & 0x00000200) != 0);
        }
        /**
         * <pre>
         * only for Decred and Zcash
         * </pre>
         *
         * <code>optional uint32 expiry = 10;</code>
         * @return The expiry.
         */
        @java.lang.Override
        public int getExpiry() {
          return expiry_;
        }
        /**
         * <pre>
         * only for Decred and Zcash
         * </pre>
         *
         * <code>optional uint32 expiry = 10;</code>
         * @param value The expiry to set.
         * @return This builder for chaining.
         */
        public Builder setExpiry(int value) {

          expiry_ = value;
          bitField0_ |= 0x00000200;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * only for Decred and Zcash
         * </pre>
         *
         * <code>optional uint32 expiry = 10;</code>
         * @return This builder for chaining.
         */
        public Builder clearExpiry() {
          bitField0_ = (bitField0_ & ~0x00000200);
          expiry_ = 0;
          onChanged();
          return this;
        }

        private boolean overwintered_ ;
        /**
         * <pre>
         * Zcash only; deprecated in 2.3.2, the field is not needed, it can be derived from `version`
         * </pre>
         *
         * <code>optional bool overwintered = 11 [deprecated = true];</code>
         * @deprecated hw.trezor.messages.bitcoin.TxAck.TransactionType.overwintered is deprecated.
         *     See messages-bitcoin.proto;l=298
         * @return Whether the overwintered field is set.
         */
        @java.lang.Override
        @java.lang.Deprecated public boolean hasOverwintered() {
          return ((bitField0_ & 0x00000400) != 0);
        }
        /**
         * <pre>
         * Zcash only; deprecated in 2.3.2, the field is not needed, it can be derived from `version`
         * </pre>
         *
         * <code>optional bool overwintered = 11 [deprecated = true];</code>
         * @deprecated hw.trezor.messages.bitcoin.TxAck.TransactionType.overwintered is deprecated.
         *     See messages-bitcoin.proto;l=298
         * @return The overwintered.
         */
        @java.lang.Override
        @java.lang.Deprecated public boolean getOverwintered() {
          return overwintered_;
        }
        /**
         * <pre>
         * Zcash only; deprecated in 2.3.2, the field is not needed, it can be derived from `version`
         * </pre>
         *
         * <code>optional bool overwintered = 11 [deprecated = true];</code>
         * @deprecated hw.trezor.messages.bitcoin.TxAck.TransactionType.overwintered is deprecated.
         *     See messages-bitcoin.proto;l=298
         * @param value The overwintered to set.
         * @return This builder for chaining.
         */
        @java.lang.Deprecated public Builder setOverwintered(boolean value) {

          overwintered_ = value;
          bitField0_ |= 0x00000400;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Zcash only; deprecated in 2.3.2, the field is not needed, it can be derived from `version`
         * </pre>
         *
         * <code>optional bool overwintered = 11 [deprecated = true];</code>
         * @deprecated hw.trezor.messages.bitcoin.TxAck.TransactionType.overwintered is deprecated.
         *     See messages-bitcoin.proto;l=298
         * @return This builder for chaining.
         */
        @java.lang.Deprecated public Builder clearOverwintered() {
          bitField0_ = (bitField0_ & ~0x00000400);
          overwintered_ = false;
          onChanged();
          return this;
        }

        private int versionGroupId_ ;
        /**
         * <pre>
         * only for Zcash, nVersionGroupId
         * </pre>
         *
         * <code>optional uint32 version_group_id = 12;</code>
         * @return Whether the versionGroupId field is set.
         */
        @java.lang.Override
        public boolean hasVersionGroupId() {
          return ((bitField0_ & 0x00000800) != 0);
        }
        /**
         * <pre>
         * only for Zcash, nVersionGroupId
         * </pre>
         *
         * <code>optional uint32 version_group_id = 12;</code>
         * @return The versionGroupId.
         */
        @java.lang.Override
        public int getVersionGroupId() {
          return versionGroupId_;
        }
        /**
         * <pre>
         * only for Zcash, nVersionGroupId
         * </pre>
         *
         * <code>optional uint32 version_group_id = 12;</code>
         * @param value The versionGroupId to set.
         * @return This builder for chaining.
         */
        public Builder setVersionGroupId(int value) {

          versionGroupId_ = value;
          bitField0_ |= 0x00000800;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * only for Zcash, nVersionGroupId
         * </pre>
         *
         * <code>optional uint32 version_group_id = 12;</code>
         * @return This builder for chaining.
         */
        public Builder clearVersionGroupId() {
          bitField0_ = (bitField0_ & ~0x00000800);
          versionGroupId_ = 0;
          onChanged();
          return this;
        }

        private int timestamp_ ;
        /**
         * <pre>
         * only for Peercoin
         * </pre>
         *
         * <code>optional uint32 timestamp = 13;</code>
         * @return Whether the timestamp field is set.
         */
        @java.lang.Override
        public boolean hasTimestamp() {
          return ((bitField0_ & 0x00001000) != 0);
        }
        /**
         * <pre>
         * only for Peercoin
         * </pre>
         *
         * <code>optional uint32 timestamp = 13;</code>
         * @return The timestamp.
         */
        @java.lang.Override
        public int getTimestamp() {
          return timestamp_;
        }
        /**
         * <pre>
         * only for Peercoin
         * </pre>
         *
         * <code>optional uint32 timestamp = 13;</code>
         * @param value The timestamp to set.
         * @return This builder for chaining.
         */
        public Builder setTimestamp(int value) {

          timestamp_ = value;
          bitField0_ |= 0x00001000;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * only for Peercoin
         * </pre>
         *
         * <code>optional uint32 timestamp = 13;</code>
         * @return This builder for chaining.
         */
        public Builder clearTimestamp() {
          bitField0_ = (bitField0_ & ~0x00001000);
          timestamp_ = 0;
          onChanged();
          return this;
        }

        private int branchId_ ;
        /**
         * <pre>
         * only for Zcash, BRANCH_ID
         * </pre>
         *
         * <code>optional uint32 branch_id = 14;</code>
         * @return Whether the branchId field is set.
         */
        @java.lang.Override
        public boolean hasBranchId() {
          return ((bitField0_ & 0x00002000) != 0);
        }
        /**
         * <pre>
         * only for Zcash, BRANCH_ID
         * </pre>
         *
         * <code>optional uint32 branch_id = 14;</code>
         * @return The branchId.
         */
        @java.lang.Override
        public int getBranchId() {
          return branchId_;
        }
        /**
         * <pre>
         * only for Zcash, BRANCH_ID
         * </pre>
         *
         * <code>optional uint32 branch_id = 14;</code>
         * @param value The branchId to set.
         * @return This builder for chaining.
         */
        public Builder setBranchId(int value) {

          branchId_ = value;
          bitField0_ |= 0x00002000;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * only for Zcash, BRANCH_ID
         * </pre>
         *
         * <code>optional uint32 branch_id = 14;</code>
         * @return This builder for chaining.
         */
        public Builder clearBranchId() {
          bitField0_ = (bitField0_ & ~0x00002000);
          branchId_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAck.TransactionType)
      }

      // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAck.TransactionType)
      private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType();
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TransactionType>
          PARSER = new com.google.protobuf.AbstractParser<TransactionType>() {
        @java.lang.Override
        public TransactionType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TransactionType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TransactionType> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int TX_FIELD_NUMBER = 1;
    private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType tx_;
    /**
     * <code>optional .hw.trezor.messages.bitcoin.TxAck.TransactionType tx = 1;</code>
     * @return Whether the tx field is set.
     */
    @java.lang.Override
    public boolean hasTx() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .hw.trezor.messages.bitcoin.TxAck.TransactionType tx = 1;</code>
     * @return The tx.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType getTx() {
      return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.getDefaultInstance() : tx_;
    }
    /**
     * <code>optional .hw.trezor.messages.bitcoin.TxAck.TransactionType tx = 1;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionTypeOrBuilder getTxOrBuilder() {
      return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.getDefaultInstance() : tx_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasTx()) {
        if (!getTx().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getTx());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTx());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck) obj;

      if (hasTx() != other.hasTx()) return false;
      if (hasTx()) {
        if (!getTx()
            .equals(other.getTx())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTx()) {
        hash = (37 * hash) + TX_FIELD_NUMBER;
        hash = (53 * hash) + getTx().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Request: Reported transaction data (legacy)
     *
     * This message contains all possible field that can be sent in response to a TxRequest.
     * Depending on the request_type, the host is supposed to fill some of these fields.
     *
     * The interface is wire-compatible with the new method of specialized TxAck subtypes,
     * so it can be used in the old way. However, it is now recommended to use more
     * specialized messages, which have better-configured constraints on field values.
     *
     * &#64;next TxRequest
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAck}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAck)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTxFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        tx_ = null;
        if (txBuilder_ != null) {
          txBuilder_.dispose();
          txBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAck_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.tx_ = txBuilder_ == null
              ? tx_
              : txBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.getDefaultInstance()) return this;
        if (other.hasTx()) {
          mergeTx(other.getTx());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (hasTx()) {
          if (!getTx().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getTxFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType tx_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionTypeOrBuilder> txBuilder_;
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAck.TransactionType tx = 1;</code>
       * @return Whether the tx field is set.
       */
      public boolean hasTx() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAck.TransactionType tx = 1;</code>
       * @return The tx.
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType getTx() {
        if (txBuilder_ == null) {
          return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.getDefaultInstance() : tx_;
        } else {
          return txBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAck.TransactionType tx = 1;</code>
       */
      public Builder setTx(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType value) {
        if (txBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tx_ = value;
        } else {
          txBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAck.TransactionType tx = 1;</code>
       */
      public Builder setTx(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.Builder builderForValue) {
        if (txBuilder_ == null) {
          tx_ = builderForValue.build();
        } else {
          txBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAck.TransactionType tx = 1;</code>
       */
      public Builder mergeTx(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType value) {
        if (txBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            tx_ != null &&
            tx_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.getDefaultInstance()) {
            getTxBuilder().mergeFrom(value);
          } else {
            tx_ = value;
          }
        } else {
          txBuilder_.mergeFrom(value);
        }
        if (tx_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAck.TransactionType tx = 1;</code>
       */
      public Builder clearTx() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tx_ = null;
        if (txBuilder_ != null) {
          txBuilder_.dispose();
          txBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAck.TransactionType tx = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.Builder getTxBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTxFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAck.TransactionType tx = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionTypeOrBuilder getTxOrBuilder() {
        if (txBuilder_ != null) {
          return txBuilder_.getMessageOrBuilder();
        } else {
          return tx_ == null ?
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.getDefaultInstance() : tx_;
        }
      }
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAck.TransactionType tx = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionTypeOrBuilder> 
          getTxFieldBuilder() {
        if (txBuilder_ == null) {
          txBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck.TransactionTypeOrBuilder>(
                  getTx(),
                  getParentForChildren(),
                  isClean());
          tx_ = null;
        }
        return txBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAck)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAck)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TxAck>
        PARSER = new com.google.protobuf.AbstractParser<TxAck>() {
      @java.lang.Override
      public TxAck parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TxAck> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TxAck> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAck getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TxInputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxInput)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return A list containing the addressN.
     */
    java.util.List<java.lang.Integer> getAddressNList();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return The count of addressN.
     */
    int getAddressNCount();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    int getAddressN(int index);

    /**
     * <pre>
     * hash of previous transaction output to spend by this input
     * </pre>
     *
     * <code>required bytes prev_hash = 2;</code>
     * @return Whether the prevHash field is set.
     */
    boolean hasPrevHash();
    /**
     * <pre>
     * hash of previous transaction output to spend by this input
     * </pre>
     *
     * <code>required bytes prev_hash = 2;</code>
     * @return The prevHash.
     */
    com.google.protobuf.ByteString getPrevHash();

    /**
     * <pre>
     * index of previous output to spend
     * </pre>
     *
     * <code>required uint32 prev_index = 3;</code>
     * @return Whether the prevIndex field is set.
     */
    boolean hasPrevIndex();
    /**
     * <pre>
     * index of previous output to spend
     * </pre>
     *
     * <code>required uint32 prev_index = 3;</code>
     * @return The prevIndex.
     */
    int getPrevIndex();

    /**
     * <pre>
     * script signature, only set for EXTERNAL inputs
     * </pre>
     *
     * <code>optional bytes script_sig = 4;</code>
     * @return Whether the scriptSig field is set.
     */
    boolean hasScriptSig();
    /**
     * <pre>
     * script signature, only set for EXTERNAL inputs
     * </pre>
     *
     * <code>optional bytes script_sig = 4;</code>
     * @return The scriptSig.
     */
    com.google.protobuf.ByteString getScriptSig();

    /**
     * <pre>
     * sequence
     * </pre>
     *
     * <code>optional uint32 sequence = 5 [default = 4294967295];</code>
     * @return Whether the sequence field is set.
     */
    boolean hasSequence();
    /**
     * <pre>
     * sequence
     * </pre>
     *
     * <code>optional uint32 sequence = 5 [default = 4294967295];</code>
     * @return The sequence.
     */
    int getSequence();

    /**
     * <pre>
     * defines template of input script
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 6 [default = SPENDADDRESS];</code>
     * @return Whether the scriptType field is set.
     */
    boolean hasScriptType();
    /**
     * <pre>
     * defines template of input script
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 6 [default = SPENDADDRESS];</code>
     * @return The scriptType.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType();

    /**
     * <pre>
     * Filled if input is going to spend multisig tx
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
     * @return Whether the multisig field is set.
     */
    boolean hasMultisig();
    /**
     * <pre>
     * Filled if input is going to spend multisig tx
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
     * @return The multisig.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig();
    /**
     * <pre>
     * Filled if input is going to spend multisig tx
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder();

    /**
     * <pre>
     * amount of previous transaction output
     * </pre>
     *
     * <code>required uint64 amount = 8;</code>
     * @return Whether the amount field is set.
     */
    boolean hasAmount();
    /**
     * <pre>
     * amount of previous transaction output
     * </pre>
     *
     * <code>required uint64 amount = 8;</code>
     * @return The amount.
     */
    long getAmount();

    /**
     * <pre>
     * only for Decred, 0 is a normal transaction while 1 is a stake transaction
     * </pre>
     *
     * <code>optional uint32 decred_tree = 9;</code>
     * @return Whether the decredTree field is set.
     */
    boolean hasDecredTree();
    /**
     * <pre>
     * only for Decred, 0 is a normal transaction while 1 is a stake transaction
     * </pre>
     *
     * <code>optional uint32 decred_tree = 9;</code>
     * @return The decredTree.
     */
    int getDecredTree();

    /**
     * <pre>
     * witness data, only set for EXTERNAL inputs
     * </pre>
     *
     * <code>optional bytes witness = 13;</code>
     * @return Whether the witness field is set.
     */
    boolean hasWitness();
    /**
     * <pre>
     * witness data, only set for EXTERNAL inputs
     * </pre>
     *
     * <code>optional bytes witness = 13;</code>
     * @return The witness.
     */
    com.google.protobuf.ByteString getWitness();

    /**
     * <pre>
     * SLIP-0019 proof of ownership, only set for EXTERNAL inputs
     * </pre>
     *
     * <code>optional bytes ownership_proof = 14;</code>
     * @return Whether the ownershipProof field is set.
     */
    boolean hasOwnershipProof();
    /**
     * <pre>
     * SLIP-0019 proof of ownership, only set for EXTERNAL inputs
     * </pre>
     *
     * <code>optional bytes ownership_proof = 14;</code>
     * @return The ownershipProof.
     */
    com.google.protobuf.ByteString getOwnershipProof();

    /**
     * <pre>
     * optional commitment data for the SLIP-0019 proof of ownership
     * </pre>
     *
     * <code>optional bytes commitment_data = 15;</code>
     * @return Whether the commitmentData field is set.
     */
    boolean hasCommitmentData();
    /**
     * <pre>
     * optional commitment data for the SLIP-0019 proof of ownership
     * </pre>
     *
     * <code>optional bytes commitment_data = 15;</code>
     * @return The commitmentData.
     */
    com.google.protobuf.ByteString getCommitmentData();

    /**
     * <pre>
     * tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
     * </pre>
     *
     * <code>optional bytes orig_hash = 16;</code>
     * @return Whether the origHash field is set.
     */
    boolean hasOrigHash();
    /**
     * <pre>
     * tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
     * </pre>
     *
     * <code>optional bytes orig_hash = 16;</code>
     * @return The origHash.
     */
    com.google.protobuf.ByteString getOrigHash();

    /**
     * <pre>
     * index of the input in the original transaction (used when creating a replacement transaction)
     * </pre>
     *
     * <code>optional uint32 orig_index = 17;</code>
     * @return Whether the origIndex field is set.
     */
    boolean hasOrigIndex();
    /**
     * <pre>
     * index of the input in the original transaction (used when creating a replacement transaction)
     * </pre>
     *
     * <code>optional uint32 orig_index = 17;</code>
     * @return The origIndex.
     */
    int getOrigIndex();

    /**
     * <pre>
     * if not None this holds the type of stake spend: revocation or stake generation
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.DecredStakingSpendType decred_staking_spend = 18;</code>
     * @return Whether the decredStakingSpend field is set.
     */
    boolean hasDecredStakingSpend();
    /**
     * <pre>
     * if not None this holds the type of stake spend: revocation or stake generation
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.DecredStakingSpendType decred_staking_spend = 18;</code>
     * @return The decredStakingSpend.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType getDecredStakingSpend();

    /**
     * <pre>
     * scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
     * </pre>
     *
     * <code>optional bytes script_pubkey = 19;</code>
     * @return Whether the scriptPubkey field is set.
     */
    boolean hasScriptPubkey();
    /**
     * <pre>
     * scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
     * </pre>
     *
     * <code>optional bytes script_pubkey = 19;</code>
     * @return The scriptPubkey.
     */
    com.google.protobuf.ByteString getScriptPubkey();

    /**
     * <pre>
     * bit field of CoinJoin-specific flags
     * </pre>
     *
     * <code>optional uint32 coinjoin_flags = 20 [default = 0];</code>
     * @return Whether the coinjoinFlags field is set.
     */
    boolean hasCoinjoinFlags();
    /**
     * <pre>
     * bit field of CoinJoin-specific flags
     * </pre>
     *
     * <code>optional uint32 coinjoin_flags = 20 [default = 0];</code>
     * @return The coinjoinFlags.
     */
    int getCoinjoinFlags();
  }
  /**
   * <pre>
   * * Data type for transaction input to be signed.
   *
   * When adding fields, take care to not conflict with PrevInput
   *
   * &#64;embed
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.TxInput}
   */
  public static final class TxInput extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxInput)
      TxInputOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        TxInput.class.getName());
    }
    // Use TxInput.newBuilder() to construct.
    private TxInput(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TxInput() {
      addressN_ = emptyIntList();
      prevHash_ = com.google.protobuf.ByteString.EMPTY;
      scriptSig_ = com.google.protobuf.ByteString.EMPTY;
      sequence_ = -1;
      scriptType_ = 0;
      witness_ = com.google.protobuf.ByteString.EMPTY;
      ownershipProof_ = com.google.protobuf.ByteString.EMPTY;
      commitmentData_ = com.google.protobuf.ByteString.EMPTY;
      origHash_ = com.google.protobuf.ByteString.EMPTY;
      decredStakingSpend_ = 0;
      scriptPubkey_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxInput_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxInput_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput.Builder.class);
    }

    private int bitField0_;
    public static final int ADDRESS_N_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList addressN_ =
        emptyIntList();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return A list containing the addressN.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getAddressNList() {
      return addressN_;
    }
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return The count of addressN.
     */
    public int getAddressNCount() {
      return addressN_.size();
    }
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    public int getAddressN(int index) {
      return addressN_.getInt(index);
    }

    public static final int PREV_HASH_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString prevHash_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * hash of previous transaction output to spend by this input
     * </pre>
     *
     * <code>required bytes prev_hash = 2;</code>
     * @return Whether the prevHash field is set.
     */
    @java.lang.Override
    public boolean hasPrevHash() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * hash of previous transaction output to spend by this input
     * </pre>
     *
     * <code>required bytes prev_hash = 2;</code>
     * @return The prevHash.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPrevHash() {
      return prevHash_;
    }

    public static final int PREV_INDEX_FIELD_NUMBER = 3;
    private int prevIndex_ = 0;
    /**
     * <pre>
     * index of previous output to spend
     * </pre>
     *
     * <code>required uint32 prev_index = 3;</code>
     * @return Whether the prevIndex field is set.
     */
    @java.lang.Override
    public boolean hasPrevIndex() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * index of previous output to spend
     * </pre>
     *
     * <code>required uint32 prev_index = 3;</code>
     * @return The prevIndex.
     */
    @java.lang.Override
    public int getPrevIndex() {
      return prevIndex_;
    }

    public static final int SCRIPT_SIG_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString scriptSig_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * script signature, only set for EXTERNAL inputs
     * </pre>
     *
     * <code>optional bytes script_sig = 4;</code>
     * @return Whether the scriptSig field is set.
     */
    @java.lang.Override
    public boolean hasScriptSig() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * script signature, only set for EXTERNAL inputs
     * </pre>
     *
     * <code>optional bytes script_sig = 4;</code>
     * @return The scriptSig.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getScriptSig() {
      return scriptSig_;
    }

    public static final int SEQUENCE_FIELD_NUMBER = 5;
    private int sequence_ = -1;
    /**
     * <pre>
     * sequence
     * </pre>
     *
     * <code>optional uint32 sequence = 5 [default = 4294967295];</code>
     * @return Whether the sequence field is set.
     */
    @java.lang.Override
    public boolean hasSequence() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * sequence
     * </pre>
     *
     * <code>optional uint32 sequence = 5 [default = 4294967295];</code>
     * @return The sequence.
     */
    @java.lang.Override
    public int getSequence() {
      return sequence_;
    }

    public static final int SCRIPT_TYPE_FIELD_NUMBER = 6;
    private int scriptType_ = 0;
    /**
     * <pre>
     * defines template of input script
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 6 [default = SPENDADDRESS];</code>
     * @return Whether the scriptType field is set.
     */
    @java.lang.Override public boolean hasScriptType() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * defines template of input script
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 6 [default = SPENDADDRESS];</code>
     * @return The scriptType.
     */
    @java.lang.Override public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType() {
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(scriptType_);
      return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.SPENDADDRESS : result;
    }

    public static final int MULTISIG_FIELD_NUMBER = 7;
    private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType multisig_;
    /**
     * <pre>
     * Filled if input is going to spend multisig tx
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
     * @return Whether the multisig field is set.
     */
    @java.lang.Override
    public boolean hasMultisig() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Filled if input is going to spend multisig tx
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
     * @return The multisig.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig() {
      return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
    }
    /**
     * <pre>
     * Filled if input is going to spend multisig tx
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder() {
      return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
    }

    public static final int AMOUNT_FIELD_NUMBER = 8;
    private long amount_ = 0L;
    /**
     * <pre>
     * amount of previous transaction output
     * </pre>
     *
     * <code>required uint64 amount = 8;</code>
     * @return Whether the amount field is set.
     */
    @java.lang.Override
    public boolean hasAmount() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * amount of previous transaction output
     * </pre>
     *
     * <code>required uint64 amount = 8;</code>
     * @return The amount.
     */
    @java.lang.Override
    public long getAmount() {
      return amount_;
    }

    public static final int DECRED_TREE_FIELD_NUMBER = 9;
    private int decredTree_ = 0;
    /**
     * <pre>
     * only for Decred, 0 is a normal transaction while 1 is a stake transaction
     * </pre>
     *
     * <code>optional uint32 decred_tree = 9;</code>
     * @return Whether the decredTree field is set.
     */
    @java.lang.Override
    public boolean hasDecredTree() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * only for Decred, 0 is a normal transaction while 1 is a stake transaction
     * </pre>
     *
     * <code>optional uint32 decred_tree = 9;</code>
     * @return The decredTree.
     */
    @java.lang.Override
    public int getDecredTree() {
      return decredTree_;
    }

    public static final int WITNESS_FIELD_NUMBER = 13;
    private com.google.protobuf.ByteString witness_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * witness data, only set for EXTERNAL inputs
     * </pre>
     *
     * <code>optional bytes witness = 13;</code>
     * @return Whether the witness field is set.
     */
    @java.lang.Override
    public boolean hasWitness() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * witness data, only set for EXTERNAL inputs
     * </pre>
     *
     * <code>optional bytes witness = 13;</code>
     * @return The witness.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getWitness() {
      return witness_;
    }

    public static final int OWNERSHIP_PROOF_FIELD_NUMBER = 14;
    private com.google.protobuf.ByteString ownershipProof_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * SLIP-0019 proof of ownership, only set for EXTERNAL inputs
     * </pre>
     *
     * <code>optional bytes ownership_proof = 14;</code>
     * @return Whether the ownershipProof field is set.
     */
    @java.lang.Override
    public boolean hasOwnershipProof() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * SLIP-0019 proof of ownership, only set for EXTERNAL inputs
     * </pre>
     *
     * <code>optional bytes ownership_proof = 14;</code>
     * @return The ownershipProof.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getOwnershipProof() {
      return ownershipProof_;
    }

    public static final int COMMITMENT_DATA_FIELD_NUMBER = 15;
    private com.google.protobuf.ByteString commitmentData_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * optional commitment data for the SLIP-0019 proof of ownership
     * </pre>
     *
     * <code>optional bytes commitment_data = 15;</code>
     * @return Whether the commitmentData field is set.
     */
    @java.lang.Override
    public boolean hasCommitmentData() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * optional commitment data for the SLIP-0019 proof of ownership
     * </pre>
     *
     * <code>optional bytes commitment_data = 15;</code>
     * @return The commitmentData.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getCommitmentData() {
      return commitmentData_;
    }

    public static final int ORIG_HASH_FIELD_NUMBER = 16;
    private com.google.protobuf.ByteString origHash_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
     * </pre>
     *
     * <code>optional bytes orig_hash = 16;</code>
     * @return Whether the origHash field is set.
     */
    @java.lang.Override
    public boolean hasOrigHash() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
     * </pre>
     *
     * <code>optional bytes orig_hash = 16;</code>
     * @return The origHash.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getOrigHash() {
      return origHash_;
    }

    public static final int ORIG_INDEX_FIELD_NUMBER = 17;
    private int origIndex_ = 0;
    /**
     * <pre>
     * index of the input in the original transaction (used when creating a replacement transaction)
     * </pre>
     *
     * <code>optional uint32 orig_index = 17;</code>
     * @return Whether the origIndex field is set.
     */
    @java.lang.Override
    public boolean hasOrigIndex() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     * index of the input in the original transaction (used when creating a replacement transaction)
     * </pre>
     *
     * <code>optional uint32 orig_index = 17;</code>
     * @return The origIndex.
     */
    @java.lang.Override
    public int getOrigIndex() {
      return origIndex_;
    }

    public static final int DECRED_STAKING_SPEND_FIELD_NUMBER = 18;
    private int decredStakingSpend_ = 0;
    /**
     * <pre>
     * if not None this holds the type of stake spend: revocation or stake generation
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.DecredStakingSpendType decred_staking_spend = 18;</code>
     * @return Whether the decredStakingSpend field is set.
     */
    @java.lang.Override public boolean hasDecredStakingSpend() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <pre>
     * if not None this holds the type of stake spend: revocation or stake generation
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.DecredStakingSpendType decred_staking_spend = 18;</code>
     * @return The decredStakingSpend.
     */
    @java.lang.Override public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType getDecredStakingSpend() {
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType.forNumber(decredStakingSpend_);
      return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType.SSGen : result;
    }

    public static final int SCRIPT_PUBKEY_FIELD_NUMBER = 19;
    private com.google.protobuf.ByteString scriptPubkey_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
     * </pre>
     *
     * <code>optional bytes script_pubkey = 19;</code>
     * @return Whether the scriptPubkey field is set.
     */
    @java.lang.Override
    public boolean hasScriptPubkey() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <pre>
     * scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
     * </pre>
     *
     * <code>optional bytes script_pubkey = 19;</code>
     * @return The scriptPubkey.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getScriptPubkey() {
      return scriptPubkey_;
    }

    public static final int COINJOIN_FLAGS_FIELD_NUMBER = 20;
    private int coinjoinFlags_ = 0;
    /**
     * <pre>
     * bit field of CoinJoin-specific flags
     * </pre>
     *
     * <code>optional uint32 coinjoin_flags = 20 [default = 0];</code>
     * @return Whether the coinjoinFlags field is set.
     */
    @java.lang.Override
    public boolean hasCoinjoinFlags() {
      return ((bitField0_ & 0x00008000) != 0);
    }
    /**
     * <pre>
     * bit field of CoinJoin-specific flags
     * </pre>
     *
     * <code>optional uint32 coinjoin_flags = 20 [default = 0];</code>
     * @return The coinjoinFlags.
     */
    @java.lang.Override
    public int getCoinjoinFlags() {
      return coinjoinFlags_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPrevHash()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPrevIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAmount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasMultisig()) {
        if (!getMultisig().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < addressN_.size(); i++) {
        output.writeUInt32(1, addressN_.getInt(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBytes(2, prevHash_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt32(3, prevIndex_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBytes(4, scriptSig_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeUInt32(5, sequence_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeEnum(6, scriptType_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeMessage(7, getMultisig());
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeUInt64(8, amount_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeUInt32(9, decredTree_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeBytes(13, witness_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeBytes(14, ownershipProof_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeBytes(15, commitmentData_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        output.writeBytes(16, origHash_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        output.writeUInt32(17, origIndex_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        output.writeEnum(18, decredStakingSpend_);
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        output.writeBytes(19, scriptPubkey_);
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        output.writeUInt32(20, coinjoinFlags_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < addressN_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(addressN_.getInt(i));
        }
        size += dataSize;
        size += 1 * getAddressNList().size();
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, prevHash_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, prevIndex_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, scriptSig_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, sequence_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, scriptType_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getMultisig());
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(8, amount_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, decredTree_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(13, witness_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(14, ownershipProof_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(15, commitmentData_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(16, origHash_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(17, origIndex_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(18, decredStakingSpend_);
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(19, scriptPubkey_);
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(20, coinjoinFlags_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput) obj;

      if (!getAddressNList()
          .equals(other.getAddressNList())) return false;
      if (hasPrevHash() != other.hasPrevHash()) return false;
      if (hasPrevHash()) {
        if (!getPrevHash()
            .equals(other.getPrevHash())) return false;
      }
      if (hasPrevIndex() != other.hasPrevIndex()) return false;
      if (hasPrevIndex()) {
        if (getPrevIndex()
            != other.getPrevIndex()) return false;
      }
      if (hasScriptSig() != other.hasScriptSig()) return false;
      if (hasScriptSig()) {
        if (!getScriptSig()
            .equals(other.getScriptSig())) return false;
      }
      if (hasSequence() != other.hasSequence()) return false;
      if (hasSequence()) {
        if (getSequence()
            != other.getSequence()) return false;
      }
      if (hasScriptType() != other.hasScriptType()) return false;
      if (hasScriptType()) {
        if (scriptType_ != other.scriptType_) return false;
      }
      if (hasMultisig() != other.hasMultisig()) return false;
      if (hasMultisig()) {
        if (!getMultisig()
            .equals(other.getMultisig())) return false;
      }
      if (hasAmount() != other.hasAmount()) return false;
      if (hasAmount()) {
        if (getAmount()
            != other.getAmount()) return false;
      }
      if (hasDecredTree() != other.hasDecredTree()) return false;
      if (hasDecredTree()) {
        if (getDecredTree()
            != other.getDecredTree()) return false;
      }
      if (hasWitness() != other.hasWitness()) return false;
      if (hasWitness()) {
        if (!getWitness()
            .equals(other.getWitness())) return false;
      }
      if (hasOwnershipProof() != other.hasOwnershipProof()) return false;
      if (hasOwnershipProof()) {
        if (!getOwnershipProof()
            .equals(other.getOwnershipProof())) return false;
      }
      if (hasCommitmentData() != other.hasCommitmentData()) return false;
      if (hasCommitmentData()) {
        if (!getCommitmentData()
            .equals(other.getCommitmentData())) return false;
      }
      if (hasOrigHash() != other.hasOrigHash()) return false;
      if (hasOrigHash()) {
        if (!getOrigHash()
            .equals(other.getOrigHash())) return false;
      }
      if (hasOrigIndex() != other.hasOrigIndex()) return false;
      if (hasOrigIndex()) {
        if (getOrigIndex()
            != other.getOrigIndex()) return false;
      }
      if (hasDecredStakingSpend() != other.hasDecredStakingSpend()) return false;
      if (hasDecredStakingSpend()) {
        if (decredStakingSpend_ != other.decredStakingSpend_) return false;
      }
      if (hasScriptPubkey() != other.hasScriptPubkey()) return false;
      if (hasScriptPubkey()) {
        if (!getScriptPubkey()
            .equals(other.getScriptPubkey())) return false;
      }
      if (hasCoinjoinFlags() != other.hasCoinjoinFlags()) return false;
      if (hasCoinjoinFlags()) {
        if (getCoinjoinFlags()
            != other.getCoinjoinFlags()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getAddressNCount() > 0) {
        hash = (37 * hash) + ADDRESS_N_FIELD_NUMBER;
        hash = (53 * hash) + getAddressNList().hashCode();
      }
      if (hasPrevHash()) {
        hash = (37 * hash) + PREV_HASH_FIELD_NUMBER;
        hash = (53 * hash) + getPrevHash().hashCode();
      }
      if (hasPrevIndex()) {
        hash = (37 * hash) + PREV_INDEX_FIELD_NUMBER;
        hash = (53 * hash) + getPrevIndex();
      }
      if (hasScriptSig()) {
        hash = (37 * hash) + SCRIPT_SIG_FIELD_NUMBER;
        hash = (53 * hash) + getScriptSig().hashCode();
      }
      if (hasSequence()) {
        hash = (37 * hash) + SEQUENCE_FIELD_NUMBER;
        hash = (53 * hash) + getSequence();
      }
      if (hasScriptType()) {
        hash = (37 * hash) + SCRIPT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + scriptType_;
      }
      if (hasMultisig()) {
        hash = (37 * hash) + MULTISIG_FIELD_NUMBER;
        hash = (53 * hash) + getMultisig().hashCode();
      }
      if (hasAmount()) {
        hash = (37 * hash) + AMOUNT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getAmount());
      }
      if (hasDecredTree()) {
        hash = (37 * hash) + DECRED_TREE_FIELD_NUMBER;
        hash = (53 * hash) + getDecredTree();
      }
      if (hasWitness()) {
        hash = (37 * hash) + WITNESS_FIELD_NUMBER;
        hash = (53 * hash) + getWitness().hashCode();
      }
      if (hasOwnershipProof()) {
        hash = (37 * hash) + OWNERSHIP_PROOF_FIELD_NUMBER;
        hash = (53 * hash) + getOwnershipProof().hashCode();
      }
      if (hasCommitmentData()) {
        hash = (37 * hash) + COMMITMENT_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getCommitmentData().hashCode();
      }
      if (hasOrigHash()) {
        hash = (37 * hash) + ORIG_HASH_FIELD_NUMBER;
        hash = (53 * hash) + getOrigHash().hashCode();
      }
      if (hasOrigIndex()) {
        hash = (37 * hash) + ORIG_INDEX_FIELD_NUMBER;
        hash = (53 * hash) + getOrigIndex();
      }
      if (hasDecredStakingSpend()) {
        hash = (37 * hash) + DECRED_STAKING_SPEND_FIELD_NUMBER;
        hash = (53 * hash) + decredStakingSpend_;
      }
      if (hasScriptPubkey()) {
        hash = (37 * hash) + SCRIPT_PUBKEY_FIELD_NUMBER;
        hash = (53 * hash) + getScriptPubkey().hashCode();
      }
      if (hasCoinjoinFlags()) {
        hash = (37 * hash) + COINJOIN_FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getCoinjoinFlags();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * * Data type for transaction input to be signed.
     *
     * When adding fields, take care to not conflict with PrevInput
     *
     * &#64;embed
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxInput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxInput)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInputOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxInput_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxInput_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getMultisigFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        addressN_ = emptyIntList();
        prevHash_ = com.google.protobuf.ByteString.EMPTY;
        prevIndex_ = 0;
        scriptSig_ = com.google.protobuf.ByteString.EMPTY;
        sequence_ = -1;
        scriptType_ = 0;
        multisig_ = null;
        if (multisigBuilder_ != null) {
          multisigBuilder_.dispose();
          multisigBuilder_ = null;
        }
        amount_ = 0L;
        decredTree_ = 0;
        witness_ = com.google.protobuf.ByteString.EMPTY;
        ownershipProof_ = com.google.protobuf.ByteString.EMPTY;
        commitmentData_ = com.google.protobuf.ByteString.EMPTY;
        origHash_ = com.google.protobuf.ByteString.EMPTY;
        origIndex_ = 0;
        decredStakingSpend_ = 0;
        scriptPubkey_ = com.google.protobuf.ByteString.EMPTY;
        coinjoinFlags_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxInput_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          addressN_.makeImmutable();
          result.addressN_ = addressN_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.prevHash_ = prevHash_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.prevIndex_ = prevIndex_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.scriptSig_ = scriptSig_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.sequence_ = sequence_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.scriptType_ = scriptType_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.multisig_ = multisigBuilder_ == null
              ? multisig_
              : multisigBuilder_.build();
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.amount_ = amount_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.decredTree_ = decredTree_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.witness_ = witness_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.ownershipProof_ = ownershipProof_;
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.commitmentData_ = commitmentData_;
          to_bitField0_ |= 0x00000400;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.origHash_ = origHash_;
          to_bitField0_ |= 0x00000800;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          result.origIndex_ = origIndex_;
          to_bitField0_ |= 0x00001000;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          result.decredStakingSpend_ = decredStakingSpend_;
          to_bitField0_ |= 0x00002000;
        }
        if (((from_bitField0_ & 0x00008000) != 0)) {
          result.scriptPubkey_ = scriptPubkey_;
          to_bitField0_ |= 0x00004000;
        }
        if (((from_bitField0_ & 0x00010000) != 0)) {
          result.coinjoinFlags_ = coinjoinFlags_;
          to_bitField0_ |= 0x00008000;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput.getDefaultInstance()) return this;
        if (!other.addressN_.isEmpty()) {
          if (addressN_.isEmpty()) {
            addressN_ = other.addressN_;
            addressN_.makeImmutable();
            bitField0_ |= 0x00000001;
          } else {
            ensureAddressNIsMutable();
            addressN_.addAll(other.addressN_);
          }
          onChanged();
        }
        if (other.hasPrevHash()) {
          setPrevHash(other.getPrevHash());
        }
        if (other.hasPrevIndex()) {
          setPrevIndex(other.getPrevIndex());
        }
        if (other.hasScriptSig()) {
          setScriptSig(other.getScriptSig());
        }
        if (other.hasSequence()) {
          setSequence(other.getSequence());
        }
        if (other.hasScriptType()) {
          setScriptType(other.getScriptType());
        }
        if (other.hasMultisig()) {
          mergeMultisig(other.getMultisig());
        }
        if (other.hasAmount()) {
          setAmount(other.getAmount());
        }
        if (other.hasDecredTree()) {
          setDecredTree(other.getDecredTree());
        }
        if (other.hasWitness()) {
          setWitness(other.getWitness());
        }
        if (other.hasOwnershipProof()) {
          setOwnershipProof(other.getOwnershipProof());
        }
        if (other.hasCommitmentData()) {
          setCommitmentData(other.getCommitmentData());
        }
        if (other.hasOrigHash()) {
          setOrigHash(other.getOrigHash());
        }
        if (other.hasOrigIndex()) {
          setOrigIndex(other.getOrigIndex());
        }
        if (other.hasDecredStakingSpend()) {
          setDecredStakingSpend(other.getDecredStakingSpend());
        }
        if (other.hasScriptPubkey()) {
          setScriptPubkey(other.getScriptPubkey());
        }
        if (other.hasCoinjoinFlags()) {
          setCoinjoinFlags(other.getCoinjoinFlags());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasPrevHash()) {
          return false;
        }
        if (!hasPrevIndex()) {
          return false;
        }
        if (!hasAmount()) {
          return false;
        }
        if (hasMultisig()) {
          if (!getMultisig().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int v = input.readUInt32();
                ensureAddressNIsMutable();
                addressN_.addInt(v);
                break;
              } // case 8
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureAddressNIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  addressN_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 10
              case 18: {
                prevHash_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                prevIndex_ = input.readUInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                scriptSig_ = input.readBytes();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 40: {
                sequence_ = input.readUInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 48: {
                int tmpRaw = input.readEnum();
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType tmpValue =
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(6, tmpRaw);
                } else {
                  scriptType_ = tmpRaw;
                  bitField0_ |= 0x00000020;
                }
                break;
              } // case 48
              case 58: {
                input.readMessage(
                    getMultisigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000040;
                break;
              } // case 58
              case 64: {
                amount_ = input.readUInt64();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              case 72: {
                decredTree_ = input.readUInt32();
                bitField0_ |= 0x00000100;
                break;
              } // case 72
              case 106: {
                witness_ = input.readBytes();
                bitField0_ |= 0x00000200;
                break;
              } // case 106
              case 114: {
                ownershipProof_ = input.readBytes();
                bitField0_ |= 0x00000400;
                break;
              } // case 114
              case 122: {
                commitmentData_ = input.readBytes();
                bitField0_ |= 0x00000800;
                break;
              } // case 122
              case 130: {
                origHash_ = input.readBytes();
                bitField0_ |= 0x00001000;
                break;
              } // case 130
              case 136: {
                origIndex_ = input.readUInt32();
                bitField0_ |= 0x00002000;
                break;
              } // case 136
              case 144: {
                int tmpRaw = input.readEnum();
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType tmpValue =
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(18, tmpRaw);
                } else {
                  decredStakingSpend_ = tmpRaw;
                  bitField0_ |= 0x00004000;
                }
                break;
              } // case 144
              case 154: {
                scriptPubkey_ = input.readBytes();
                bitField0_ |= 0x00008000;
                break;
              } // case 154
              case 160: {
                coinjoinFlags_ = input.readUInt32();
                bitField0_ |= 0x00010000;
                break;
              } // case 160
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.IntList addressN_ = emptyIntList();
      private void ensureAddressNIsMutable() {
        if (!addressN_.isModifiable()) {
          addressN_ = makeMutableCopy(addressN_);
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return A list containing the addressN.
       */
      public java.util.List<java.lang.Integer>
          getAddressNList() {
        addressN_.makeImmutable();
        return addressN_;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return The count of addressN.
       */
      public int getAddressNCount() {
        return addressN_.size();
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param index The index of the element to return.
       * @return The addressN at the given index.
       */
      public int getAddressN(int index) {
        return addressN_.getInt(index);
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param index The index to set the value at.
       * @param value The addressN to set.
       * @return This builder for chaining.
       */
      public Builder setAddressN(
          int index, int value) {

        ensureAddressNIsMutable();
        addressN_.setInt(index, value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param value The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAddressN(int value) {

        ensureAddressNIsMutable();
        addressN_.addInt(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param values The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAllAddressN(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAddressNIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, addressN_);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAddressN() {
        addressN_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString prevHash_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * hash of previous transaction output to spend by this input
       * </pre>
       *
       * <code>required bytes prev_hash = 2;</code>
       * @return Whether the prevHash field is set.
       */
      @java.lang.Override
      public boolean hasPrevHash() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * hash of previous transaction output to spend by this input
       * </pre>
       *
       * <code>required bytes prev_hash = 2;</code>
       * @return The prevHash.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPrevHash() {
        return prevHash_;
      }
      /**
       * <pre>
       * hash of previous transaction output to spend by this input
       * </pre>
       *
       * <code>required bytes prev_hash = 2;</code>
       * @param value The prevHash to set.
       * @return This builder for chaining.
       */
      public Builder setPrevHash(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        prevHash_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * hash of previous transaction output to spend by this input
       * </pre>
       *
       * <code>required bytes prev_hash = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrevHash() {
        bitField0_ = (bitField0_ & ~0x00000002);
        prevHash_ = getDefaultInstance().getPrevHash();
        onChanged();
        return this;
      }

      private int prevIndex_ ;
      /**
       * <pre>
       * index of previous output to spend
       * </pre>
       *
       * <code>required uint32 prev_index = 3;</code>
       * @return Whether the prevIndex field is set.
       */
      @java.lang.Override
      public boolean hasPrevIndex() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * index of previous output to spend
       * </pre>
       *
       * <code>required uint32 prev_index = 3;</code>
       * @return The prevIndex.
       */
      @java.lang.Override
      public int getPrevIndex() {
        return prevIndex_;
      }
      /**
       * <pre>
       * index of previous output to spend
       * </pre>
       *
       * <code>required uint32 prev_index = 3;</code>
       * @param value The prevIndex to set.
       * @return This builder for chaining.
       */
      public Builder setPrevIndex(int value) {

        prevIndex_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * index of previous output to spend
       * </pre>
       *
       * <code>required uint32 prev_index = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrevIndex() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prevIndex_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString scriptSig_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * script signature, only set for EXTERNAL inputs
       * </pre>
       *
       * <code>optional bytes script_sig = 4;</code>
       * @return Whether the scriptSig field is set.
       */
      @java.lang.Override
      public boolean hasScriptSig() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * script signature, only set for EXTERNAL inputs
       * </pre>
       *
       * <code>optional bytes script_sig = 4;</code>
       * @return The scriptSig.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getScriptSig() {
        return scriptSig_;
      }
      /**
       * <pre>
       * script signature, only set for EXTERNAL inputs
       * </pre>
       *
       * <code>optional bytes script_sig = 4;</code>
       * @param value The scriptSig to set.
       * @return This builder for chaining.
       */
      public Builder setScriptSig(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        scriptSig_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * script signature, only set for EXTERNAL inputs
       * </pre>
       *
       * <code>optional bytes script_sig = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearScriptSig() {
        bitField0_ = (bitField0_ & ~0x00000008);
        scriptSig_ = getDefaultInstance().getScriptSig();
        onChanged();
        return this;
      }

      private int sequence_ = -1;
      /**
       * <pre>
       * sequence
       * </pre>
       *
       * <code>optional uint32 sequence = 5 [default = 4294967295];</code>
       * @return Whether the sequence field is set.
       */
      @java.lang.Override
      public boolean hasSequence() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * sequence
       * </pre>
       *
       * <code>optional uint32 sequence = 5 [default = 4294967295];</code>
       * @return The sequence.
       */
      @java.lang.Override
      public int getSequence() {
        return sequence_;
      }
      /**
       * <pre>
       * sequence
       * </pre>
       *
       * <code>optional uint32 sequence = 5 [default = 4294967295];</code>
       * @param value The sequence to set.
       * @return This builder for chaining.
       */
      public Builder setSequence(int value) {

        sequence_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * sequence
       * </pre>
       *
       * <code>optional uint32 sequence = 5 [default = 4294967295];</code>
       * @return This builder for chaining.
       */
      public Builder clearSequence() {
        bitField0_ = (bitField0_ & ~0x00000010);
        sequence_ = -1;
        onChanged();
        return this;
      }

      private int scriptType_ = 0;
      /**
       * <pre>
       * defines template of input script
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 6 [default = SPENDADDRESS];</code>
       * @return Whether the scriptType field is set.
       */
      @java.lang.Override public boolean hasScriptType() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * defines template of input script
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 6 [default = SPENDADDRESS];</code>
       * @return The scriptType.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(scriptType_);
        return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.SPENDADDRESS : result;
      }
      /**
       * <pre>
       * defines template of input script
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 6 [default = SPENDADDRESS];</code>
       * @param value The scriptType to set.
       * @return This builder for chaining.
       */
      public Builder setScriptType(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        scriptType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * defines template of input script
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 6 [default = SPENDADDRESS];</code>
       * @return This builder for chaining.
       */
      public Builder clearScriptType() {
        bitField0_ = (bitField0_ & ~0x00000020);
        scriptType_ = 0;
        onChanged();
        return this;
      }

      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType multisig_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder> multisigBuilder_;
      /**
       * <pre>
       * Filled if input is going to spend multisig tx
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
       * @return Whether the multisig field is set.
       */
      public boolean hasMultisig() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * Filled if input is going to spend multisig tx
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
       * @return The multisig.
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig() {
        if (multisigBuilder_ == null) {
          return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
        } else {
          return multisigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Filled if input is going to spend multisig tx
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
       */
      public Builder setMultisig(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType value) {
        if (multisigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          multisig_ = value;
        } else {
          multisigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Filled if input is going to spend multisig tx
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
       */
      public Builder setMultisig(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder builderForValue) {
        if (multisigBuilder_ == null) {
          multisig_ = builderForValue.build();
        } else {
          multisigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Filled if input is going to spend multisig tx
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
       */
      public Builder mergeMultisig(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType value) {
        if (multisigBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0) &&
            multisig_ != null &&
            multisig_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance()) {
            getMultisigBuilder().mergeFrom(value);
          } else {
            multisig_ = value;
          }
        } else {
          multisigBuilder_.mergeFrom(value);
        }
        if (multisig_ != null) {
          bitField0_ |= 0x00000040;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Filled if input is going to spend multisig tx
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
       */
      public Builder clearMultisig() {
        bitField0_ = (bitField0_ & ~0x00000040);
        multisig_ = null;
        if (multisigBuilder_ != null) {
          multisigBuilder_.dispose();
          multisigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Filled if input is going to spend multisig tx
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder getMultisigBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getMultisigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Filled if input is going to spend multisig tx
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder() {
        if (multisigBuilder_ != null) {
          return multisigBuilder_.getMessageOrBuilder();
        } else {
          return multisig_ == null ?
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
        }
      }
      /**
       * <pre>
       * Filled if input is going to spend multisig tx
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder> 
          getMultisigFieldBuilder() {
        if (multisigBuilder_ == null) {
          multisigBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder>(
                  getMultisig(),
                  getParentForChildren(),
                  isClean());
          multisig_ = null;
        }
        return multisigBuilder_;
      }

      private long amount_ ;
      /**
       * <pre>
       * amount of previous transaction output
       * </pre>
       *
       * <code>required uint64 amount = 8;</code>
       * @return Whether the amount field is set.
       */
      @java.lang.Override
      public boolean hasAmount() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * amount of previous transaction output
       * </pre>
       *
       * <code>required uint64 amount = 8;</code>
       * @return The amount.
       */
      @java.lang.Override
      public long getAmount() {
        return amount_;
      }
      /**
       * <pre>
       * amount of previous transaction output
       * </pre>
       *
       * <code>required uint64 amount = 8;</code>
       * @param value The amount to set.
       * @return This builder for chaining.
       */
      public Builder setAmount(long value) {

        amount_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * amount of previous transaction output
       * </pre>
       *
       * <code>required uint64 amount = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearAmount() {
        bitField0_ = (bitField0_ & ~0x00000080);
        amount_ = 0L;
        onChanged();
        return this;
      }

      private int decredTree_ ;
      /**
       * <pre>
       * only for Decred, 0 is a normal transaction while 1 is a stake transaction
       * </pre>
       *
       * <code>optional uint32 decred_tree = 9;</code>
       * @return Whether the decredTree field is set.
       */
      @java.lang.Override
      public boolean hasDecredTree() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * only for Decred, 0 is a normal transaction while 1 is a stake transaction
       * </pre>
       *
       * <code>optional uint32 decred_tree = 9;</code>
       * @return The decredTree.
       */
      @java.lang.Override
      public int getDecredTree() {
        return decredTree_;
      }
      /**
       * <pre>
       * only for Decred, 0 is a normal transaction while 1 is a stake transaction
       * </pre>
       *
       * <code>optional uint32 decred_tree = 9;</code>
       * @param value The decredTree to set.
       * @return This builder for chaining.
       */
      public Builder setDecredTree(int value) {

        decredTree_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * only for Decred, 0 is a normal transaction while 1 is a stake transaction
       * </pre>
       *
       * <code>optional uint32 decred_tree = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearDecredTree() {
        bitField0_ = (bitField0_ & ~0x00000100);
        decredTree_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString witness_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * witness data, only set for EXTERNAL inputs
       * </pre>
       *
       * <code>optional bytes witness = 13;</code>
       * @return Whether the witness field is set.
       */
      @java.lang.Override
      public boolean hasWitness() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       * witness data, only set for EXTERNAL inputs
       * </pre>
       *
       * <code>optional bytes witness = 13;</code>
       * @return The witness.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getWitness() {
        return witness_;
      }
      /**
       * <pre>
       * witness data, only set for EXTERNAL inputs
       * </pre>
       *
       * <code>optional bytes witness = 13;</code>
       * @param value The witness to set.
       * @return This builder for chaining.
       */
      public Builder setWitness(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        witness_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * witness data, only set for EXTERNAL inputs
       * </pre>
       *
       * <code>optional bytes witness = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearWitness() {
        bitField0_ = (bitField0_ & ~0x00000200);
        witness_ = getDefaultInstance().getWitness();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString ownershipProof_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * SLIP-0019 proof of ownership, only set for EXTERNAL inputs
       * </pre>
       *
       * <code>optional bytes ownership_proof = 14;</code>
       * @return Whether the ownershipProof field is set.
       */
      @java.lang.Override
      public boolean hasOwnershipProof() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       * SLIP-0019 proof of ownership, only set for EXTERNAL inputs
       * </pre>
       *
       * <code>optional bytes ownership_proof = 14;</code>
       * @return The ownershipProof.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getOwnershipProof() {
        return ownershipProof_;
      }
      /**
       * <pre>
       * SLIP-0019 proof of ownership, only set for EXTERNAL inputs
       * </pre>
       *
       * <code>optional bytes ownership_proof = 14;</code>
       * @param value The ownershipProof to set.
       * @return This builder for chaining.
       */
      public Builder setOwnershipProof(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ownershipProof_ = value;
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * SLIP-0019 proof of ownership, only set for EXTERNAL inputs
       * </pre>
       *
       * <code>optional bytes ownership_proof = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearOwnershipProof() {
        bitField0_ = (bitField0_ & ~0x00000400);
        ownershipProof_ = getDefaultInstance().getOwnershipProof();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString commitmentData_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * optional commitment data for the SLIP-0019 proof of ownership
       * </pre>
       *
       * <code>optional bytes commitment_data = 15;</code>
       * @return Whether the commitmentData field is set.
       */
      @java.lang.Override
      public boolean hasCommitmentData() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <pre>
       * optional commitment data for the SLIP-0019 proof of ownership
       * </pre>
       *
       * <code>optional bytes commitment_data = 15;</code>
       * @return The commitmentData.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getCommitmentData() {
        return commitmentData_;
      }
      /**
       * <pre>
       * optional commitment data for the SLIP-0019 proof of ownership
       * </pre>
       *
       * <code>optional bytes commitment_data = 15;</code>
       * @param value The commitmentData to set.
       * @return This builder for chaining.
       */
      public Builder setCommitmentData(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        commitmentData_ = value;
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * optional commitment data for the SLIP-0019 proof of ownership
       * </pre>
       *
       * <code>optional bytes commitment_data = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearCommitmentData() {
        bitField0_ = (bitField0_ & ~0x00000800);
        commitmentData_ = getDefaultInstance().getCommitmentData();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString origHash_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
       * </pre>
       *
       * <code>optional bytes orig_hash = 16;</code>
       * @return Whether the origHash field is set.
       */
      @java.lang.Override
      public boolean hasOrigHash() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <pre>
       * tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
       * </pre>
       *
       * <code>optional bytes orig_hash = 16;</code>
       * @return The origHash.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getOrigHash() {
        return origHash_;
      }
      /**
       * <pre>
       * tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
       * </pre>
       *
       * <code>optional bytes orig_hash = 16;</code>
       * @param value The origHash to set.
       * @return This builder for chaining.
       */
      public Builder setOrigHash(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        origHash_ = value;
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
       * </pre>
       *
       * <code>optional bytes orig_hash = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearOrigHash() {
        bitField0_ = (bitField0_ & ~0x00001000);
        origHash_ = getDefaultInstance().getOrigHash();
        onChanged();
        return this;
      }

      private int origIndex_ ;
      /**
       * <pre>
       * index of the input in the original transaction (used when creating a replacement transaction)
       * </pre>
       *
       * <code>optional uint32 orig_index = 17;</code>
       * @return Whether the origIndex field is set.
       */
      @java.lang.Override
      public boolean hasOrigIndex() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <pre>
       * index of the input in the original transaction (used when creating a replacement transaction)
       * </pre>
       *
       * <code>optional uint32 orig_index = 17;</code>
       * @return The origIndex.
       */
      @java.lang.Override
      public int getOrigIndex() {
        return origIndex_;
      }
      /**
       * <pre>
       * index of the input in the original transaction (used when creating a replacement transaction)
       * </pre>
       *
       * <code>optional uint32 orig_index = 17;</code>
       * @param value The origIndex to set.
       * @return This builder for chaining.
       */
      public Builder setOrigIndex(int value) {

        origIndex_ = value;
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * index of the input in the original transaction (used when creating a replacement transaction)
       * </pre>
       *
       * <code>optional uint32 orig_index = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearOrigIndex() {
        bitField0_ = (bitField0_ & ~0x00002000);
        origIndex_ = 0;
        onChanged();
        return this;
      }

      private int decredStakingSpend_ = 0;
      /**
       * <pre>
       * if not None this holds the type of stake spend: revocation or stake generation
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.DecredStakingSpendType decred_staking_spend = 18;</code>
       * @return Whether the decredStakingSpend field is set.
       */
      @java.lang.Override public boolean hasDecredStakingSpend() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <pre>
       * if not None this holds the type of stake spend: revocation or stake generation
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.DecredStakingSpendType decred_staking_spend = 18;</code>
       * @return The decredStakingSpend.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType getDecredStakingSpend() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType.forNumber(decredStakingSpend_);
        return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType.SSGen : result;
      }
      /**
       * <pre>
       * if not None this holds the type of stake spend: revocation or stake generation
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.DecredStakingSpendType decred_staking_spend = 18;</code>
       * @param value The decredStakingSpend to set.
       * @return This builder for chaining.
       */
      public Builder setDecredStakingSpend(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.DecredStakingSpendType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00004000;
        decredStakingSpend_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if not None this holds the type of stake spend: revocation or stake generation
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.DecredStakingSpendType decred_staking_spend = 18;</code>
       * @return This builder for chaining.
       */
      public Builder clearDecredStakingSpend() {
        bitField0_ = (bitField0_ & ~0x00004000);
        decredStakingSpend_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString scriptPubkey_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
       * </pre>
       *
       * <code>optional bytes script_pubkey = 19;</code>
       * @return Whether the scriptPubkey field is set.
       */
      @java.lang.Override
      public boolean hasScriptPubkey() {
        return ((bitField0_ & 0x00008000) != 0);
      }
      /**
       * <pre>
       * scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
       * </pre>
       *
       * <code>optional bytes script_pubkey = 19;</code>
       * @return The scriptPubkey.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getScriptPubkey() {
        return scriptPubkey_;
      }
      /**
       * <pre>
       * scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
       * </pre>
       *
       * <code>optional bytes script_pubkey = 19;</code>
       * @param value The scriptPubkey to set.
       * @return This builder for chaining.
       */
      public Builder setScriptPubkey(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        scriptPubkey_ = value;
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
       * </pre>
       *
       * <code>optional bytes script_pubkey = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearScriptPubkey() {
        bitField0_ = (bitField0_ & ~0x00008000);
        scriptPubkey_ = getDefaultInstance().getScriptPubkey();
        onChanged();
        return this;
      }

      private int coinjoinFlags_ ;
      /**
       * <pre>
       * bit field of CoinJoin-specific flags
       * </pre>
       *
       * <code>optional uint32 coinjoin_flags = 20 [default = 0];</code>
       * @return Whether the coinjoinFlags field is set.
       */
      @java.lang.Override
      public boolean hasCoinjoinFlags() {
        return ((bitField0_ & 0x00010000) != 0);
      }
      /**
       * <pre>
       * bit field of CoinJoin-specific flags
       * </pre>
       *
       * <code>optional uint32 coinjoin_flags = 20 [default = 0];</code>
       * @return The coinjoinFlags.
       */
      @java.lang.Override
      public int getCoinjoinFlags() {
        return coinjoinFlags_;
      }
      /**
       * <pre>
       * bit field of CoinJoin-specific flags
       * </pre>
       *
       * <code>optional uint32 coinjoin_flags = 20 [default = 0];</code>
       * @param value The coinjoinFlags to set.
       * @return This builder for chaining.
       */
      public Builder setCoinjoinFlags(int value) {

        coinjoinFlags_ = value;
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * bit field of CoinJoin-specific flags
       * </pre>
       *
       * <code>optional uint32 coinjoin_flags = 20 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearCoinjoinFlags() {
        bitField0_ = (bitField0_ & ~0x00010000);
        coinjoinFlags_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxInput)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxInput)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TxInput>
        PARSER = new com.google.protobuf.AbstractParser<TxInput>() {
      @java.lang.Override
      public TxInput parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TxInput> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TxInput> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TxOutputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxOutput)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * destination address in Base58 encoding; script_type must be PAYTOADDRESS
     * </pre>
     *
     * <code>optional string address = 1;</code>
     * @return Whether the address field is set.
     */
    boolean hasAddress();
    /**
     * <pre>
     * destination address in Base58 encoding; script_type must be PAYTOADDRESS
     * </pre>
     *
     * <code>optional string address = 1;</code>
     * @return The address.
     */
    java.lang.String getAddress();
    /**
     * <pre>
     * destination address in Base58 encoding; script_type must be PAYTOADDRESS
     * </pre>
     *
     * <code>optional string address = 1;</code>
     * @return The bytes for address.
     */
    com.google.protobuf.ByteString
        getAddressBytes();

    /**
     * <pre>
     * BIP-32 path to derive the destination (used for change addresses)
     * </pre>
     *
     * <code>repeated uint32 address_n = 2;</code>
     * @return A list containing the addressN.
     */
    java.util.List<java.lang.Integer> getAddressNList();
    /**
     * <pre>
     * BIP-32 path to derive the destination (used for change addresses)
     * </pre>
     *
     * <code>repeated uint32 address_n = 2;</code>
     * @return The count of addressN.
     */
    int getAddressNCount();
    /**
     * <pre>
     * BIP-32 path to derive the destination (used for change addresses)
     * </pre>
     *
     * <code>repeated uint32 address_n = 2;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    int getAddressN(int index);

    /**
     * <pre>
     * amount to spend in satoshis
     * </pre>
     *
     * <code>required uint64 amount = 3;</code>
     * @return Whether the amount field is set.
     */
    boolean hasAmount();
    /**
     * <pre>
     * amount to spend in satoshis
     * </pre>
     *
     * <code>required uint64 amount = 3;</code>
     * @return The amount.
     */
    long getAmount();

    /**
     * <pre>
     * output script type
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.OutputScriptType script_type = 4 [default = PAYTOADDRESS];</code>
     * @return Whether the scriptType field is set.
     */
    boolean hasScriptType();
    /**
     * <pre>
     * output script type
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.OutputScriptType script_type = 4 [default = PAYTOADDRESS];</code>
     * @return The scriptType.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType getScriptType();

    /**
     * <pre>
     * defines multisig address; script_type must be PAYTOMULTISIG
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
     * @return Whether the multisig field is set.
     */
    boolean hasMultisig();
    /**
     * <pre>
     * defines multisig address; script_type must be PAYTOMULTISIG
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
     * @return The multisig.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig();
    /**
     * <pre>
     * defines multisig address; script_type must be PAYTOMULTISIG
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder();

    /**
     * <pre>
     * defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
     * </pre>
     *
     * <code>optional bytes op_return_data = 6;</code>
     * @return Whether the opReturnData field is set.
     */
    boolean hasOpReturnData();
    /**
     * <pre>
     * defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
     * </pre>
     *
     * <code>optional bytes op_return_data = 6;</code>
     * @return The opReturnData.
     */
    com.google.protobuf.ByteString getOpReturnData();

    /**
     * <pre>
     * tx_hash of the original transaction where this output was present (used when creating a replacement transaction)
     * </pre>
     *
     * <code>optional bytes orig_hash = 10;</code>
     * @return Whether the origHash field is set.
     */
    boolean hasOrigHash();
    /**
     * <pre>
     * tx_hash of the original transaction where this output was present (used when creating a replacement transaction)
     * </pre>
     *
     * <code>optional bytes orig_hash = 10;</code>
     * @return The origHash.
     */
    com.google.protobuf.ByteString getOrigHash();

    /**
     * <pre>
     * index of the output in the original transaction (used when creating a replacement transaction)
     * </pre>
     *
     * <code>optional uint32 orig_index = 11;</code>
     * @return Whether the origIndex field is set.
     */
    boolean hasOrigIndex();
    /**
     * <pre>
     * index of the output in the original transaction (used when creating a replacement transaction)
     * </pre>
     *
     * <code>optional uint32 orig_index = 11;</code>
     * @return The origIndex.
     */
    int getOrigIndex();

    /**
     * <pre>
     * index of the PaymentRequest containing this output
     * </pre>
     *
     * <code>optional uint32 payment_req_index = 12 [(.hw.trezor.messages.experimental_field) = true];</code>
     * @return Whether the paymentReqIndex field is set.
     */
    boolean hasPaymentReqIndex();
    /**
     * <pre>
     * index of the PaymentRequest containing this output
     * </pre>
     *
     * <code>optional uint32 payment_req_index = 12 [(.hw.trezor.messages.experimental_field) = true];</code>
     * @return The paymentReqIndex.
     */
    int getPaymentReqIndex();
  }
  /**
   * <pre>
   * * Data type for transaction output to be signed.
   * &#64;embed
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.TxOutput}
   */
  public static final class TxOutput extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxOutput)
      TxOutputOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        TxOutput.class.getName());
    }
    // Use TxOutput.newBuilder() to construct.
    private TxOutput(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TxOutput() {
      address_ = "";
      addressN_ = emptyIntList();
      scriptType_ = 0;
      opReturnData_ = com.google.protobuf.ByteString.EMPTY;
      origHash_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxOutput_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxOutput_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput.Builder.class);
    }

    private int bitField0_;
    public static final int ADDRESS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object address_ = "";
    /**
     * <pre>
     * destination address in Base58 encoding; script_type must be PAYTOADDRESS
     * </pre>
     *
     * <code>optional string address = 1;</code>
     * @return Whether the address field is set.
     */
    @java.lang.Override
    public boolean hasAddress() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * destination address in Base58 encoding; script_type must be PAYTOADDRESS
     * </pre>
     *
     * <code>optional string address = 1;</code>
     * @return The address.
     */
    @java.lang.Override
    public java.lang.String getAddress() {
      java.lang.Object ref = address_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          address_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * destination address in Base58 encoding; script_type must be PAYTOADDRESS
     * </pre>
     *
     * <code>optional string address = 1;</code>
     * @return The bytes for address.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getAddressBytes() {
      java.lang.Object ref = address_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        address_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ADDRESS_N_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList addressN_ =
        emptyIntList();
    /**
     * <pre>
     * BIP-32 path to derive the destination (used for change addresses)
     * </pre>
     *
     * <code>repeated uint32 address_n = 2;</code>
     * @return A list containing the addressN.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getAddressNList() {
      return addressN_;
    }
    /**
     * <pre>
     * BIP-32 path to derive the destination (used for change addresses)
     * </pre>
     *
     * <code>repeated uint32 address_n = 2;</code>
     * @return The count of addressN.
     */
    public int getAddressNCount() {
      return addressN_.size();
    }
    /**
     * <pre>
     * BIP-32 path to derive the destination (used for change addresses)
     * </pre>
     *
     * <code>repeated uint32 address_n = 2;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    public int getAddressN(int index) {
      return addressN_.getInt(index);
    }

    public static final int AMOUNT_FIELD_NUMBER = 3;
    private long amount_ = 0L;
    /**
     * <pre>
     * amount to spend in satoshis
     * </pre>
     *
     * <code>required uint64 amount = 3;</code>
     * @return Whether the amount field is set.
     */
    @java.lang.Override
    public boolean hasAmount() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * amount to spend in satoshis
     * </pre>
     *
     * <code>required uint64 amount = 3;</code>
     * @return The amount.
     */
    @java.lang.Override
    public long getAmount() {
      return amount_;
    }

    public static final int SCRIPT_TYPE_FIELD_NUMBER = 4;
    private int scriptType_ = 0;
    /**
     * <pre>
     * output script type
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.OutputScriptType script_type = 4 [default = PAYTOADDRESS];</code>
     * @return Whether the scriptType field is set.
     */
    @java.lang.Override public boolean hasScriptType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * output script type
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.OutputScriptType script_type = 4 [default = PAYTOADDRESS];</code>
     * @return The scriptType.
     */
    @java.lang.Override public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType getScriptType() {
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType.forNumber(scriptType_);
      return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType.PAYTOADDRESS : result;
    }

    public static final int MULTISIG_FIELD_NUMBER = 5;
    private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType multisig_;
    /**
     * <pre>
     * defines multisig address; script_type must be PAYTOMULTISIG
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
     * @return Whether the multisig field is set.
     */
    @java.lang.Override
    public boolean hasMultisig() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * defines multisig address; script_type must be PAYTOMULTISIG
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
     * @return The multisig.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig() {
      return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
    }
    /**
     * <pre>
     * defines multisig address; script_type must be PAYTOMULTISIG
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder() {
      return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
    }

    public static final int OP_RETURN_DATA_FIELD_NUMBER = 6;
    private com.google.protobuf.ByteString opReturnData_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
     * </pre>
     *
     * <code>optional bytes op_return_data = 6;</code>
     * @return Whether the opReturnData field is set.
     */
    @java.lang.Override
    public boolean hasOpReturnData() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
     * </pre>
     *
     * <code>optional bytes op_return_data = 6;</code>
     * @return The opReturnData.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getOpReturnData() {
      return opReturnData_;
    }

    public static final int ORIG_HASH_FIELD_NUMBER = 10;
    private com.google.protobuf.ByteString origHash_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * tx_hash of the original transaction where this output was present (used when creating a replacement transaction)
     * </pre>
     *
     * <code>optional bytes orig_hash = 10;</code>
     * @return Whether the origHash field is set.
     */
    @java.lang.Override
    public boolean hasOrigHash() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * tx_hash of the original transaction where this output was present (used when creating a replacement transaction)
     * </pre>
     *
     * <code>optional bytes orig_hash = 10;</code>
     * @return The origHash.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getOrigHash() {
      return origHash_;
    }

    public static final int ORIG_INDEX_FIELD_NUMBER = 11;
    private int origIndex_ = 0;
    /**
     * <pre>
     * index of the output in the original transaction (used when creating a replacement transaction)
     * </pre>
     *
     * <code>optional uint32 orig_index = 11;</code>
     * @return Whether the origIndex field is set.
     */
    @java.lang.Override
    public boolean hasOrigIndex() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * index of the output in the original transaction (used when creating a replacement transaction)
     * </pre>
     *
     * <code>optional uint32 orig_index = 11;</code>
     * @return The origIndex.
     */
    @java.lang.Override
    public int getOrigIndex() {
      return origIndex_;
    }

    public static final int PAYMENT_REQ_INDEX_FIELD_NUMBER = 12;
    private int paymentReqIndex_ = 0;
    /**
     * <pre>
     * index of the PaymentRequest containing this output
     * </pre>
     *
     * <code>optional uint32 payment_req_index = 12 [(.hw.trezor.messages.experimental_field) = true];</code>
     * @return Whether the paymentReqIndex field is set.
     */
    @java.lang.Override
    public boolean hasPaymentReqIndex() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * index of the PaymentRequest containing this output
     * </pre>
     *
     * <code>optional uint32 payment_req_index = 12 [(.hw.trezor.messages.experimental_field) = true];</code>
     * @return The paymentReqIndex.
     */
    @java.lang.Override
    public int getPaymentReqIndex() {
      return paymentReqIndex_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasAmount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasMultisig()) {
        if (!getMultisig().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, address_);
      }
      for (int i = 0; i < addressN_.size(); i++) {
        output.writeUInt32(2, addressN_.getInt(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt64(3, amount_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeEnum(4, scriptType_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(5, getMultisig());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBytes(6, opReturnData_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeBytes(10, origHash_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeUInt32(11, origIndex_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeUInt32(12, paymentReqIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, address_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < addressN_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(addressN_.getInt(i));
        }
        size += dataSize;
        size += 1 * getAddressNList().size();
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, amount_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, scriptType_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getMultisig());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, opReturnData_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, origHash_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, origIndex_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, paymentReqIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput) obj;

      if (hasAddress() != other.hasAddress()) return false;
      if (hasAddress()) {
        if (!getAddress()
            .equals(other.getAddress())) return false;
      }
      if (!getAddressNList()
          .equals(other.getAddressNList())) return false;
      if (hasAmount() != other.hasAmount()) return false;
      if (hasAmount()) {
        if (getAmount()
            != other.getAmount()) return false;
      }
      if (hasScriptType() != other.hasScriptType()) return false;
      if (hasScriptType()) {
        if (scriptType_ != other.scriptType_) return false;
      }
      if (hasMultisig() != other.hasMultisig()) return false;
      if (hasMultisig()) {
        if (!getMultisig()
            .equals(other.getMultisig())) return false;
      }
      if (hasOpReturnData() != other.hasOpReturnData()) return false;
      if (hasOpReturnData()) {
        if (!getOpReturnData()
            .equals(other.getOpReturnData())) return false;
      }
      if (hasOrigHash() != other.hasOrigHash()) return false;
      if (hasOrigHash()) {
        if (!getOrigHash()
            .equals(other.getOrigHash())) return false;
      }
      if (hasOrigIndex() != other.hasOrigIndex()) return false;
      if (hasOrigIndex()) {
        if (getOrigIndex()
            != other.getOrigIndex()) return false;
      }
      if (hasPaymentReqIndex() != other.hasPaymentReqIndex()) return false;
      if (hasPaymentReqIndex()) {
        if (getPaymentReqIndex()
            != other.getPaymentReqIndex()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasAddress()) {
        hash = (37 * hash) + ADDRESS_FIELD_NUMBER;
        hash = (53 * hash) + getAddress().hashCode();
      }
      if (getAddressNCount() > 0) {
        hash = (37 * hash) + ADDRESS_N_FIELD_NUMBER;
        hash = (53 * hash) + getAddressNList().hashCode();
      }
      if (hasAmount()) {
        hash = (37 * hash) + AMOUNT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getAmount());
      }
      if (hasScriptType()) {
        hash = (37 * hash) + SCRIPT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + scriptType_;
      }
      if (hasMultisig()) {
        hash = (37 * hash) + MULTISIG_FIELD_NUMBER;
        hash = (53 * hash) + getMultisig().hashCode();
      }
      if (hasOpReturnData()) {
        hash = (37 * hash) + OP_RETURN_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getOpReturnData().hashCode();
      }
      if (hasOrigHash()) {
        hash = (37 * hash) + ORIG_HASH_FIELD_NUMBER;
        hash = (53 * hash) + getOrigHash().hashCode();
      }
      if (hasOrigIndex()) {
        hash = (37 * hash) + ORIG_INDEX_FIELD_NUMBER;
        hash = (53 * hash) + getOrigIndex();
      }
      if (hasPaymentReqIndex()) {
        hash = (37 * hash) + PAYMENT_REQ_INDEX_FIELD_NUMBER;
        hash = (53 * hash) + getPaymentReqIndex();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * * Data type for transaction output to be signed.
     * &#64;embed
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxOutput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxOutput)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutputOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxOutput_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxOutput_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getMultisigFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        address_ = "";
        addressN_ = emptyIntList();
        amount_ = 0L;
        scriptType_ = 0;
        multisig_ = null;
        if (multisigBuilder_ != null) {
          multisigBuilder_.dispose();
          multisigBuilder_ = null;
        }
        opReturnData_ = com.google.protobuf.ByteString.EMPTY;
        origHash_ = com.google.protobuf.ByteString.EMPTY;
        origIndex_ = 0;
        paymentReqIndex_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxOutput_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.address_ = address_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          addressN_.makeImmutable();
          result.addressN_ = addressN_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.amount_ = amount_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.scriptType_ = scriptType_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.multisig_ = multisigBuilder_ == null
              ? multisig_
              : multisigBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.opReturnData_ = opReturnData_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.origHash_ = origHash_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.origIndex_ = origIndex_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.paymentReqIndex_ = paymentReqIndex_;
          to_bitField0_ |= 0x00000080;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput.getDefaultInstance()) return this;
        if (other.hasAddress()) {
          address_ = other.address_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (!other.addressN_.isEmpty()) {
          if (addressN_.isEmpty()) {
            addressN_ = other.addressN_;
            addressN_.makeImmutable();
            bitField0_ |= 0x00000002;
          } else {
            ensureAddressNIsMutable();
            addressN_.addAll(other.addressN_);
          }
          onChanged();
        }
        if (other.hasAmount()) {
          setAmount(other.getAmount());
        }
        if (other.hasScriptType()) {
          setScriptType(other.getScriptType());
        }
        if (other.hasMultisig()) {
          mergeMultisig(other.getMultisig());
        }
        if (other.hasOpReturnData()) {
          setOpReturnData(other.getOpReturnData());
        }
        if (other.hasOrigHash()) {
          setOrigHash(other.getOrigHash());
        }
        if (other.hasOrigIndex()) {
          setOrigIndex(other.getOrigIndex());
        }
        if (other.hasPaymentReqIndex()) {
          setPaymentReqIndex(other.getPaymentReqIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasAmount()) {
          return false;
        }
        if (hasMultisig()) {
          if (!getMultisig().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                address_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                int v = input.readUInt32();
                ensureAddressNIsMutable();
                addressN_.addInt(v);
                break;
              } // case 16
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureAddressNIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  addressN_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 18
              case 24: {
                amount_ = input.readUInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                int tmpRaw = input.readEnum();
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType tmpValue =
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(4, tmpRaw);
                } else {
                  scriptType_ = tmpRaw;
                  bitField0_ |= 0x00000008;
                }
                break;
              } // case 32
              case 42: {
                input.readMessage(
                    getMultisigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 50: {
                opReturnData_ = input.readBytes();
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              case 82: {
                origHash_ = input.readBytes();
                bitField0_ |= 0x00000040;
                break;
              } // case 82
              case 88: {
                origIndex_ = input.readUInt32();
                bitField0_ |= 0x00000080;
                break;
              } // case 88
              case 96: {
                paymentReqIndex_ = input.readUInt32();
                bitField0_ |= 0x00000100;
                break;
              } // case 96
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object address_ = "";
      /**
       * <pre>
       * destination address in Base58 encoding; script_type must be PAYTOADDRESS
       * </pre>
       *
       * <code>optional string address = 1;</code>
       * @return Whether the address field is set.
       */
      public boolean hasAddress() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * destination address in Base58 encoding; script_type must be PAYTOADDRESS
       * </pre>
       *
       * <code>optional string address = 1;</code>
       * @return The address.
       */
      public java.lang.String getAddress() {
        java.lang.Object ref = address_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            address_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * destination address in Base58 encoding; script_type must be PAYTOADDRESS
       * </pre>
       *
       * <code>optional string address = 1;</code>
       * @return The bytes for address.
       */
      public com.google.protobuf.ByteString
          getAddressBytes() {
        java.lang.Object ref = address_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          address_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * destination address in Base58 encoding; script_type must be PAYTOADDRESS
       * </pre>
       *
       * <code>optional string address = 1;</code>
       * @param value The address to set.
       * @return This builder for chaining.
       */
      public Builder setAddress(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        address_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * destination address in Base58 encoding; script_type must be PAYTOADDRESS
       * </pre>
       *
       * <code>optional string address = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAddress() {
        address_ = getDefaultInstance().getAddress();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * destination address in Base58 encoding; script_type must be PAYTOADDRESS
       * </pre>
       *
       * <code>optional string address = 1;</code>
       * @param value The bytes for address to set.
       * @return This builder for chaining.
       */
      public Builder setAddressBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        address_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList addressN_ = emptyIntList();
      private void ensureAddressNIsMutable() {
        if (!addressN_.isModifiable()) {
          addressN_ = makeMutableCopy(addressN_);
        }
        bitField0_ |= 0x00000002;
      }
      /**
       * <pre>
       * BIP-32 path to derive the destination (used for change addresses)
       * </pre>
       *
       * <code>repeated uint32 address_n = 2;</code>
       * @return A list containing the addressN.
       */
      public java.util.List<java.lang.Integer>
          getAddressNList() {
        addressN_.makeImmutable();
        return addressN_;
      }
      /**
       * <pre>
       * BIP-32 path to derive the destination (used for change addresses)
       * </pre>
       *
       * <code>repeated uint32 address_n = 2;</code>
       * @return The count of addressN.
       */
      public int getAddressNCount() {
        return addressN_.size();
      }
      /**
       * <pre>
       * BIP-32 path to derive the destination (used for change addresses)
       * </pre>
       *
       * <code>repeated uint32 address_n = 2;</code>
       * @param index The index of the element to return.
       * @return The addressN at the given index.
       */
      public int getAddressN(int index) {
        return addressN_.getInt(index);
      }
      /**
       * <pre>
       * BIP-32 path to derive the destination (used for change addresses)
       * </pre>
       *
       * <code>repeated uint32 address_n = 2;</code>
       * @param index The index to set the value at.
       * @param value The addressN to set.
       * @return This builder for chaining.
       */
      public Builder setAddressN(
          int index, int value) {

        ensureAddressNIsMutable();
        addressN_.setInt(index, value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the destination (used for change addresses)
       * </pre>
       *
       * <code>repeated uint32 address_n = 2;</code>
       * @param value The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAddressN(int value) {

        ensureAddressNIsMutable();
        addressN_.addInt(value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the destination (used for change addresses)
       * </pre>
       *
       * <code>repeated uint32 address_n = 2;</code>
       * @param values The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAllAddressN(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAddressNIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, addressN_);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the destination (used for change addresses)
       * </pre>
       *
       * <code>repeated uint32 address_n = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearAddressN() {
        addressN_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private long amount_ ;
      /**
       * <pre>
       * amount to spend in satoshis
       * </pre>
       *
       * <code>required uint64 amount = 3;</code>
       * @return Whether the amount field is set.
       */
      @java.lang.Override
      public boolean hasAmount() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * amount to spend in satoshis
       * </pre>
       *
       * <code>required uint64 amount = 3;</code>
       * @return The amount.
       */
      @java.lang.Override
      public long getAmount() {
        return amount_;
      }
      /**
       * <pre>
       * amount to spend in satoshis
       * </pre>
       *
       * <code>required uint64 amount = 3;</code>
       * @param value The amount to set.
       * @return This builder for chaining.
       */
      public Builder setAmount(long value) {

        amount_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * amount to spend in satoshis
       * </pre>
       *
       * <code>required uint64 amount = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearAmount() {
        bitField0_ = (bitField0_ & ~0x00000004);
        amount_ = 0L;
        onChanged();
        return this;
      }

      private int scriptType_ = 0;
      /**
       * <pre>
       * output script type
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.OutputScriptType script_type = 4 [default = PAYTOADDRESS];</code>
       * @return Whether the scriptType field is set.
       */
      @java.lang.Override public boolean hasScriptType() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * output script type
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.OutputScriptType script_type = 4 [default = PAYTOADDRESS];</code>
       * @return The scriptType.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType getScriptType() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType.forNumber(scriptType_);
        return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType.PAYTOADDRESS : result;
      }
      /**
       * <pre>
       * output script type
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.OutputScriptType script_type = 4 [default = PAYTOADDRESS];</code>
       * @param value The scriptType to set.
       * @return This builder for chaining.
       */
      public Builder setScriptType(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OutputScriptType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        scriptType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * output script type
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.OutputScriptType script_type = 4 [default = PAYTOADDRESS];</code>
       * @return This builder for chaining.
       */
      public Builder clearScriptType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        scriptType_ = 0;
        onChanged();
        return this;
      }

      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType multisig_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder> multisigBuilder_;
      /**
       * <pre>
       * defines multisig address; script_type must be PAYTOMULTISIG
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
       * @return Whether the multisig field is set.
       */
      public boolean hasMultisig() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * defines multisig address; script_type must be PAYTOMULTISIG
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
       * @return The multisig.
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig() {
        if (multisigBuilder_ == null) {
          return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
        } else {
          return multisigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * defines multisig address; script_type must be PAYTOMULTISIG
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
       */
      public Builder setMultisig(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType value) {
        if (multisigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          multisig_ = value;
        } else {
          multisigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * defines multisig address; script_type must be PAYTOMULTISIG
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
       */
      public Builder setMultisig(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder builderForValue) {
        if (multisigBuilder_ == null) {
          multisig_ = builderForValue.build();
        } else {
          multisigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * defines multisig address; script_type must be PAYTOMULTISIG
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
       */
      public Builder mergeMultisig(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType value) {
        if (multisigBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            multisig_ != null &&
            multisig_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance()) {
            getMultisigBuilder().mergeFrom(value);
          } else {
            multisig_ = value;
          }
        } else {
          multisigBuilder_.mergeFrom(value);
        }
        if (multisig_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * defines multisig address; script_type must be PAYTOMULTISIG
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
       */
      public Builder clearMultisig() {
        bitField0_ = (bitField0_ & ~0x00000010);
        multisig_ = null;
        if (multisigBuilder_ != null) {
          multisigBuilder_.dispose();
          multisigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * defines multisig address; script_type must be PAYTOMULTISIG
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder getMultisigBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getMultisigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * defines multisig address; script_type must be PAYTOMULTISIG
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder() {
        if (multisigBuilder_ != null) {
          return multisigBuilder_.getMessageOrBuilder();
        } else {
          return multisig_ == null ?
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
        }
      }
      /**
       * <pre>
       * defines multisig address; script_type must be PAYTOMULTISIG
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder> 
          getMultisigFieldBuilder() {
        if (multisigBuilder_ == null) {
          multisigBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder>(
                  getMultisig(),
                  getParentForChildren(),
                  isClean());
          multisig_ = null;
        }
        return multisigBuilder_;
      }

      private com.google.protobuf.ByteString opReturnData_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
       * </pre>
       *
       * <code>optional bytes op_return_data = 6;</code>
       * @return Whether the opReturnData field is set.
       */
      @java.lang.Override
      public boolean hasOpReturnData() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
       * </pre>
       *
       * <code>optional bytes op_return_data = 6;</code>
       * @return The opReturnData.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getOpReturnData() {
        return opReturnData_;
      }
      /**
       * <pre>
       * defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
       * </pre>
       *
       * <code>optional bytes op_return_data = 6;</code>
       * @param value The opReturnData to set.
       * @return This builder for chaining.
       */
      public Builder setOpReturnData(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        opReturnData_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
       * </pre>
       *
       * <code>optional bytes op_return_data = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearOpReturnData() {
        bitField0_ = (bitField0_ & ~0x00000020);
        opReturnData_ = getDefaultInstance().getOpReturnData();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString origHash_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * tx_hash of the original transaction where this output was present (used when creating a replacement transaction)
       * </pre>
       *
       * <code>optional bytes orig_hash = 10;</code>
       * @return Whether the origHash field is set.
       */
      @java.lang.Override
      public boolean hasOrigHash() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * tx_hash of the original transaction where this output was present (used when creating a replacement transaction)
       * </pre>
       *
       * <code>optional bytes orig_hash = 10;</code>
       * @return The origHash.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getOrigHash() {
        return origHash_;
      }
      /**
       * <pre>
       * tx_hash of the original transaction where this output was present (used when creating a replacement transaction)
       * </pre>
       *
       * <code>optional bytes orig_hash = 10;</code>
       * @param value The origHash to set.
       * @return This builder for chaining.
       */
      public Builder setOrigHash(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        origHash_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * tx_hash of the original transaction where this output was present (used when creating a replacement transaction)
       * </pre>
       *
       * <code>optional bytes orig_hash = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearOrigHash() {
        bitField0_ = (bitField0_ & ~0x00000040);
        origHash_ = getDefaultInstance().getOrigHash();
        onChanged();
        return this;
      }

      private int origIndex_ ;
      /**
       * <pre>
       * index of the output in the original transaction (used when creating a replacement transaction)
       * </pre>
       *
       * <code>optional uint32 orig_index = 11;</code>
       * @return Whether the origIndex field is set.
       */
      @java.lang.Override
      public boolean hasOrigIndex() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * index of the output in the original transaction (used when creating a replacement transaction)
       * </pre>
       *
       * <code>optional uint32 orig_index = 11;</code>
       * @return The origIndex.
       */
      @java.lang.Override
      public int getOrigIndex() {
        return origIndex_;
      }
      /**
       * <pre>
       * index of the output in the original transaction (used when creating a replacement transaction)
       * </pre>
       *
       * <code>optional uint32 orig_index = 11;</code>
       * @param value The origIndex to set.
       * @return This builder for chaining.
       */
      public Builder setOrigIndex(int value) {

        origIndex_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * index of the output in the original transaction (used when creating a replacement transaction)
       * </pre>
       *
       * <code>optional uint32 orig_index = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearOrigIndex() {
        bitField0_ = (bitField0_ & ~0x00000080);
        origIndex_ = 0;
        onChanged();
        return this;
      }

      private int paymentReqIndex_ ;
      /**
       * <pre>
       * index of the PaymentRequest containing this output
       * </pre>
       *
       * <code>optional uint32 payment_req_index = 12 [(.hw.trezor.messages.experimental_field) = true];</code>
       * @return Whether the paymentReqIndex field is set.
       */
      @java.lang.Override
      public boolean hasPaymentReqIndex() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * index of the PaymentRequest containing this output
       * </pre>
       *
       * <code>optional uint32 payment_req_index = 12 [(.hw.trezor.messages.experimental_field) = true];</code>
       * @return The paymentReqIndex.
       */
      @java.lang.Override
      public int getPaymentReqIndex() {
        return paymentReqIndex_;
      }
      /**
       * <pre>
       * index of the PaymentRequest containing this output
       * </pre>
       *
       * <code>optional uint32 payment_req_index = 12 [(.hw.trezor.messages.experimental_field) = true];</code>
       * @param value The paymentReqIndex to set.
       * @return This builder for chaining.
       */
      public Builder setPaymentReqIndex(int value) {

        paymentReqIndex_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * index of the PaymentRequest containing this output
       * </pre>
       *
       * <code>optional uint32 payment_req_index = 12 [(.hw.trezor.messages.experimental_field) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearPaymentReqIndex() {
        bitField0_ = (bitField0_ & ~0x00000100);
        paymentReqIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxOutput)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxOutput)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TxOutput>
        PARSER = new com.google.protobuf.AbstractParser<TxOutput>() {
      @java.lang.Override
      public TxOutput parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TxOutput> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TxOutput> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PrevTxOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.PrevTx)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 version = 1;</code>
     * @return Whether the version field is set.
     */
    boolean hasVersion();
    /**
     * <code>required uint32 version = 1;</code>
     * @return The version.
     */
    int getVersion();

    /**
     * <code>required uint32 lock_time = 4;</code>
     * @return Whether the lockTime field is set.
     */
    boolean hasLockTime();
    /**
     * <code>required uint32 lock_time = 4;</code>
     * @return The lockTime.
     */
    int getLockTime();

    /**
     * <code>required uint32 inputs_count = 6;</code>
     * @return Whether the inputsCount field is set.
     */
    boolean hasInputsCount();
    /**
     * <code>required uint32 inputs_count = 6;</code>
     * @return The inputsCount.
     */
    int getInputsCount();

    /**
     * <code>required uint32 outputs_count = 7;</code>
     * @return Whether the outputsCount field is set.
     */
    boolean hasOutputsCount();
    /**
     * <code>required uint32 outputs_count = 7;</code>
     * @return The outputsCount.
     */
    int getOutputsCount();

    /**
     * <pre>
     * only for Dash, Zcash
     * </pre>
     *
     * <code>optional uint32 extra_data_len = 9 [default = 0];</code>
     * @return Whether the extraDataLen field is set.
     */
    boolean hasExtraDataLen();
    /**
     * <pre>
     * only for Dash, Zcash
     * </pre>
     *
     * <code>optional uint32 extra_data_len = 9 [default = 0];</code>
     * @return The extraDataLen.
     */
    int getExtraDataLen();

    /**
     * <pre>
     * only for Decred and Zcash
     * </pre>
     *
     * <code>optional uint32 expiry = 10;</code>
     * @return Whether the expiry field is set.
     */
    boolean hasExpiry();
    /**
     * <pre>
     * only for Decred and Zcash
     * </pre>
     *
     * <code>optional uint32 expiry = 10;</code>
     * @return The expiry.
     */
    int getExpiry();

    /**
     * <pre>
     * only for Zcash, nVersionGroupId
     * </pre>
     *
     * <code>optional uint32 version_group_id = 12;</code>
     * @return Whether the versionGroupId field is set.
     */
    boolean hasVersionGroupId();
    /**
     * <pre>
     * only for Zcash, nVersionGroupId
     * </pre>
     *
     * <code>optional uint32 version_group_id = 12;</code>
     * @return The versionGroupId.
     */
    int getVersionGroupId();

    /**
     * <pre>
     * only for Peercoin
     * </pre>
     *
     * <code>optional uint32 timestamp = 13;</code>
     * @return Whether the timestamp field is set.
     */
    boolean hasTimestamp();
    /**
     * <pre>
     * only for Peercoin
     * </pre>
     *
     * <code>optional uint32 timestamp = 13;</code>
     * @return The timestamp.
     */
    int getTimestamp();

    /**
     * <pre>
     * only for Zcash, BRANCH_ID
     * </pre>
     *
     * <code>optional uint32 branch_id = 14;</code>
     * @return Whether the branchId field is set.
     */
    boolean hasBranchId();
    /**
     * <pre>
     * only for Zcash, BRANCH_ID
     * </pre>
     *
     * <code>optional uint32 branch_id = 14;</code>
     * @return The branchId.
     */
    int getBranchId();
  }
  /**
   * <pre>
   * * Data type for metadata about previous transaction which contains the UTXO being spent.
   * &#64;embed
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.PrevTx}
   */
  public static final class PrevTx extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.PrevTx)
      PrevTxOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        PrevTx.class.getName());
    }
    // Use PrevTx.newBuilder() to construct.
    private PrevTx(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private PrevTx() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PrevTx_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PrevTx_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx.Builder.class);
    }

    private int bitField0_;
    public static final int VERSION_FIELD_NUMBER = 1;
    private int version_ = 0;
    /**
     * <code>required uint32 version = 1;</code>
     * @return Whether the version field is set.
     */
    @java.lang.Override
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required uint32 version = 1;</code>
     * @return The version.
     */
    @java.lang.Override
    public int getVersion() {
      return version_;
    }

    public static final int LOCK_TIME_FIELD_NUMBER = 4;
    private int lockTime_ = 0;
    /**
     * <code>required uint32 lock_time = 4;</code>
     * @return Whether the lockTime field is set.
     */
    @java.lang.Override
    public boolean hasLockTime() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>required uint32 lock_time = 4;</code>
     * @return The lockTime.
     */
    @java.lang.Override
    public int getLockTime() {
      return lockTime_;
    }

    public static final int INPUTS_COUNT_FIELD_NUMBER = 6;
    private int inputsCount_ = 0;
    /**
     * <code>required uint32 inputs_count = 6;</code>
     * @return Whether the inputsCount field is set.
     */
    @java.lang.Override
    public boolean hasInputsCount() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>required uint32 inputs_count = 6;</code>
     * @return The inputsCount.
     */
    @java.lang.Override
    public int getInputsCount() {
      return inputsCount_;
    }

    public static final int OUTPUTS_COUNT_FIELD_NUMBER = 7;
    private int outputsCount_ = 0;
    /**
     * <code>required uint32 outputs_count = 7;</code>
     * @return Whether the outputsCount field is set.
     */
    @java.lang.Override
    public boolean hasOutputsCount() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>required uint32 outputs_count = 7;</code>
     * @return The outputsCount.
     */
    @java.lang.Override
    public int getOutputsCount() {
      return outputsCount_;
    }

    public static final int EXTRA_DATA_LEN_FIELD_NUMBER = 9;
    private int extraDataLen_ = 0;
    /**
     * <pre>
     * only for Dash, Zcash
     * </pre>
     *
     * <code>optional uint32 extra_data_len = 9 [default = 0];</code>
     * @return Whether the extraDataLen field is set.
     */
    @java.lang.Override
    public boolean hasExtraDataLen() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * only for Dash, Zcash
     * </pre>
     *
     * <code>optional uint32 extra_data_len = 9 [default = 0];</code>
     * @return The extraDataLen.
     */
    @java.lang.Override
    public int getExtraDataLen() {
      return extraDataLen_;
    }

    public static final int EXPIRY_FIELD_NUMBER = 10;
    private int expiry_ = 0;
    /**
     * <pre>
     * only for Decred and Zcash
     * </pre>
     *
     * <code>optional uint32 expiry = 10;</code>
     * @return Whether the expiry field is set.
     */
    @java.lang.Override
    public boolean hasExpiry() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * only for Decred and Zcash
     * </pre>
     *
     * <code>optional uint32 expiry = 10;</code>
     * @return The expiry.
     */
    @java.lang.Override
    public int getExpiry() {
      return expiry_;
    }

    public static final int VERSION_GROUP_ID_FIELD_NUMBER = 12;
    private int versionGroupId_ = 0;
    /**
     * <pre>
     * only for Zcash, nVersionGroupId
     * </pre>
     *
     * <code>optional uint32 version_group_id = 12;</code>
     * @return Whether the versionGroupId field is set.
     */
    @java.lang.Override
    public boolean hasVersionGroupId() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * only for Zcash, nVersionGroupId
     * </pre>
     *
     * <code>optional uint32 version_group_id = 12;</code>
     * @return The versionGroupId.
     */
    @java.lang.Override
    public int getVersionGroupId() {
      return versionGroupId_;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 13;
    private int timestamp_ = 0;
    /**
     * <pre>
     * only for Peercoin
     * </pre>
     *
     * <code>optional uint32 timestamp = 13;</code>
     * @return Whether the timestamp field is set.
     */
    @java.lang.Override
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * only for Peercoin
     * </pre>
     *
     * <code>optional uint32 timestamp = 13;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public int getTimestamp() {
      return timestamp_;
    }

    public static final int BRANCH_ID_FIELD_NUMBER = 14;
    private int branchId_ = 0;
    /**
     * <pre>
     * only for Zcash, BRANCH_ID
     * </pre>
     *
     * <code>optional uint32 branch_id = 14;</code>
     * @return Whether the branchId field is set.
     */
    @java.lang.Override
    public boolean hasBranchId() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * only for Zcash, BRANCH_ID
     * </pre>
     *
     * <code>optional uint32 branch_id = 14;</code>
     * @return The branchId.
     */
    @java.lang.Override
    public int getBranchId() {
      return branchId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasVersion()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLockTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInputsCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasOutputsCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(1, version_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt32(4, lockTime_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeUInt32(6, inputsCount_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeUInt32(7, outputsCount_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeUInt32(9, extraDataLen_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeUInt32(10, expiry_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeUInt32(12, versionGroupId_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeUInt32(13, timestamp_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeUInt32(14, branchId_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, version_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, lockTime_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, inputsCount_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, outputsCount_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, extraDataLen_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, expiry_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, versionGroupId_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, timestamp_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(14, branchId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx) obj;

      if (hasVersion() != other.hasVersion()) return false;
      if (hasVersion()) {
        if (getVersion()
            != other.getVersion()) return false;
      }
      if (hasLockTime() != other.hasLockTime()) return false;
      if (hasLockTime()) {
        if (getLockTime()
            != other.getLockTime()) return false;
      }
      if (hasInputsCount() != other.hasInputsCount()) return false;
      if (hasInputsCount()) {
        if (getInputsCount()
            != other.getInputsCount()) return false;
      }
      if (hasOutputsCount() != other.hasOutputsCount()) return false;
      if (hasOutputsCount()) {
        if (getOutputsCount()
            != other.getOutputsCount()) return false;
      }
      if (hasExtraDataLen() != other.hasExtraDataLen()) return false;
      if (hasExtraDataLen()) {
        if (getExtraDataLen()
            != other.getExtraDataLen()) return false;
      }
      if (hasExpiry() != other.hasExpiry()) return false;
      if (hasExpiry()) {
        if (getExpiry()
            != other.getExpiry()) return false;
      }
      if (hasVersionGroupId() != other.hasVersionGroupId()) return false;
      if (hasVersionGroupId()) {
        if (getVersionGroupId()
            != other.getVersionGroupId()) return false;
      }
      if (hasTimestamp() != other.hasTimestamp()) return false;
      if (hasTimestamp()) {
        if (getTimestamp()
            != other.getTimestamp()) return false;
      }
      if (hasBranchId() != other.hasBranchId()) return false;
      if (hasBranchId()) {
        if (getBranchId()
            != other.getBranchId()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasVersion()) {
        hash = (37 * hash) + VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getVersion();
      }
      if (hasLockTime()) {
        hash = (37 * hash) + LOCK_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getLockTime();
      }
      if (hasInputsCount()) {
        hash = (37 * hash) + INPUTS_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getInputsCount();
      }
      if (hasOutputsCount()) {
        hash = (37 * hash) + OUTPUTS_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getOutputsCount();
      }
      if (hasExtraDataLen()) {
        hash = (37 * hash) + EXTRA_DATA_LEN_FIELD_NUMBER;
        hash = (53 * hash) + getExtraDataLen();
      }
      if (hasExpiry()) {
        hash = (37 * hash) + EXPIRY_FIELD_NUMBER;
        hash = (53 * hash) + getExpiry();
      }
      if (hasVersionGroupId()) {
        hash = (37 * hash) + VERSION_GROUP_ID_FIELD_NUMBER;
        hash = (53 * hash) + getVersionGroupId();
      }
      if (hasTimestamp()) {
        hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + getTimestamp();
      }
      if (hasBranchId()) {
        hash = (37 * hash) + BRANCH_ID_FIELD_NUMBER;
        hash = (53 * hash) + getBranchId();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * * Data type for metadata about previous transaction which contains the UTXO being spent.
     * &#64;embed
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.PrevTx}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.PrevTx)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTxOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PrevTx_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PrevTx_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        version_ = 0;
        lockTime_ = 0;
        inputsCount_ = 0;
        outputsCount_ = 0;
        extraDataLen_ = 0;
        expiry_ = 0;
        versionGroupId_ = 0;
        timestamp_ = 0;
        branchId_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PrevTx_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.version_ = version_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.lockTime_ = lockTime_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.inputsCount_ = inputsCount_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.outputsCount_ = outputsCount_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.extraDataLen_ = extraDataLen_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.expiry_ = expiry_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.versionGroupId_ = versionGroupId_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.timestamp_ = timestamp_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.branchId_ = branchId_;
          to_bitField0_ |= 0x00000100;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx.getDefaultInstance()) return this;
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasLockTime()) {
          setLockTime(other.getLockTime());
        }
        if (other.hasInputsCount()) {
          setInputsCount(other.getInputsCount());
        }
        if (other.hasOutputsCount()) {
          setOutputsCount(other.getOutputsCount());
        }
        if (other.hasExtraDataLen()) {
          setExtraDataLen(other.getExtraDataLen());
        }
        if (other.hasExpiry()) {
          setExpiry(other.getExpiry());
        }
        if (other.hasVersionGroupId()) {
          setVersionGroupId(other.getVersionGroupId());
        }
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (other.hasBranchId()) {
          setBranchId(other.getBranchId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasVersion()) {
          return false;
        }
        if (!hasLockTime()) {
          return false;
        }
        if (!hasInputsCount()) {
          return false;
        }
        if (!hasOutputsCount()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                version_ = input.readUInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 32: {
                lockTime_ = input.readUInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 32
              case 48: {
                inputsCount_ = input.readUInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 48
              case 56: {
                outputsCount_ = input.readUInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 56
              case 72: {
                extraDataLen_ = input.readUInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 72
              case 80: {
                expiry_ = input.readUInt32();
                bitField0_ |= 0x00000020;
                break;
              } // case 80
              case 96: {
                versionGroupId_ = input.readUInt32();
                bitField0_ |= 0x00000040;
                break;
              } // case 96
              case 104: {
                timestamp_ = input.readUInt32();
                bitField0_ |= 0x00000080;
                break;
              } // case 104
              case 112: {
                branchId_ = input.readUInt32();
                bitField0_ |= 0x00000100;
                break;
              } // case 112
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int version_ ;
      /**
       * <code>required uint32 version = 1;</code>
       * @return Whether the version field is set.
       */
      @java.lang.Override
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required uint32 version = 1;</code>
       * @return The version.
       */
      @java.lang.Override
      public int getVersion() {
        return version_;
      }
      /**
       * <code>required uint32 version = 1;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(int value) {

        version_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 version = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = 0;
        onChanged();
        return this;
      }

      private int lockTime_ ;
      /**
       * <code>required uint32 lock_time = 4;</code>
       * @return Whether the lockTime field is set.
       */
      @java.lang.Override
      public boolean hasLockTime() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>required uint32 lock_time = 4;</code>
       * @return The lockTime.
       */
      @java.lang.Override
      public int getLockTime() {
        return lockTime_;
      }
      /**
       * <code>required uint32 lock_time = 4;</code>
       * @param value The lockTime to set.
       * @return This builder for chaining.
       */
      public Builder setLockTime(int value) {

        lockTime_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 lock_time = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearLockTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        lockTime_ = 0;
        onChanged();
        return this;
      }

      private int inputsCount_ ;
      /**
       * <code>required uint32 inputs_count = 6;</code>
       * @return Whether the inputsCount field is set.
       */
      @java.lang.Override
      public boolean hasInputsCount() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>required uint32 inputs_count = 6;</code>
       * @return The inputsCount.
       */
      @java.lang.Override
      public int getInputsCount() {
        return inputsCount_;
      }
      /**
       * <code>required uint32 inputs_count = 6;</code>
       * @param value The inputsCount to set.
       * @return This builder for chaining.
       */
      public Builder setInputsCount(int value) {

        inputsCount_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 inputs_count = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearInputsCount() {
        bitField0_ = (bitField0_ & ~0x00000004);
        inputsCount_ = 0;
        onChanged();
        return this;
      }

      private int outputsCount_ ;
      /**
       * <code>required uint32 outputs_count = 7;</code>
       * @return Whether the outputsCount field is set.
       */
      @java.lang.Override
      public boolean hasOutputsCount() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>required uint32 outputs_count = 7;</code>
       * @return The outputsCount.
       */
      @java.lang.Override
      public int getOutputsCount() {
        return outputsCount_;
      }
      /**
       * <code>required uint32 outputs_count = 7;</code>
       * @param value The outputsCount to set.
       * @return This builder for chaining.
       */
      public Builder setOutputsCount(int value) {

        outputsCount_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 outputs_count = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearOutputsCount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        outputsCount_ = 0;
        onChanged();
        return this;
      }

      private int extraDataLen_ ;
      /**
       * <pre>
       * only for Dash, Zcash
       * </pre>
       *
       * <code>optional uint32 extra_data_len = 9 [default = 0];</code>
       * @return Whether the extraDataLen field is set.
       */
      @java.lang.Override
      public boolean hasExtraDataLen() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * only for Dash, Zcash
       * </pre>
       *
       * <code>optional uint32 extra_data_len = 9 [default = 0];</code>
       * @return The extraDataLen.
       */
      @java.lang.Override
      public int getExtraDataLen() {
        return extraDataLen_;
      }
      /**
       * <pre>
       * only for Dash, Zcash
       * </pre>
       *
       * <code>optional uint32 extra_data_len = 9 [default = 0];</code>
       * @param value The extraDataLen to set.
       * @return This builder for chaining.
       */
      public Builder setExtraDataLen(int value) {

        extraDataLen_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * only for Dash, Zcash
       * </pre>
       *
       * <code>optional uint32 extra_data_len = 9 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearExtraDataLen() {
        bitField0_ = (bitField0_ & ~0x00000010);
        extraDataLen_ = 0;
        onChanged();
        return this;
      }

      private int expiry_ ;
      /**
       * <pre>
       * only for Decred and Zcash
       * </pre>
       *
       * <code>optional uint32 expiry = 10;</code>
       * @return Whether the expiry field is set.
       */
      @java.lang.Override
      public boolean hasExpiry() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * only for Decred and Zcash
       * </pre>
       *
       * <code>optional uint32 expiry = 10;</code>
       * @return The expiry.
       */
      @java.lang.Override
      public int getExpiry() {
        return expiry_;
      }
      /**
       * <pre>
       * only for Decred and Zcash
       * </pre>
       *
       * <code>optional uint32 expiry = 10;</code>
       * @param value The expiry to set.
       * @return This builder for chaining.
       */
      public Builder setExpiry(int value) {

        expiry_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * only for Decred and Zcash
       * </pre>
       *
       * <code>optional uint32 expiry = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearExpiry() {
        bitField0_ = (bitField0_ & ~0x00000020);
        expiry_ = 0;
        onChanged();
        return this;
      }

      private int versionGroupId_ ;
      /**
       * <pre>
       * only for Zcash, nVersionGroupId
       * </pre>
       *
       * <code>optional uint32 version_group_id = 12;</code>
       * @return Whether the versionGroupId field is set.
       */
      @java.lang.Override
      public boolean hasVersionGroupId() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * only for Zcash, nVersionGroupId
       * </pre>
       *
       * <code>optional uint32 version_group_id = 12;</code>
       * @return The versionGroupId.
       */
      @java.lang.Override
      public int getVersionGroupId() {
        return versionGroupId_;
      }
      /**
       * <pre>
       * only for Zcash, nVersionGroupId
       * </pre>
       *
       * <code>optional uint32 version_group_id = 12;</code>
       * @param value The versionGroupId to set.
       * @return This builder for chaining.
       */
      public Builder setVersionGroupId(int value) {

        versionGroupId_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * only for Zcash, nVersionGroupId
       * </pre>
       *
       * <code>optional uint32 version_group_id = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersionGroupId() {
        bitField0_ = (bitField0_ & ~0x00000040);
        versionGroupId_ = 0;
        onChanged();
        return this;
      }

      private int timestamp_ ;
      /**
       * <pre>
       * only for Peercoin
       * </pre>
       *
       * <code>optional uint32 timestamp = 13;</code>
       * @return Whether the timestamp field is set.
       */
      @java.lang.Override
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * only for Peercoin
       * </pre>
       *
       * <code>optional uint32 timestamp = 13;</code>
       * @return The timestamp.
       */
      @java.lang.Override
      public int getTimestamp() {
        return timestamp_;
      }
      /**
       * <pre>
       * only for Peercoin
       * </pre>
       *
       * <code>optional uint32 timestamp = 13;</code>
       * @param value The timestamp to set.
       * @return This builder for chaining.
       */
      public Builder setTimestamp(int value) {

        timestamp_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * only for Peercoin
       * </pre>
       *
       * <code>optional uint32 timestamp = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000080);
        timestamp_ = 0;
        onChanged();
        return this;
      }

      private int branchId_ ;
      /**
       * <pre>
       * only for Zcash, BRANCH_ID
       * </pre>
       *
       * <code>optional uint32 branch_id = 14;</code>
       * @return Whether the branchId field is set.
       */
      @java.lang.Override
      public boolean hasBranchId() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * only for Zcash, BRANCH_ID
       * </pre>
       *
       * <code>optional uint32 branch_id = 14;</code>
       * @return The branchId.
       */
      @java.lang.Override
      public int getBranchId() {
        return branchId_;
      }
      /**
       * <pre>
       * only for Zcash, BRANCH_ID
       * </pre>
       *
       * <code>optional uint32 branch_id = 14;</code>
       * @param value The branchId to set.
       * @return This builder for chaining.
       */
      public Builder setBranchId(int value) {

        branchId_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * only for Zcash, BRANCH_ID
       * </pre>
       *
       * <code>optional uint32 branch_id = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearBranchId() {
        bitField0_ = (bitField0_ & ~0x00000100);
        branchId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.PrevTx)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.PrevTx)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PrevTx>
        PARSER = new com.google.protobuf.AbstractParser<PrevTx>() {
      @java.lang.Override
      public PrevTx parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<PrevTx> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PrevTx> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PrevInputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.PrevInput)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * hash of previous transaction output to spend by this input
     * </pre>
     *
     * <code>required bytes prev_hash = 2;</code>
     * @return Whether the prevHash field is set.
     */
    boolean hasPrevHash();
    /**
     * <pre>
     * hash of previous transaction output to spend by this input
     * </pre>
     *
     * <code>required bytes prev_hash = 2;</code>
     * @return The prevHash.
     */
    com.google.protobuf.ByteString getPrevHash();

    /**
     * <pre>
     * index of previous output to spend
     * </pre>
     *
     * <code>required uint32 prev_index = 3;</code>
     * @return Whether the prevIndex field is set.
     */
    boolean hasPrevIndex();
    /**
     * <pre>
     * index of previous output to spend
     * </pre>
     *
     * <code>required uint32 prev_index = 3;</code>
     * @return The prevIndex.
     */
    int getPrevIndex();

    /**
     * <pre>
     * script signature
     * </pre>
     *
     * <code>required bytes script_sig = 4;</code>
     * @return Whether the scriptSig field is set.
     */
    boolean hasScriptSig();
    /**
     * <pre>
     * script signature
     * </pre>
     *
     * <code>required bytes script_sig = 4;</code>
     * @return The scriptSig.
     */
    com.google.protobuf.ByteString getScriptSig();

    /**
     * <pre>
     * sequence
     * </pre>
     *
     * <code>required uint32 sequence = 5;</code>
     * @return Whether the sequence field is set.
     */
    boolean hasSequence();
    /**
     * <pre>
     * sequence
     * </pre>
     *
     * <code>required uint32 sequence = 5;</code>
     * @return The sequence.
     */
    int getSequence();

    /**
     * <pre>
     * only for Decred
     * </pre>
     *
     * <code>optional uint32 decred_tree = 9;</code>
     * @return Whether the decredTree field is set.
     */
    boolean hasDecredTree();
    /**
     * <pre>
     * only for Decred
     * </pre>
     *
     * <code>optional uint32 decred_tree = 9;</code>
     * @return The decredTree.
     */
    int getDecredTree();
  }
  /**
   * <pre>
   * * Data type for inputs of previous transactions.
   *
   * When adding fields, take care to not conflict with TxInput
   * &#64;embed
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.PrevInput}
   */
  public static final class PrevInput extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.PrevInput)
      PrevInputOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        PrevInput.class.getName());
    }
    // Use PrevInput.newBuilder() to construct.
    private PrevInput(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private PrevInput() {
      prevHash_ = com.google.protobuf.ByteString.EMPTY;
      scriptSig_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PrevInput_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PrevInput_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput.Builder.class);
    }

    private int bitField0_;
    public static final int PREV_HASH_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString prevHash_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * hash of previous transaction output to spend by this input
     * </pre>
     *
     * <code>required bytes prev_hash = 2;</code>
     * @return Whether the prevHash field is set.
     */
    @java.lang.Override
    public boolean hasPrevHash() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * hash of previous transaction output to spend by this input
     * </pre>
     *
     * <code>required bytes prev_hash = 2;</code>
     * @return The prevHash.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPrevHash() {
      return prevHash_;
    }

    public static final int PREV_INDEX_FIELD_NUMBER = 3;
    private int prevIndex_ = 0;
    /**
     * <pre>
     * index of previous output to spend
     * </pre>
     *
     * <code>required uint32 prev_index = 3;</code>
     * @return Whether the prevIndex field is set.
     */
    @java.lang.Override
    public boolean hasPrevIndex() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * index of previous output to spend
     * </pre>
     *
     * <code>required uint32 prev_index = 3;</code>
     * @return The prevIndex.
     */
    @java.lang.Override
    public int getPrevIndex() {
      return prevIndex_;
    }

    public static final int SCRIPT_SIG_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString scriptSig_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * script signature
     * </pre>
     *
     * <code>required bytes script_sig = 4;</code>
     * @return Whether the scriptSig field is set.
     */
    @java.lang.Override
    public boolean hasScriptSig() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * script signature
     * </pre>
     *
     * <code>required bytes script_sig = 4;</code>
     * @return The scriptSig.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getScriptSig() {
      return scriptSig_;
    }

    public static final int SEQUENCE_FIELD_NUMBER = 5;
    private int sequence_ = 0;
    /**
     * <pre>
     * sequence
     * </pre>
     *
     * <code>required uint32 sequence = 5;</code>
     * @return Whether the sequence field is set.
     */
    @java.lang.Override
    public boolean hasSequence() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * sequence
     * </pre>
     *
     * <code>required uint32 sequence = 5;</code>
     * @return The sequence.
     */
    @java.lang.Override
    public int getSequence() {
      return sequence_;
    }

    public static final int DECRED_TREE_FIELD_NUMBER = 9;
    private int decredTree_ = 0;
    /**
     * <pre>
     * only for Decred
     * </pre>
     *
     * <code>optional uint32 decred_tree = 9;</code>
     * @return Whether the decredTree field is set.
     */
    @java.lang.Override
    public boolean hasDecredTree() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * only for Decred
     * </pre>
     *
     * <code>optional uint32 decred_tree = 9;</code>
     * @return The decredTree.
     */
    @java.lang.Override
    public int getDecredTree() {
      return decredTree_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPrevHash()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPrevIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasScriptSig()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSequence()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBytes(2, prevHash_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt32(3, prevIndex_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBytes(4, scriptSig_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeUInt32(5, sequence_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeUInt32(9, decredTree_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, prevHash_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, prevIndex_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, scriptSig_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, sequence_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, decredTree_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput) obj;

      if (hasPrevHash() != other.hasPrevHash()) return false;
      if (hasPrevHash()) {
        if (!getPrevHash()
            .equals(other.getPrevHash())) return false;
      }
      if (hasPrevIndex() != other.hasPrevIndex()) return false;
      if (hasPrevIndex()) {
        if (getPrevIndex()
            != other.getPrevIndex()) return false;
      }
      if (hasScriptSig() != other.hasScriptSig()) return false;
      if (hasScriptSig()) {
        if (!getScriptSig()
            .equals(other.getScriptSig())) return false;
      }
      if (hasSequence() != other.hasSequence()) return false;
      if (hasSequence()) {
        if (getSequence()
            != other.getSequence()) return false;
      }
      if (hasDecredTree() != other.hasDecredTree()) return false;
      if (hasDecredTree()) {
        if (getDecredTree()
            != other.getDecredTree()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPrevHash()) {
        hash = (37 * hash) + PREV_HASH_FIELD_NUMBER;
        hash = (53 * hash) + getPrevHash().hashCode();
      }
      if (hasPrevIndex()) {
        hash = (37 * hash) + PREV_INDEX_FIELD_NUMBER;
        hash = (53 * hash) + getPrevIndex();
      }
      if (hasScriptSig()) {
        hash = (37 * hash) + SCRIPT_SIG_FIELD_NUMBER;
        hash = (53 * hash) + getScriptSig().hashCode();
      }
      if (hasSequence()) {
        hash = (37 * hash) + SEQUENCE_FIELD_NUMBER;
        hash = (53 * hash) + getSequence();
      }
      if (hasDecredTree()) {
        hash = (37 * hash) + DECRED_TREE_FIELD_NUMBER;
        hash = (53 * hash) + getDecredTree();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * * Data type for inputs of previous transactions.
     *
     * When adding fields, take care to not conflict with TxInput
     * &#64;embed
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.PrevInput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.PrevInput)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInputOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PrevInput_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PrevInput_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        prevHash_ = com.google.protobuf.ByteString.EMPTY;
        prevIndex_ = 0;
        scriptSig_ = com.google.protobuf.ByteString.EMPTY;
        sequence_ = 0;
        decredTree_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PrevInput_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.prevHash_ = prevHash_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.prevIndex_ = prevIndex_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.scriptSig_ = scriptSig_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.sequence_ = sequence_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.decredTree_ = decredTree_;
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput.getDefaultInstance()) return this;
        if (other.hasPrevHash()) {
          setPrevHash(other.getPrevHash());
        }
        if (other.hasPrevIndex()) {
          setPrevIndex(other.getPrevIndex());
        }
        if (other.hasScriptSig()) {
          setScriptSig(other.getScriptSig());
        }
        if (other.hasSequence()) {
          setSequence(other.getSequence());
        }
        if (other.hasDecredTree()) {
          setDecredTree(other.getDecredTree());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasPrevHash()) {
          return false;
        }
        if (!hasPrevIndex()) {
          return false;
        }
        if (!hasScriptSig()) {
          return false;
        }
        if (!hasSequence()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 18: {
                prevHash_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 18
              case 24: {
                prevIndex_ = input.readUInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 24
              case 34: {
                scriptSig_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 34
              case 40: {
                sequence_ = input.readUInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 40
              case 72: {
                decredTree_ = input.readUInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 72
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString prevHash_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * hash of previous transaction output to spend by this input
       * </pre>
       *
       * <code>required bytes prev_hash = 2;</code>
       * @return Whether the prevHash field is set.
       */
      @java.lang.Override
      public boolean hasPrevHash() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * hash of previous transaction output to spend by this input
       * </pre>
       *
       * <code>required bytes prev_hash = 2;</code>
       * @return The prevHash.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPrevHash() {
        return prevHash_;
      }
      /**
       * <pre>
       * hash of previous transaction output to spend by this input
       * </pre>
       *
       * <code>required bytes prev_hash = 2;</code>
       * @param value The prevHash to set.
       * @return This builder for chaining.
       */
      public Builder setPrevHash(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        prevHash_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * hash of previous transaction output to spend by this input
       * </pre>
       *
       * <code>required bytes prev_hash = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrevHash() {
        bitField0_ = (bitField0_ & ~0x00000001);
        prevHash_ = getDefaultInstance().getPrevHash();
        onChanged();
        return this;
      }

      private int prevIndex_ ;
      /**
       * <pre>
       * index of previous output to spend
       * </pre>
       *
       * <code>required uint32 prev_index = 3;</code>
       * @return Whether the prevIndex field is set.
       */
      @java.lang.Override
      public boolean hasPrevIndex() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * index of previous output to spend
       * </pre>
       *
       * <code>required uint32 prev_index = 3;</code>
       * @return The prevIndex.
       */
      @java.lang.Override
      public int getPrevIndex() {
        return prevIndex_;
      }
      /**
       * <pre>
       * index of previous output to spend
       * </pre>
       *
       * <code>required uint32 prev_index = 3;</code>
       * @param value The prevIndex to set.
       * @return This builder for chaining.
       */
      public Builder setPrevIndex(int value) {

        prevIndex_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * index of previous output to spend
       * </pre>
       *
       * <code>required uint32 prev_index = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrevIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        prevIndex_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString scriptSig_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * script signature
       * </pre>
       *
       * <code>required bytes script_sig = 4;</code>
       * @return Whether the scriptSig field is set.
       */
      @java.lang.Override
      public boolean hasScriptSig() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * script signature
       * </pre>
       *
       * <code>required bytes script_sig = 4;</code>
       * @return The scriptSig.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getScriptSig() {
        return scriptSig_;
      }
      /**
       * <pre>
       * script signature
       * </pre>
       *
       * <code>required bytes script_sig = 4;</code>
       * @param value The scriptSig to set.
       * @return This builder for chaining.
       */
      public Builder setScriptSig(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        scriptSig_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * script signature
       * </pre>
       *
       * <code>required bytes script_sig = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearScriptSig() {
        bitField0_ = (bitField0_ & ~0x00000004);
        scriptSig_ = getDefaultInstance().getScriptSig();
        onChanged();
        return this;
      }

      private int sequence_ ;
      /**
       * <pre>
       * sequence
       * </pre>
       *
       * <code>required uint32 sequence = 5;</code>
       * @return Whether the sequence field is set.
       */
      @java.lang.Override
      public boolean hasSequence() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * sequence
       * </pre>
       *
       * <code>required uint32 sequence = 5;</code>
       * @return The sequence.
       */
      @java.lang.Override
      public int getSequence() {
        return sequence_;
      }
      /**
       * <pre>
       * sequence
       * </pre>
       *
       * <code>required uint32 sequence = 5;</code>
       * @param value The sequence to set.
       * @return This builder for chaining.
       */
      public Builder setSequence(int value) {

        sequence_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * sequence
       * </pre>
       *
       * <code>required uint32 sequence = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearSequence() {
        bitField0_ = (bitField0_ & ~0x00000008);
        sequence_ = 0;
        onChanged();
        return this;
      }

      private int decredTree_ ;
      /**
       * <pre>
       * only for Decred
       * </pre>
       *
       * <code>optional uint32 decred_tree = 9;</code>
       * @return Whether the decredTree field is set.
       */
      @java.lang.Override
      public boolean hasDecredTree() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * only for Decred
       * </pre>
       *
       * <code>optional uint32 decred_tree = 9;</code>
       * @return The decredTree.
       */
      @java.lang.Override
      public int getDecredTree() {
        return decredTree_;
      }
      /**
       * <pre>
       * only for Decred
       * </pre>
       *
       * <code>optional uint32 decred_tree = 9;</code>
       * @param value The decredTree to set.
       * @return This builder for chaining.
       */
      public Builder setDecredTree(int value) {

        decredTree_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * only for Decred
       * </pre>
       *
       * <code>optional uint32 decred_tree = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearDecredTree() {
        bitField0_ = (bitField0_ & ~0x00000010);
        decredTree_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.PrevInput)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.PrevInput)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PrevInput>
        PARSER = new com.google.protobuf.AbstractParser<PrevInput>() {
      @java.lang.Override
      public PrevInput parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<PrevInput> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PrevInput> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PrevOutputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.PrevOutput)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * amount sent to this output
     * </pre>
     *
     * <code>required uint64 amount = 1;</code>
     * @return Whether the amount field is set.
     */
    boolean hasAmount();
    /**
     * <pre>
     * amount sent to this output
     * </pre>
     *
     * <code>required uint64 amount = 1;</code>
     * @return The amount.
     */
    long getAmount();

    /**
     * <pre>
     * scriptPubkey of this output
     * </pre>
     *
     * <code>required bytes script_pubkey = 2;</code>
     * @return Whether the scriptPubkey field is set.
     */
    boolean hasScriptPubkey();
    /**
     * <pre>
     * scriptPubkey of this output
     * </pre>
     *
     * <code>required bytes script_pubkey = 2;</code>
     * @return The scriptPubkey.
     */
    com.google.protobuf.ByteString getScriptPubkey();

    /**
     * <pre>
     * only for Decred
     * </pre>
     *
     * <code>optional uint32 decred_script_version = 3;</code>
     * @return Whether the decredScriptVersion field is set.
     */
    boolean hasDecredScriptVersion();
    /**
     * <pre>
     * only for Decred
     * </pre>
     *
     * <code>optional uint32 decred_script_version = 3;</code>
     * @return The decredScriptVersion.
     */
    int getDecredScriptVersion();
  }
  /**
   * <pre>
   * * Data type for outputs of previous transactions.
   * &#64;embed
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.PrevOutput}
   */
  public static final class PrevOutput extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.PrevOutput)
      PrevOutputOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        PrevOutput.class.getName());
    }
    // Use PrevOutput.newBuilder() to construct.
    private PrevOutput(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private PrevOutput() {
      scriptPubkey_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PrevOutput_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PrevOutput_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput.Builder.class);
    }

    private int bitField0_;
    public static final int AMOUNT_FIELD_NUMBER = 1;
    private long amount_ = 0L;
    /**
     * <pre>
     * amount sent to this output
     * </pre>
     *
     * <code>required uint64 amount = 1;</code>
     * @return Whether the amount field is set.
     */
    @java.lang.Override
    public boolean hasAmount() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * amount sent to this output
     * </pre>
     *
     * <code>required uint64 amount = 1;</code>
     * @return The amount.
     */
    @java.lang.Override
    public long getAmount() {
      return amount_;
    }

    public static final int SCRIPT_PUBKEY_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString scriptPubkey_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * scriptPubkey of this output
     * </pre>
     *
     * <code>required bytes script_pubkey = 2;</code>
     * @return Whether the scriptPubkey field is set.
     */
    @java.lang.Override
    public boolean hasScriptPubkey() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * scriptPubkey of this output
     * </pre>
     *
     * <code>required bytes script_pubkey = 2;</code>
     * @return The scriptPubkey.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getScriptPubkey() {
      return scriptPubkey_;
    }

    public static final int DECRED_SCRIPT_VERSION_FIELD_NUMBER = 3;
    private int decredScriptVersion_ = 0;
    /**
     * <pre>
     * only for Decred
     * </pre>
     *
     * <code>optional uint32 decred_script_version = 3;</code>
     * @return Whether the decredScriptVersion field is set.
     */
    @java.lang.Override
    public boolean hasDecredScriptVersion() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * only for Decred
     * </pre>
     *
     * <code>optional uint32 decred_script_version = 3;</code>
     * @return The decredScriptVersion.
     */
    @java.lang.Override
    public int getDecredScriptVersion() {
      return decredScriptVersion_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasAmount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasScriptPubkey()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt64(1, amount_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBytes(2, scriptPubkey_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeUInt32(3, decredScriptVersion_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, amount_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, scriptPubkey_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, decredScriptVersion_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput) obj;

      if (hasAmount() != other.hasAmount()) return false;
      if (hasAmount()) {
        if (getAmount()
            != other.getAmount()) return false;
      }
      if (hasScriptPubkey() != other.hasScriptPubkey()) return false;
      if (hasScriptPubkey()) {
        if (!getScriptPubkey()
            .equals(other.getScriptPubkey())) return false;
      }
      if (hasDecredScriptVersion() != other.hasDecredScriptVersion()) return false;
      if (hasDecredScriptVersion()) {
        if (getDecredScriptVersion()
            != other.getDecredScriptVersion()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasAmount()) {
        hash = (37 * hash) + AMOUNT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getAmount());
      }
      if (hasScriptPubkey()) {
        hash = (37 * hash) + SCRIPT_PUBKEY_FIELD_NUMBER;
        hash = (53 * hash) + getScriptPubkey().hashCode();
      }
      if (hasDecredScriptVersion()) {
        hash = (37 * hash) + DECRED_SCRIPT_VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getDecredScriptVersion();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * * Data type for outputs of previous transactions.
     * &#64;embed
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.PrevOutput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.PrevOutput)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutputOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PrevOutput_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PrevOutput_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        amount_ = 0L;
        scriptPubkey_ = com.google.protobuf.ByteString.EMPTY;
        decredScriptVersion_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_PrevOutput_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.amount_ = amount_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.scriptPubkey_ = scriptPubkey_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.decredScriptVersion_ = decredScriptVersion_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput.getDefaultInstance()) return this;
        if (other.hasAmount()) {
          setAmount(other.getAmount());
        }
        if (other.hasScriptPubkey()) {
          setScriptPubkey(other.getScriptPubkey());
        }
        if (other.hasDecredScriptVersion()) {
          setDecredScriptVersion(other.getDecredScriptVersion());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasAmount()) {
          return false;
        }
        if (!hasScriptPubkey()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                amount_ = input.readUInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                scriptPubkey_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                decredScriptVersion_ = input.readUInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long amount_ ;
      /**
       * <pre>
       * amount sent to this output
       * </pre>
       *
       * <code>required uint64 amount = 1;</code>
       * @return Whether the amount field is set.
       */
      @java.lang.Override
      public boolean hasAmount() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * amount sent to this output
       * </pre>
       *
       * <code>required uint64 amount = 1;</code>
       * @return The amount.
       */
      @java.lang.Override
      public long getAmount() {
        return amount_;
      }
      /**
       * <pre>
       * amount sent to this output
       * </pre>
       *
       * <code>required uint64 amount = 1;</code>
       * @param value The amount to set.
       * @return This builder for chaining.
       */
      public Builder setAmount(long value) {

        amount_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * amount sent to this output
       * </pre>
       *
       * <code>required uint64 amount = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAmount() {
        bitField0_ = (bitField0_ & ~0x00000001);
        amount_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString scriptPubkey_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * scriptPubkey of this output
       * </pre>
       *
       * <code>required bytes script_pubkey = 2;</code>
       * @return Whether the scriptPubkey field is set.
       */
      @java.lang.Override
      public boolean hasScriptPubkey() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * scriptPubkey of this output
       * </pre>
       *
       * <code>required bytes script_pubkey = 2;</code>
       * @return The scriptPubkey.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getScriptPubkey() {
        return scriptPubkey_;
      }
      /**
       * <pre>
       * scriptPubkey of this output
       * </pre>
       *
       * <code>required bytes script_pubkey = 2;</code>
       * @param value The scriptPubkey to set.
       * @return This builder for chaining.
       */
      public Builder setScriptPubkey(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        scriptPubkey_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * scriptPubkey of this output
       * </pre>
       *
       * <code>required bytes script_pubkey = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearScriptPubkey() {
        bitField0_ = (bitField0_ & ~0x00000002);
        scriptPubkey_ = getDefaultInstance().getScriptPubkey();
        onChanged();
        return this;
      }

      private int decredScriptVersion_ ;
      /**
       * <pre>
       * only for Decred
       * </pre>
       *
       * <code>optional uint32 decred_script_version = 3;</code>
       * @return Whether the decredScriptVersion field is set.
       */
      @java.lang.Override
      public boolean hasDecredScriptVersion() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * only for Decred
       * </pre>
       *
       * <code>optional uint32 decred_script_version = 3;</code>
       * @return The decredScriptVersion.
       */
      @java.lang.Override
      public int getDecredScriptVersion() {
        return decredScriptVersion_;
      }
      /**
       * <pre>
       * only for Decred
       * </pre>
       *
       * <code>optional uint32 decred_script_version = 3;</code>
       * @param value The decredScriptVersion to set.
       * @return This builder for chaining.
       */
      public Builder setDecredScriptVersion(int value) {

        decredScriptVersion_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * only for Decred
       * </pre>
       *
       * <code>optional uint32 decred_script_version = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearDecredScriptVersion() {
        bitField0_ = (bitField0_ & ~0x00000004);
        decredScriptVersion_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.PrevOutput)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.PrevOutput)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PrevOutput>
        PARSER = new com.google.protobuf.AbstractParser<PrevOutput>() {
      @java.lang.Override
      public PrevOutput parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<PrevOutput> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PrevOutput> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TxAckPaymentRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAckPaymentRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * the nonce used in the signature computation
     * </pre>
     *
     * <code>optional bytes nonce = 1;</code>
     * @return Whether the nonce field is set.
     */
    boolean hasNonce();
    /**
     * <pre>
     * the nonce used in the signature computation
     * </pre>
     *
     * <code>optional bytes nonce = 1;</code>
     * @return The nonce.
     */
    com.google.protobuf.ByteString getNonce();

    /**
     * <pre>
     * merchant's name
     * </pre>
     *
     * <code>required string recipient_name = 2;</code>
     * @return Whether the recipientName field is set.
     */
    boolean hasRecipientName();
    /**
     * <pre>
     * merchant's name
     * </pre>
     *
     * <code>required string recipient_name = 2;</code>
     * @return The recipientName.
     */
    java.lang.String getRecipientName();
    /**
     * <pre>
     * merchant's name
     * </pre>
     *
     * <code>required string recipient_name = 2;</code>
     * @return The bytes for recipientName.
     */
    com.google.protobuf.ByteString
        getRecipientNameBytes();

    /**
     * <pre>
     * any memos that were signed as part of the request
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
     */
    java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo> 
        getMemosList();
    /**
     * <pre>
     * any memos that were signed as part of the request
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo getMemos(int index);
    /**
     * <pre>
     * any memos that were signed as part of the request
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
     */
    int getMemosCount();
    /**
     * <pre>
     * any memos that were signed as part of the request
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
     */
    java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemoOrBuilder> 
        getMemosOrBuilderList();
    /**
     * <pre>
     * any memos that were signed as part of the request
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemoOrBuilder getMemosOrBuilder(
        int index);

    /**
     * <pre>
     * the sum of the external output amounts requested, required for non-CoinJoin
     * </pre>
     *
     * <code>optional uint64 amount = 4;</code>
     * @return Whether the amount field is set.
     */
    boolean hasAmount();
    /**
     * <pre>
     * the sum of the external output amounts requested, required for non-CoinJoin
     * </pre>
     *
     * <code>optional uint64 amount = 4;</code>
     * @return The amount.
     */
    long getAmount();

    /**
     * <pre>
     * the trusted party's signature of the paymentRequestDigest
     * </pre>
     *
     * <code>required bytes signature = 5;</code>
     * @return Whether the signature field is set.
     */
    boolean hasSignature();
    /**
     * <pre>
     * the trusted party's signature of the paymentRequestDigest
     * </pre>
     *
     * <code>required bytes signature = 5;</code>
     * @return The signature.
     */
    com.google.protobuf.ByteString getSignature();
  }
  /**
   * <pre>
   * * Data type of a payment request for a set of outputs.
   * &#64;next TxRequest
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPaymentRequest}
   */
  public static final class TxAckPaymentRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAckPaymentRequest)
      TxAckPaymentRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        TxAckPaymentRequest.class.getName());
    }
    // Use TxAckPaymentRequest.newBuilder() to construct.
    private TxAckPaymentRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TxAckPaymentRequest() {
      nonce_ = com.google.protobuf.ByteString.EMPTY;
      recipientName_ = "";
      memos_ = java.util.Collections.emptyList();
      signature_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.Builder.class);
    }

    public interface PaymentRequestMemoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo text_memo = 1;</code>
       * @return Whether the textMemo field is set.
       */
      boolean hasTextMemo();
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo text_memo = 1;</code>
       * @return The textMemo.
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo getTextMemo();
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo text_memo = 1;</code>
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemoOrBuilder getTextMemoOrBuilder();

      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo refund_memo = 2;</code>
       * @return Whether the refundMemo field is set.
       */
      boolean hasRefundMemo();
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo refund_memo = 2;</code>
       * @return The refundMemo.
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo getRefundMemo();
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo refund_memo = 2;</code>
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemoOrBuilder getRefundMemoOrBuilder();

      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo coin_purchase_memo = 3;</code>
       * @return Whether the coinPurchaseMemo field is set.
       */
      boolean hasCoinPurchaseMemo();
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo coin_purchase_memo = 3;</code>
       * @return The coinPurchaseMemo.
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo getCoinPurchaseMemo();
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo coin_purchase_memo = 3;</code>
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemoOrBuilder getCoinPurchaseMemoOrBuilder();
    }
    /**
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo}
     */
    public static final class PaymentRequestMemo extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo)
        PaymentRequestMemoOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          PaymentRequestMemo.class.getName());
      }
      // Use PaymentRequestMemo.newBuilder() to construct.
      private PaymentRequestMemo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private PaymentRequestMemo() {
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_PaymentRequestMemo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_PaymentRequestMemo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.Builder.class);
      }

      private int bitField0_;
      public static final int TEXT_MEMO_FIELD_NUMBER = 1;
      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo textMemo_;
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo text_memo = 1;</code>
       * @return Whether the textMemo field is set.
       */
      @java.lang.Override
      public boolean hasTextMemo() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo text_memo = 1;</code>
       * @return The textMemo.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo getTextMemo() {
        return textMemo_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo.getDefaultInstance() : textMemo_;
      }
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo text_memo = 1;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemoOrBuilder getTextMemoOrBuilder() {
        return textMemo_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo.getDefaultInstance() : textMemo_;
      }

      public static final int REFUND_MEMO_FIELD_NUMBER = 2;
      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo refundMemo_;
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo refund_memo = 2;</code>
       * @return Whether the refundMemo field is set.
       */
      @java.lang.Override
      public boolean hasRefundMemo() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo refund_memo = 2;</code>
       * @return The refundMemo.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo getRefundMemo() {
        return refundMemo_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo.getDefaultInstance() : refundMemo_;
      }
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo refund_memo = 2;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemoOrBuilder getRefundMemoOrBuilder() {
        return refundMemo_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo.getDefaultInstance() : refundMemo_;
      }

      public static final int COIN_PURCHASE_MEMO_FIELD_NUMBER = 3;
      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo coinPurchaseMemo_;
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo coin_purchase_memo = 3;</code>
       * @return Whether the coinPurchaseMemo field is set.
       */
      @java.lang.Override
      public boolean hasCoinPurchaseMemo() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo coin_purchase_memo = 3;</code>
       * @return The coinPurchaseMemo.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo getCoinPurchaseMemo() {
        return coinPurchaseMemo_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo.getDefaultInstance() : coinPurchaseMemo_;
      }
      /**
       * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo coin_purchase_memo = 3;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemoOrBuilder getCoinPurchaseMemoOrBuilder() {
        return coinPurchaseMemo_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo.getDefaultInstance() : coinPurchaseMemo_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (hasTextMemo()) {
          if (!getTextMemo().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasRefundMemo()) {
          if (!getRefundMemo().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasCoinPurchaseMemo()) {
          if (!getCoinPurchaseMemo().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeMessage(1, getTextMemo());
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeMessage(2, getRefundMemo());
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeMessage(3, getCoinPurchaseMemo());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getTextMemo());
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getRefundMemo());
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getCoinPurchaseMemo());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo) obj;

        if (hasTextMemo() != other.hasTextMemo()) return false;
        if (hasTextMemo()) {
          if (!getTextMemo()
              .equals(other.getTextMemo())) return false;
        }
        if (hasRefundMemo() != other.hasRefundMemo()) return false;
        if (hasRefundMemo()) {
          if (!getRefundMemo()
              .equals(other.getRefundMemo())) return false;
        }
        if (hasCoinPurchaseMemo() != other.hasCoinPurchaseMemo()) return false;
        if (hasCoinPurchaseMemo()) {
          if (!getCoinPurchaseMemo()
              .equals(other.getCoinPurchaseMemo())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTextMemo()) {
          hash = (37 * hash) + TEXT_MEMO_FIELD_NUMBER;
          hash = (53 * hash) + getTextMemo().hashCode();
        }
        if (hasRefundMemo()) {
          hash = (37 * hash) + REFUND_MEMO_FIELD_NUMBER;
          hash = (53 * hash) + getRefundMemo().hashCode();
        }
        if (hasCoinPurchaseMemo()) {
          hash = (37 * hash) + COIN_PURCHASE_MEMO_FIELD_NUMBER;
          hash = (53 * hash) + getCoinPurchaseMemo().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo)
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_PaymentRequestMemo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_PaymentRequestMemo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage
                  .alwaysUseFieldBuilders) {
            getTextMemoFieldBuilder();
            getRefundMemoFieldBuilder();
            getCoinPurchaseMemoFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          textMemo_ = null;
          if (textMemoBuilder_ != null) {
            textMemoBuilder_.dispose();
            textMemoBuilder_ = null;
          }
          refundMemo_ = null;
          if (refundMemoBuilder_ != null) {
            refundMemoBuilder_.dispose();
            refundMemoBuilder_ = null;
          }
          coinPurchaseMemo_ = null;
          if (coinPurchaseMemoBuilder_ != null) {
            coinPurchaseMemoBuilder_.dispose();
            coinPurchaseMemoBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_PaymentRequestMemo_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo getDefaultInstanceForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo build() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo buildPartial() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.textMemo_ = textMemoBuilder_ == null
                ? textMemo_
                : textMemoBuilder_.build();
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.refundMemo_ = refundMemoBuilder_ == null
                ? refundMemo_
                : refundMemoBuilder_.build();
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.coinPurchaseMemo_ = coinPurchaseMemoBuilder_ == null
                ? coinPurchaseMemo_
                : coinPurchaseMemoBuilder_.build();
            to_bitField0_ |= 0x00000004;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo) {
            return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo other) {
          if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.getDefaultInstance()) return this;
          if (other.hasTextMemo()) {
            mergeTextMemo(other.getTextMemo());
          }
          if (other.hasRefundMemo()) {
            mergeRefundMemo(other.getRefundMemo());
          }
          if (other.hasCoinPurchaseMemo()) {
            mergeCoinPurchaseMemo(other.getCoinPurchaseMemo());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          if (hasTextMemo()) {
            if (!getTextMemo().isInitialized()) {
              return false;
            }
          }
          if (hasRefundMemo()) {
            if (!getRefundMemo().isInitialized()) {
              return false;
            }
          }
          if (hasCoinPurchaseMemo()) {
            if (!getCoinPurchaseMemo().isInitialized()) {
              return false;
            }
          }
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getTextMemoFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                case 18: {
                  input.readMessage(
                      getRefundMemoFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                case 26: {
                  input.readMessage(
                      getCoinPurchaseMemoFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000004;
                  break;
                } // case 26
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo textMemo_;
        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemoOrBuilder> textMemoBuilder_;
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo text_memo = 1;</code>
         * @return Whether the textMemo field is set.
         */
        public boolean hasTextMemo() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo text_memo = 1;</code>
         * @return The textMemo.
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo getTextMemo() {
          if (textMemoBuilder_ == null) {
            return textMemo_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo.getDefaultInstance() : textMemo_;
          } else {
            return textMemoBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo text_memo = 1;</code>
         */
        public Builder setTextMemo(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo value) {
          if (textMemoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            textMemo_ = value;
          } else {
            textMemoBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo text_memo = 1;</code>
         */
        public Builder setTextMemo(
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo.Builder builderForValue) {
          if (textMemoBuilder_ == null) {
            textMemo_ = builderForValue.build();
          } else {
            textMemoBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo text_memo = 1;</code>
         */
        public Builder mergeTextMemo(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo value) {
          if (textMemoBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0) &&
              textMemo_ != null &&
              textMemo_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo.getDefaultInstance()) {
              getTextMemoBuilder().mergeFrom(value);
            } else {
              textMemo_ = value;
            }
          } else {
            textMemoBuilder_.mergeFrom(value);
          }
          if (textMemo_ != null) {
            bitField0_ |= 0x00000001;
            onChanged();
          }
          return this;
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo text_memo = 1;</code>
         */
        public Builder clearTextMemo() {
          bitField0_ = (bitField0_ & ~0x00000001);
          textMemo_ = null;
          if (textMemoBuilder_ != null) {
            textMemoBuilder_.dispose();
            textMemoBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo text_memo = 1;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo.Builder getTextMemoBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getTextMemoFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo text_memo = 1;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemoOrBuilder getTextMemoOrBuilder() {
          if (textMemoBuilder_ != null) {
            return textMemoBuilder_.getMessageOrBuilder();
          } else {
            return textMemo_ == null ?
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo.getDefaultInstance() : textMemo_;
          }
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo text_memo = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemoOrBuilder> 
            getTextMemoFieldBuilder() {
          if (textMemoBuilder_ == null) {
            textMemoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemoOrBuilder>(
                    getTextMemo(),
                    getParentForChildren(),
                    isClean());
            textMemo_ = null;
          }
          return textMemoBuilder_;
        }

        private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo refundMemo_;
        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemoOrBuilder> refundMemoBuilder_;
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo refund_memo = 2;</code>
         * @return Whether the refundMemo field is set.
         */
        public boolean hasRefundMemo() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo refund_memo = 2;</code>
         * @return The refundMemo.
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo getRefundMemo() {
          if (refundMemoBuilder_ == null) {
            return refundMemo_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo.getDefaultInstance() : refundMemo_;
          } else {
            return refundMemoBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo refund_memo = 2;</code>
         */
        public Builder setRefundMemo(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo value) {
          if (refundMemoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            refundMemo_ = value;
          } else {
            refundMemoBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo refund_memo = 2;</code>
         */
        public Builder setRefundMemo(
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo.Builder builderForValue) {
          if (refundMemoBuilder_ == null) {
            refundMemo_ = builderForValue.build();
          } else {
            refundMemoBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo refund_memo = 2;</code>
         */
        public Builder mergeRefundMemo(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo value) {
          if (refundMemoBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0) &&
              refundMemo_ != null &&
              refundMemo_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo.getDefaultInstance()) {
              getRefundMemoBuilder().mergeFrom(value);
            } else {
              refundMemo_ = value;
            }
          } else {
            refundMemoBuilder_.mergeFrom(value);
          }
          if (refundMemo_ != null) {
            bitField0_ |= 0x00000002;
            onChanged();
          }
          return this;
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo refund_memo = 2;</code>
         */
        public Builder clearRefundMemo() {
          bitField0_ = (bitField0_ & ~0x00000002);
          refundMemo_ = null;
          if (refundMemoBuilder_ != null) {
            refundMemoBuilder_.dispose();
            refundMemoBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo refund_memo = 2;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo.Builder getRefundMemoBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getRefundMemoFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo refund_memo = 2;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemoOrBuilder getRefundMemoOrBuilder() {
          if (refundMemoBuilder_ != null) {
            return refundMemoBuilder_.getMessageOrBuilder();
          } else {
            return refundMemo_ == null ?
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo.getDefaultInstance() : refundMemo_;
          }
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo refund_memo = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemoOrBuilder> 
            getRefundMemoFieldBuilder() {
          if (refundMemoBuilder_ == null) {
            refundMemoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemoOrBuilder>(
                    getRefundMemo(),
                    getParentForChildren(),
                    isClean());
            refundMemo_ = null;
          }
          return refundMemoBuilder_;
        }

        private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo coinPurchaseMemo_;
        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemoOrBuilder> coinPurchaseMemoBuilder_;
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo coin_purchase_memo = 3;</code>
         * @return Whether the coinPurchaseMemo field is set.
         */
        public boolean hasCoinPurchaseMemo() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo coin_purchase_memo = 3;</code>
         * @return The coinPurchaseMemo.
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo getCoinPurchaseMemo() {
          if (coinPurchaseMemoBuilder_ == null) {
            return coinPurchaseMemo_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo.getDefaultInstance() : coinPurchaseMemo_;
          } else {
            return coinPurchaseMemoBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo coin_purchase_memo = 3;</code>
         */
        public Builder setCoinPurchaseMemo(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo value) {
          if (coinPurchaseMemoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            coinPurchaseMemo_ = value;
          } else {
            coinPurchaseMemoBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo coin_purchase_memo = 3;</code>
         */
        public Builder setCoinPurchaseMemo(
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo.Builder builderForValue) {
          if (coinPurchaseMemoBuilder_ == null) {
            coinPurchaseMemo_ = builderForValue.build();
          } else {
            coinPurchaseMemoBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo coin_purchase_memo = 3;</code>
         */
        public Builder mergeCoinPurchaseMemo(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo value) {
          if (coinPurchaseMemoBuilder_ == null) {
            if (((bitField0_ & 0x00000004) != 0) &&
              coinPurchaseMemo_ != null &&
              coinPurchaseMemo_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo.getDefaultInstance()) {
              getCoinPurchaseMemoBuilder().mergeFrom(value);
            } else {
              coinPurchaseMemo_ = value;
            }
          } else {
            coinPurchaseMemoBuilder_.mergeFrom(value);
          }
          if (coinPurchaseMemo_ != null) {
            bitField0_ |= 0x00000004;
            onChanged();
          }
          return this;
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo coin_purchase_memo = 3;</code>
         */
        public Builder clearCoinPurchaseMemo() {
          bitField0_ = (bitField0_ & ~0x00000004);
          coinPurchaseMemo_ = null;
          if (coinPurchaseMemoBuilder_ != null) {
            coinPurchaseMemoBuilder_.dispose();
            coinPurchaseMemoBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo coin_purchase_memo = 3;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo.Builder getCoinPurchaseMemoBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getCoinPurchaseMemoFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo coin_purchase_memo = 3;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemoOrBuilder getCoinPurchaseMemoOrBuilder() {
          if (coinPurchaseMemoBuilder_ != null) {
            return coinPurchaseMemoBuilder_.getMessageOrBuilder();
          } else {
            return coinPurchaseMemo_ == null ?
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo.getDefaultInstance() : coinPurchaseMemo_;
          }
        }
        /**
         * <code>optional .hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo coin_purchase_memo = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemoOrBuilder> 
            getCoinPurchaseMemoFieldBuilder() {
          if (coinPurchaseMemoBuilder_ == null) {
            coinPurchaseMemoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemoOrBuilder>(
                    getCoinPurchaseMemo(),
                    getParentForChildren(),
                    isClean());
            coinPurchaseMemo_ = null;
          }
          return coinPurchaseMemoBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo)
      }

      // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo)
      private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo();
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<PaymentRequestMemo>
          PARSER = new com.google.protobuf.AbstractParser<PaymentRequestMemo>() {
        @java.lang.Override
        public PaymentRequestMemo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<PaymentRequestMemo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<PaymentRequestMemo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TextMemoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * plain-text note explaining the purpose of the payment request
       * </pre>
       *
       * <code>required string text = 1;</code>
       * @return Whether the text field is set.
       */
      boolean hasText();
      /**
       * <pre>
       * plain-text note explaining the purpose of the payment request
       * </pre>
       *
       * <code>required string text = 1;</code>
       * @return The text.
       */
      java.lang.String getText();
      /**
       * <pre>
       * plain-text note explaining the purpose of the payment request
       * </pre>
       *
       * <code>required string text = 1;</code>
       * @return The bytes for text.
       */
      com.google.protobuf.ByteString
          getTextBytes();
    }
    /**
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo}
     */
    public static final class TextMemo extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo)
        TextMemoOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          TextMemo.class.getName());
      }
      // Use TextMemo.newBuilder() to construct.
      private TextMemo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private TextMemo() {
        text_ = "";
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_TextMemo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_TextMemo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo.Builder.class);
      }

      private int bitField0_;
      public static final int TEXT_FIELD_NUMBER = 1;
      @SuppressWarnings("serial")
      private volatile java.lang.Object text_ = "";
      /**
       * <pre>
       * plain-text note explaining the purpose of the payment request
       * </pre>
       *
       * <code>required string text = 1;</code>
       * @return Whether the text field is set.
       */
      @java.lang.Override
      public boolean hasText() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * plain-text note explaining the purpose of the payment request
       * </pre>
       *
       * <code>required string text = 1;</code>
       * @return The text.
       */
      @java.lang.Override
      public java.lang.String getText() {
        java.lang.Object ref = text_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            text_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * plain-text note explaining the purpose of the payment request
       * </pre>
       *
       * <code>required string text = 1;</code>
       * @return The bytes for text.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTextBytes() {
        java.lang.Object ref = text_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          text_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasText()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          com.google.protobuf.GeneratedMessage.writeString(output, 1, text_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.GeneratedMessage.computeStringSize(1, text_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo) obj;

        if (hasText() != other.hasText()) return false;
        if (hasText()) {
          if (!getText()
              .equals(other.getText())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasText()) {
          hash = (37 * hash) + TEXT_FIELD_NUMBER;
          hash = (53 * hash) + getText().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo)
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_TextMemo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_TextMemo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          text_ = "";
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_TextMemo_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo getDefaultInstanceForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo build() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo buildPartial() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.text_ = text_;
            to_bitField0_ |= 0x00000001;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo) {
            return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo other) {
          if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo.getDefaultInstance()) return this;
          if (other.hasText()) {
            text_ = other.text_;
            bitField0_ |= 0x00000001;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          if (!hasText()) {
            return false;
          }
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  text_ = input.readBytes();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private java.lang.Object text_ = "";
        /**
         * <pre>
         * plain-text note explaining the purpose of the payment request
         * </pre>
         *
         * <code>required string text = 1;</code>
         * @return Whether the text field is set.
         */
        public boolean hasText() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * plain-text note explaining the purpose of the payment request
         * </pre>
         *
         * <code>required string text = 1;</code>
         * @return The text.
         */
        public java.lang.String getText() {
          java.lang.Object ref = text_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              text_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * plain-text note explaining the purpose of the payment request
         * </pre>
         *
         * <code>required string text = 1;</code>
         * @return The bytes for text.
         */
        public com.google.protobuf.ByteString
            getTextBytes() {
          java.lang.Object ref = text_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            text_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * plain-text note explaining the purpose of the payment request
         * </pre>
         *
         * <code>required string text = 1;</code>
         * @param value The text to set.
         * @return This builder for chaining.
         */
        public Builder setText(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          text_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * plain-text note explaining the purpose of the payment request
         * </pre>
         *
         * <code>required string text = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearText() {
          text_ = getDefaultInstance().getText();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * plain-text note explaining the purpose of the payment request
         * </pre>
         *
         * <code>required string text = 1;</code>
         * @param value The bytes for text to set.
         * @return This builder for chaining.
         */
        public Builder setTextBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          text_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo)
      }

      // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo)
      private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo();
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TextMemo>
          PARSER = new com.google.protobuf.AbstractParser<TextMemo>() {
        @java.lang.Override
        public TextMemo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TextMemo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TextMemo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.TextMemo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface RefundMemoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * the address where the payment should be refunded if necessary
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return Whether the address field is set.
       */
      boolean hasAddress();
      /**
       * <pre>
       * the address where the payment should be refunded if necessary
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return The address.
       */
      java.lang.String getAddress();
      /**
       * <pre>
       * the address where the payment should be refunded if necessary
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return The bytes for address.
       */
      com.google.protobuf.ByteString
          getAddressBytes();

      /**
       * <pre>
       * the MAC returned by GetAddress
       * </pre>
       *
       * <code>required bytes mac = 2;</code>
       * @return Whether the mac field is set.
       */
      boolean hasMac();
      /**
       * <pre>
       * the MAC returned by GetAddress
       * </pre>
       *
       * <code>required bytes mac = 2;</code>
       * @return The mac.
       */
      com.google.protobuf.ByteString getMac();
    }
    /**
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo}
     */
    public static final class RefundMemo extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo)
        RefundMemoOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          RefundMemo.class.getName());
      }
      // Use RefundMemo.newBuilder() to construct.
      private RefundMemo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private RefundMemo() {
        address_ = "";
        mac_ = com.google.protobuf.ByteString.EMPTY;
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_RefundMemo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_RefundMemo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo.Builder.class);
      }

      private int bitField0_;
      public static final int ADDRESS_FIELD_NUMBER = 1;
      @SuppressWarnings("serial")
      private volatile java.lang.Object address_ = "";
      /**
       * <pre>
       * the address where the payment should be refunded if necessary
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return Whether the address field is set.
       */
      @java.lang.Override
      public boolean hasAddress() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * the address where the payment should be refunded if necessary
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return The address.
       */
      @java.lang.Override
      public java.lang.String getAddress() {
        java.lang.Object ref = address_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            address_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * the address where the payment should be refunded if necessary
       * </pre>
       *
       * <code>required string address = 1;</code>
       * @return The bytes for address.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getAddressBytes() {
        java.lang.Object ref = address_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          address_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int MAC_FIELD_NUMBER = 2;
      private com.google.protobuf.ByteString mac_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * the MAC returned by GetAddress
       * </pre>
       *
       * <code>required bytes mac = 2;</code>
       * @return Whether the mac field is set.
       */
      @java.lang.Override
      public boolean hasMac() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * the MAC returned by GetAddress
       * </pre>
       *
       * <code>required bytes mac = 2;</code>
       * @return The mac.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getMac() {
        return mac_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasAddress()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasMac()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          com.google.protobuf.GeneratedMessage.writeString(output, 1, address_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeBytes(2, mac_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.GeneratedMessage.computeStringSize(1, address_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, mac_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo) obj;

        if (hasAddress() != other.hasAddress()) return false;
        if (hasAddress()) {
          if (!getAddress()
              .equals(other.getAddress())) return false;
        }
        if (hasMac() != other.hasMac()) return false;
        if (hasMac()) {
          if (!getMac()
              .equals(other.getMac())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasAddress()) {
          hash = (37 * hash) + ADDRESS_FIELD_NUMBER;
          hash = (53 * hash) + getAddress().hashCode();
        }
        if (hasMac()) {
          hash = (37 * hash) + MAC_FIELD_NUMBER;
          hash = (53 * hash) + getMac().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo)
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_RefundMemo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_RefundMemo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          address_ = "";
          mac_ = com.google.protobuf.ByteString.EMPTY;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_RefundMemo_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo getDefaultInstanceForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo build() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo buildPartial() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.address_ = address_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.mac_ = mac_;
            to_bitField0_ |= 0x00000002;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo) {
            return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo other) {
          if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo.getDefaultInstance()) return this;
          if (other.hasAddress()) {
            address_ = other.address_;
            bitField0_ |= 0x00000001;
            onChanged();
          }
          if (other.hasMac()) {
            setMac(other.getMac());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          if (!hasAddress()) {
            return false;
          }
          if (!hasMac()) {
            return false;
          }
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  address_ = input.readBytes();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                case 18: {
                  mac_ = input.readBytes();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private java.lang.Object address_ = "";
        /**
         * <pre>
         * the address where the payment should be refunded if necessary
         * </pre>
         *
         * <code>required string address = 1;</code>
         * @return Whether the address field is set.
         */
        public boolean hasAddress() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * the address where the payment should be refunded if necessary
         * </pre>
         *
         * <code>required string address = 1;</code>
         * @return The address.
         */
        public java.lang.String getAddress() {
          java.lang.Object ref = address_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              address_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * the address where the payment should be refunded if necessary
         * </pre>
         *
         * <code>required string address = 1;</code>
         * @return The bytes for address.
         */
        public com.google.protobuf.ByteString
            getAddressBytes() {
          java.lang.Object ref = address_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            address_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * the address where the payment should be refunded if necessary
         * </pre>
         *
         * <code>required string address = 1;</code>
         * @param value The address to set.
         * @return This builder for chaining.
         */
        public Builder setAddress(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          address_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the address where the payment should be refunded if necessary
         * </pre>
         *
         * <code>required string address = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearAddress() {
          address_ = getDefaultInstance().getAddress();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the address where the payment should be refunded if necessary
         * </pre>
         *
         * <code>required string address = 1;</code>
         * @param value The bytes for address to set.
         * @return This builder for chaining.
         */
        public Builder setAddressBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          address_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString mac_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * the MAC returned by GetAddress
         * </pre>
         *
         * <code>required bytes mac = 2;</code>
         * @return Whether the mac field is set.
         */
        @java.lang.Override
        public boolean hasMac() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * the MAC returned by GetAddress
         * </pre>
         *
         * <code>required bytes mac = 2;</code>
         * @return The mac.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getMac() {
          return mac_;
        }
        /**
         * <pre>
         * the MAC returned by GetAddress
         * </pre>
         *
         * <code>required bytes mac = 2;</code>
         * @param value The mac to set.
         * @return This builder for chaining.
         */
        public Builder setMac(com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          mac_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the MAC returned by GetAddress
         * </pre>
         *
         * <code>required bytes mac = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearMac() {
          bitField0_ = (bitField0_ & ~0x00000002);
          mac_ = getDefaultInstance().getMac();
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo)
      }

      // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo)
      private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo();
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<RefundMemo>
          PARSER = new com.google.protobuf.AbstractParser<RefundMemo>() {
        @java.lang.Override
        public RefundMemo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<RefundMemo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RefundMemo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.RefundMemo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface CoinPurchaseMemoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * the SLIP-0044 coin type of the address
       * </pre>
       *
       * <code>required uint32 coin_type = 1;</code>
       * @return Whether the coinType field is set.
       */
      boolean hasCoinType();
      /**
       * <pre>
       * the SLIP-0044 coin type of the address
       * </pre>
       *
       * <code>required uint32 coin_type = 1;</code>
       * @return The coinType.
       */
      int getCoinType();

      /**
       * <pre>
       * the amount the address will receive as a human-readable string including units, e.g. "0.025 BTC"
       * </pre>
       *
       * <code>required string amount = 2;</code>
       * @return Whether the amount field is set.
       */
      boolean hasAmount();
      /**
       * <pre>
       * the amount the address will receive as a human-readable string including units, e.g. "0.025 BTC"
       * </pre>
       *
       * <code>required string amount = 2;</code>
       * @return The amount.
       */
      java.lang.String getAmount();
      /**
       * <pre>
       * the amount the address will receive as a human-readable string including units, e.g. "0.025 BTC"
       * </pre>
       *
       * <code>required string amount = 2;</code>
       * @return The bytes for amount.
       */
      com.google.protobuf.ByteString
          getAmountBytes();

      /**
       * <pre>
       * the address where the coin purchase will be delivered
       * </pre>
       *
       * <code>required string address = 3;</code>
       * @return Whether the address field is set.
       */
      boolean hasAddress();
      /**
       * <pre>
       * the address where the coin purchase will be delivered
       * </pre>
       *
       * <code>required string address = 3;</code>
       * @return The address.
       */
      java.lang.String getAddress();
      /**
       * <pre>
       * the address where the coin purchase will be delivered
       * </pre>
       *
       * <code>required string address = 3;</code>
       * @return The bytes for address.
       */
      com.google.protobuf.ByteString
          getAddressBytes();

      /**
       * <pre>
       * the MAC returned by GetAddress
       * </pre>
       *
       * <code>required bytes mac = 4;</code>
       * @return Whether the mac field is set.
       */
      boolean hasMac();
      /**
       * <pre>
       * the MAC returned by GetAddress
       * </pre>
       *
       * <code>required bytes mac = 4;</code>
       * @return The mac.
       */
      com.google.protobuf.ByteString getMac();
    }
    /**
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo}
     */
    public static final class CoinPurchaseMemo extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo)
        CoinPurchaseMemoOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          CoinPurchaseMemo.class.getName());
      }
      // Use CoinPurchaseMemo.newBuilder() to construct.
      private CoinPurchaseMemo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private CoinPurchaseMemo() {
        amount_ = "";
        address_ = "";
        mac_ = com.google.protobuf.ByteString.EMPTY;
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_CoinPurchaseMemo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_CoinPurchaseMemo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo.Builder.class);
      }

      private int bitField0_;
      public static final int COIN_TYPE_FIELD_NUMBER = 1;
      private int coinType_ = 0;
      /**
       * <pre>
       * the SLIP-0044 coin type of the address
       * </pre>
       *
       * <code>required uint32 coin_type = 1;</code>
       * @return Whether the coinType field is set.
       */
      @java.lang.Override
      public boolean hasCoinType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * the SLIP-0044 coin type of the address
       * </pre>
       *
       * <code>required uint32 coin_type = 1;</code>
       * @return The coinType.
       */
      @java.lang.Override
      public int getCoinType() {
        return coinType_;
      }

      public static final int AMOUNT_FIELD_NUMBER = 2;
      @SuppressWarnings("serial")
      private volatile java.lang.Object amount_ = "";
      /**
       * <pre>
       * the amount the address will receive as a human-readable string including units, e.g. "0.025 BTC"
       * </pre>
       *
       * <code>required string amount = 2;</code>
       * @return Whether the amount field is set.
       */
      @java.lang.Override
      public boolean hasAmount() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * the amount the address will receive as a human-readable string including units, e.g. "0.025 BTC"
       * </pre>
       *
       * <code>required string amount = 2;</code>
       * @return The amount.
       */
      @java.lang.Override
      public java.lang.String getAmount() {
        java.lang.Object ref = amount_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            amount_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * the amount the address will receive as a human-readable string including units, e.g. "0.025 BTC"
       * </pre>
       *
       * <code>required string amount = 2;</code>
       * @return The bytes for amount.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getAmountBytes() {
        java.lang.Object ref = amount_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          amount_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int ADDRESS_FIELD_NUMBER = 3;
      @SuppressWarnings("serial")
      private volatile java.lang.Object address_ = "";
      /**
       * <pre>
       * the address where the coin purchase will be delivered
       * </pre>
       *
       * <code>required string address = 3;</code>
       * @return Whether the address field is set.
       */
      @java.lang.Override
      public boolean hasAddress() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * the address where the coin purchase will be delivered
       * </pre>
       *
       * <code>required string address = 3;</code>
       * @return The address.
       */
      @java.lang.Override
      public java.lang.String getAddress() {
        java.lang.Object ref = address_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            address_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * the address where the coin purchase will be delivered
       * </pre>
       *
       * <code>required string address = 3;</code>
       * @return The bytes for address.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getAddressBytes() {
        java.lang.Object ref = address_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          address_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int MAC_FIELD_NUMBER = 4;
      private com.google.protobuf.ByteString mac_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * the MAC returned by GetAddress
       * </pre>
       *
       * <code>required bytes mac = 4;</code>
       * @return Whether the mac field is set.
       */
      @java.lang.Override
      public boolean hasMac() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * the MAC returned by GetAddress
       * </pre>
       *
       * <code>required bytes mac = 4;</code>
       * @return The mac.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getMac() {
        return mac_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasCoinType()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasAmount()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasAddress()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasMac()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt32(1, coinType_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          com.google.protobuf.GeneratedMessage.writeString(output, 2, amount_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          com.google.protobuf.GeneratedMessage.writeString(output, 3, address_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeBytes(4, mac_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, coinType_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.GeneratedMessage.computeStringSize(2, amount_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.GeneratedMessage.computeStringSize(3, address_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(4, mac_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo) obj;

        if (hasCoinType() != other.hasCoinType()) return false;
        if (hasCoinType()) {
          if (getCoinType()
              != other.getCoinType()) return false;
        }
        if (hasAmount() != other.hasAmount()) return false;
        if (hasAmount()) {
          if (!getAmount()
              .equals(other.getAmount())) return false;
        }
        if (hasAddress() != other.hasAddress()) return false;
        if (hasAddress()) {
          if (!getAddress()
              .equals(other.getAddress())) return false;
        }
        if (hasMac() != other.hasMac()) return false;
        if (hasMac()) {
          if (!getMac()
              .equals(other.getMac())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasCoinType()) {
          hash = (37 * hash) + COIN_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getCoinType();
        }
        if (hasAmount()) {
          hash = (37 * hash) + AMOUNT_FIELD_NUMBER;
          hash = (53 * hash) + getAmount().hashCode();
        }
        if (hasAddress()) {
          hash = (37 * hash) + ADDRESS_FIELD_NUMBER;
          hash = (53 * hash) + getAddress().hashCode();
        }
        if (hasMac()) {
          hash = (37 * hash) + MAC_FIELD_NUMBER;
          hash = (53 * hash) + getMac().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo)
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_CoinPurchaseMemo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_CoinPurchaseMemo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          coinType_ = 0;
          amount_ = "";
          address_ = "";
          mac_ = com.google.protobuf.ByteString.EMPTY;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_CoinPurchaseMemo_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo getDefaultInstanceForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo build() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo buildPartial() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.coinType_ = coinType_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.amount_ = amount_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.address_ = address_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.mac_ = mac_;
            to_bitField0_ |= 0x00000008;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo) {
            return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo other) {
          if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo.getDefaultInstance()) return this;
          if (other.hasCoinType()) {
            setCoinType(other.getCoinType());
          }
          if (other.hasAmount()) {
            amount_ = other.amount_;
            bitField0_ |= 0x00000002;
            onChanged();
          }
          if (other.hasAddress()) {
            address_ = other.address_;
            bitField0_ |= 0x00000004;
            onChanged();
          }
          if (other.hasMac()) {
            setMac(other.getMac());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          if (!hasCoinType()) {
            return false;
          }
          if (!hasAmount()) {
            return false;
          }
          if (!hasAddress()) {
            return false;
          }
          if (!hasMac()) {
            return false;
          }
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  coinType_ = input.readUInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 18: {
                  amount_ = input.readBytes();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                case 26: {
                  address_ = input.readBytes();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 26
                case 34: {
                  mac_ = input.readBytes();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 34
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int coinType_ ;
        /**
         * <pre>
         * the SLIP-0044 coin type of the address
         * </pre>
         *
         * <code>required uint32 coin_type = 1;</code>
         * @return Whether the coinType field is set.
         */
        @java.lang.Override
        public boolean hasCoinType() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * the SLIP-0044 coin type of the address
         * </pre>
         *
         * <code>required uint32 coin_type = 1;</code>
         * @return The coinType.
         */
        @java.lang.Override
        public int getCoinType() {
          return coinType_;
        }
        /**
         * <pre>
         * the SLIP-0044 coin type of the address
         * </pre>
         *
         * <code>required uint32 coin_type = 1;</code>
         * @param value The coinType to set.
         * @return This builder for chaining.
         */
        public Builder setCoinType(int value) {

          coinType_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the SLIP-0044 coin type of the address
         * </pre>
         *
         * <code>required uint32 coin_type = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearCoinType() {
          bitField0_ = (bitField0_ & ~0x00000001);
          coinType_ = 0;
          onChanged();
          return this;
        }

        private java.lang.Object amount_ = "";
        /**
         * <pre>
         * the amount the address will receive as a human-readable string including units, e.g. "0.025 BTC"
         * </pre>
         *
         * <code>required string amount = 2;</code>
         * @return Whether the amount field is set.
         */
        public boolean hasAmount() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * the amount the address will receive as a human-readable string including units, e.g. "0.025 BTC"
         * </pre>
         *
         * <code>required string amount = 2;</code>
         * @return The amount.
         */
        public java.lang.String getAmount() {
          java.lang.Object ref = amount_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              amount_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * the amount the address will receive as a human-readable string including units, e.g. "0.025 BTC"
         * </pre>
         *
         * <code>required string amount = 2;</code>
         * @return The bytes for amount.
         */
        public com.google.protobuf.ByteString
            getAmountBytes() {
          java.lang.Object ref = amount_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            amount_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * the amount the address will receive as a human-readable string including units, e.g. "0.025 BTC"
         * </pre>
         *
         * <code>required string amount = 2;</code>
         * @param value The amount to set.
         * @return This builder for chaining.
         */
        public Builder setAmount(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          amount_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the amount the address will receive as a human-readable string including units, e.g. "0.025 BTC"
         * </pre>
         *
         * <code>required string amount = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearAmount() {
          amount_ = getDefaultInstance().getAmount();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the amount the address will receive as a human-readable string including units, e.g. "0.025 BTC"
         * </pre>
         *
         * <code>required string amount = 2;</code>
         * @param value The bytes for amount to set.
         * @return This builder for chaining.
         */
        public Builder setAmountBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          amount_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }

        private java.lang.Object address_ = "";
        /**
         * <pre>
         * the address where the coin purchase will be delivered
         * </pre>
         *
         * <code>required string address = 3;</code>
         * @return Whether the address field is set.
         */
        public boolean hasAddress() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * the address where the coin purchase will be delivered
         * </pre>
         *
         * <code>required string address = 3;</code>
         * @return The address.
         */
        public java.lang.String getAddress() {
          java.lang.Object ref = address_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              address_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * the address where the coin purchase will be delivered
         * </pre>
         *
         * <code>required string address = 3;</code>
         * @return The bytes for address.
         */
        public com.google.protobuf.ByteString
            getAddressBytes() {
          java.lang.Object ref = address_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            address_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * the address where the coin purchase will be delivered
         * </pre>
         *
         * <code>required string address = 3;</code>
         * @param value The address to set.
         * @return This builder for chaining.
         */
        public Builder setAddress(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          address_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the address where the coin purchase will be delivered
         * </pre>
         *
         * <code>required string address = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearAddress() {
          address_ = getDefaultInstance().getAddress();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the address where the coin purchase will be delivered
         * </pre>
         *
         * <code>required string address = 3;</code>
         * @param value The bytes for address to set.
         * @return This builder for chaining.
         */
        public Builder setAddressBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          address_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString mac_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * the MAC returned by GetAddress
         * </pre>
         *
         * <code>required bytes mac = 4;</code>
         * @return Whether the mac field is set.
         */
        @java.lang.Override
        public boolean hasMac() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * the MAC returned by GetAddress
         * </pre>
         *
         * <code>required bytes mac = 4;</code>
         * @return The mac.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getMac() {
          return mac_;
        }
        /**
         * <pre>
         * the MAC returned by GetAddress
         * </pre>
         *
         * <code>required bytes mac = 4;</code>
         * @param value The mac to set.
         * @return This builder for chaining.
         */
        public Builder setMac(com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          mac_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the MAC returned by GetAddress
         * </pre>
         *
         * <code>required bytes mac = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearMac() {
          bitField0_ = (bitField0_ & ~0x00000008);
          mac_ = getDefaultInstance().getMac();
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo)
      }

      // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo)
      private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo();
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<CoinPurchaseMemo>
          PARSER = new com.google.protobuf.AbstractParser<CoinPurchaseMemo>() {
        @java.lang.Override
        public CoinPurchaseMemo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<CoinPurchaseMemo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<CoinPurchaseMemo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.CoinPurchaseMemo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int NONCE_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString nonce_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * the nonce used in the signature computation
     * </pre>
     *
     * <code>optional bytes nonce = 1;</code>
     * @return Whether the nonce field is set.
     */
    @java.lang.Override
    public boolean hasNonce() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * the nonce used in the signature computation
     * </pre>
     *
     * <code>optional bytes nonce = 1;</code>
     * @return The nonce.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getNonce() {
      return nonce_;
    }

    public static final int RECIPIENT_NAME_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object recipientName_ = "";
    /**
     * <pre>
     * merchant's name
     * </pre>
     *
     * <code>required string recipient_name = 2;</code>
     * @return Whether the recipientName field is set.
     */
    @java.lang.Override
    public boolean hasRecipientName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * merchant's name
     * </pre>
     *
     * <code>required string recipient_name = 2;</code>
     * @return The recipientName.
     */
    @java.lang.Override
    public java.lang.String getRecipientName() {
      java.lang.Object ref = recipientName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          recipientName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * merchant's name
     * </pre>
     *
     * <code>required string recipient_name = 2;</code>
     * @return The bytes for recipientName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRecipientNameBytes() {
      java.lang.Object ref = recipientName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        recipientName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MEMOS_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo> memos_;
    /**
     * <pre>
     * any memos that were signed as part of the request
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
     */
    @java.lang.Override
    public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo> getMemosList() {
      return memos_;
    }
    /**
     * <pre>
     * any memos that were signed as part of the request
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemoOrBuilder> 
        getMemosOrBuilderList() {
      return memos_;
    }
    /**
     * <pre>
     * any memos that were signed as part of the request
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
     */
    @java.lang.Override
    public int getMemosCount() {
      return memos_.size();
    }
    /**
     * <pre>
     * any memos that were signed as part of the request
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo getMemos(int index) {
      return memos_.get(index);
    }
    /**
     * <pre>
     * any memos that were signed as part of the request
     * </pre>
     *
     * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemoOrBuilder getMemosOrBuilder(
        int index) {
      return memos_.get(index);
    }

    public static final int AMOUNT_FIELD_NUMBER = 4;
    private long amount_ = 0L;
    /**
     * <pre>
     * the sum of the external output amounts requested, required for non-CoinJoin
     * </pre>
     *
     * <code>optional uint64 amount = 4;</code>
     * @return Whether the amount field is set.
     */
    @java.lang.Override
    public boolean hasAmount() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * the sum of the external output amounts requested, required for non-CoinJoin
     * </pre>
     *
     * <code>optional uint64 amount = 4;</code>
     * @return The amount.
     */
    @java.lang.Override
    public long getAmount() {
      return amount_;
    }

    public static final int SIGNATURE_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * the trusted party's signature of the paymentRequestDigest
     * </pre>
     *
     * <code>required bytes signature = 5;</code>
     * @return Whether the signature field is set.
     */
    @java.lang.Override
    public boolean hasSignature() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * the trusted party's signature of the paymentRequestDigest
     * </pre>
     *
     * <code>required bytes signature = 5;</code>
     * @return The signature.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSignature() {
      return signature_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasRecipientName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSignature()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getMemosCount(); i++) {
        if (!getMemos(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBytes(1, nonce_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, recipientName_);
      }
      for (int i = 0; i < memos_.size(); i++) {
        output.writeMessage(3, memos_.get(i));
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeUInt64(4, amount_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeBytes(5, signature_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, nonce_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, recipientName_);
      }
      for (int i = 0; i < memos_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, memos_.get(i));
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, amount_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, signature_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest) obj;

      if (hasNonce() != other.hasNonce()) return false;
      if (hasNonce()) {
        if (!getNonce()
            .equals(other.getNonce())) return false;
      }
      if (hasRecipientName() != other.hasRecipientName()) return false;
      if (hasRecipientName()) {
        if (!getRecipientName()
            .equals(other.getRecipientName())) return false;
      }
      if (!getMemosList()
          .equals(other.getMemosList())) return false;
      if (hasAmount() != other.hasAmount()) return false;
      if (hasAmount()) {
        if (getAmount()
            != other.getAmount()) return false;
      }
      if (hasSignature() != other.hasSignature()) return false;
      if (hasSignature()) {
        if (!getSignature()
            .equals(other.getSignature())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasNonce()) {
        hash = (37 * hash) + NONCE_FIELD_NUMBER;
        hash = (53 * hash) + getNonce().hashCode();
      }
      if (hasRecipientName()) {
        hash = (37 * hash) + RECIPIENT_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getRecipientName().hashCode();
      }
      if (getMemosCount() > 0) {
        hash = (37 * hash) + MEMOS_FIELD_NUMBER;
        hash = (53 * hash) + getMemosList().hashCode();
      }
      if (hasAmount()) {
        hash = (37 * hash) + AMOUNT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getAmount());
      }
      if (hasSignature()) {
        hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
        hash = (53 * hash) + getSignature().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * * Data type of a payment request for a set of outputs.
     * &#64;next TxRequest
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPaymentRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAckPaymentRequest)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        nonce_ = com.google.protobuf.ByteString.EMPTY;
        recipientName_ = "";
        if (memosBuilder_ == null) {
          memos_ = java.util.Collections.emptyList();
        } else {
          memos_ = null;
          memosBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        amount_ = 0L;
        signature_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest result) {
        if (memosBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            memos_ = java.util.Collections.unmodifiableList(memos_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.memos_ = memos_;
        } else {
          result.memos_ = memosBuilder_.build();
        }
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.nonce_ = nonce_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.recipientName_ = recipientName_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.amount_ = amount_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.signature_ = signature_;
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.getDefaultInstance()) return this;
        if (other.hasNonce()) {
          setNonce(other.getNonce());
        }
        if (other.hasRecipientName()) {
          recipientName_ = other.recipientName_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (memosBuilder_ == null) {
          if (!other.memos_.isEmpty()) {
            if (memos_.isEmpty()) {
              memos_ = other.memos_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureMemosIsMutable();
              memos_.addAll(other.memos_);
            }
            onChanged();
          }
        } else {
          if (!other.memos_.isEmpty()) {
            if (memosBuilder_.isEmpty()) {
              memosBuilder_.dispose();
              memosBuilder_ = null;
              memos_ = other.memos_;
              bitField0_ = (bitField0_ & ~0x00000004);
              memosBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMemosFieldBuilder() : null;
            } else {
              memosBuilder_.addAllMessages(other.memos_);
            }
          }
        }
        if (other.hasAmount()) {
          setAmount(other.getAmount());
        }
        if (other.hasSignature()) {
          setSignature(other.getSignature());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasRecipientName()) {
          return false;
        }
        if (!hasSignature()) {
          return false;
        }
        for (int i = 0; i < getMemosCount(); i++) {
          if (!getMemos(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                nonce_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                recipientName_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo m =
                    input.readMessage(
                        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.parser(),
                        extensionRegistry);
                if (memosBuilder_ == null) {
                  ensureMemosIsMutable();
                  memos_.add(m);
                } else {
                  memosBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 32: {
                amount_ = input.readUInt64();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 42: {
                signature_ = input.readBytes();
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString nonce_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * the nonce used in the signature computation
       * </pre>
       *
       * <code>optional bytes nonce = 1;</code>
       * @return Whether the nonce field is set.
       */
      @java.lang.Override
      public boolean hasNonce() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * the nonce used in the signature computation
       * </pre>
       *
       * <code>optional bytes nonce = 1;</code>
       * @return The nonce.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getNonce() {
        return nonce_;
      }
      /**
       * <pre>
       * the nonce used in the signature computation
       * </pre>
       *
       * <code>optional bytes nonce = 1;</code>
       * @param value The nonce to set.
       * @return This builder for chaining.
       */
      public Builder setNonce(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        nonce_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the nonce used in the signature computation
       * </pre>
       *
       * <code>optional bytes nonce = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearNonce() {
        bitField0_ = (bitField0_ & ~0x00000001);
        nonce_ = getDefaultInstance().getNonce();
        onChanged();
        return this;
      }

      private java.lang.Object recipientName_ = "";
      /**
       * <pre>
       * merchant's name
       * </pre>
       *
       * <code>required string recipient_name = 2;</code>
       * @return Whether the recipientName field is set.
       */
      public boolean hasRecipientName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * merchant's name
       * </pre>
       *
       * <code>required string recipient_name = 2;</code>
       * @return The recipientName.
       */
      public java.lang.String getRecipientName() {
        java.lang.Object ref = recipientName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            recipientName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * merchant's name
       * </pre>
       *
       * <code>required string recipient_name = 2;</code>
       * @return The bytes for recipientName.
       */
      public com.google.protobuf.ByteString
          getRecipientNameBytes() {
        java.lang.Object ref = recipientName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          recipientName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * merchant's name
       * </pre>
       *
       * <code>required string recipient_name = 2;</code>
       * @param value The recipientName to set.
       * @return This builder for chaining.
       */
      public Builder setRecipientName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        recipientName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * merchant's name
       * </pre>
       *
       * <code>required string recipient_name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearRecipientName() {
        recipientName_ = getDefaultInstance().getRecipientName();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * merchant's name
       * </pre>
       *
       * <code>required string recipient_name = 2;</code>
       * @param value The bytes for recipientName to set.
       * @return This builder for chaining.
       */
      public Builder setRecipientNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        recipientName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo> memos_ =
        java.util.Collections.emptyList();
      private void ensureMemosIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          memos_ = new java.util.ArrayList<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo>(memos_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemoOrBuilder> memosBuilder_;

      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo> getMemosList() {
        if (memosBuilder_ == null) {
          return java.util.Collections.unmodifiableList(memos_);
        } else {
          return memosBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public int getMemosCount() {
        if (memosBuilder_ == null) {
          return memos_.size();
        } else {
          return memosBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo getMemos(int index) {
        if (memosBuilder_ == null) {
          return memos_.get(index);
        } else {
          return memosBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public Builder setMemos(
          int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo value) {
        if (memosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMemosIsMutable();
          memos_.set(index, value);
          onChanged();
        } else {
          memosBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public Builder setMemos(
          int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.Builder builderForValue) {
        if (memosBuilder_ == null) {
          ensureMemosIsMutable();
          memos_.set(index, builderForValue.build());
          onChanged();
        } else {
          memosBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public Builder addMemos(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo value) {
        if (memosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMemosIsMutable();
          memos_.add(value);
          onChanged();
        } else {
          memosBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public Builder addMemos(
          int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo value) {
        if (memosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMemosIsMutable();
          memos_.add(index, value);
          onChanged();
        } else {
          memosBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public Builder addMemos(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.Builder builderForValue) {
        if (memosBuilder_ == null) {
          ensureMemosIsMutable();
          memos_.add(builderForValue.build());
          onChanged();
        } else {
          memosBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public Builder addMemos(
          int index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.Builder builderForValue) {
        if (memosBuilder_ == null) {
          ensureMemosIsMutable();
          memos_.add(index, builderForValue.build());
          onChanged();
        } else {
          memosBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public Builder addAllMemos(
          java.lang.Iterable<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo> values) {
        if (memosBuilder_ == null) {
          ensureMemosIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, memos_);
          onChanged();
        } else {
          memosBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public Builder clearMemos() {
        if (memosBuilder_ == null) {
          memos_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          memosBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public Builder removeMemos(int index) {
        if (memosBuilder_ == null) {
          ensureMemosIsMutable();
          memos_.remove(index);
          onChanged();
        } else {
          memosBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.Builder getMemosBuilder(
          int index) {
        return getMemosFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemoOrBuilder getMemosOrBuilder(
          int index) {
        if (memosBuilder_ == null) {
          return memos_.get(index);  } else {
          return memosBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public java.util.List<? extends com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemoOrBuilder> 
           getMemosOrBuilderList() {
        if (memosBuilder_ != null) {
          return memosBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(memos_);
        }
      }
      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.Builder addMemosBuilder() {
        return getMemosFieldBuilder().addBuilder(
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.getDefaultInstance());
      }
      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.Builder addMemosBuilder(
          int index) {
        return getMemosFieldBuilder().addBuilder(
            index, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.getDefaultInstance());
      }
      /**
       * <pre>
       * any memos that were signed as part of the request
       * </pre>
       *
       * <code>repeated .hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo memos = 3;</code>
       */
      public java.util.List<com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.Builder> 
           getMemosBuilderList() {
        return getMemosFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemoOrBuilder> 
          getMemosFieldBuilder() {
        if (memosBuilder_ == null) {
          memosBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemo.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest.PaymentRequestMemoOrBuilder>(
                  memos_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          memos_ = null;
        }
        return memosBuilder_;
      }

      private long amount_ ;
      /**
       * <pre>
       * the sum of the external output amounts requested, required for non-CoinJoin
       * </pre>
       *
       * <code>optional uint64 amount = 4;</code>
       * @return Whether the amount field is set.
       */
      @java.lang.Override
      public boolean hasAmount() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * the sum of the external output amounts requested, required for non-CoinJoin
       * </pre>
       *
       * <code>optional uint64 amount = 4;</code>
       * @return The amount.
       */
      @java.lang.Override
      public long getAmount() {
        return amount_;
      }
      /**
       * <pre>
       * the sum of the external output amounts requested, required for non-CoinJoin
       * </pre>
       *
       * <code>optional uint64 amount = 4;</code>
       * @param value The amount to set.
       * @return This builder for chaining.
       */
      public Builder setAmount(long value) {

        amount_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the sum of the external output amounts requested, required for non-CoinJoin
       * </pre>
       *
       * <code>optional uint64 amount = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearAmount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        amount_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * the trusted party's signature of the paymentRequestDigest
       * </pre>
       *
       * <code>required bytes signature = 5;</code>
       * @return Whether the signature field is set.
       */
      @java.lang.Override
      public boolean hasSignature() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * the trusted party's signature of the paymentRequestDigest
       * </pre>
       *
       * <code>required bytes signature = 5;</code>
       * @return The signature.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSignature() {
        return signature_;
      }
      /**
       * <pre>
       * the trusted party's signature of the paymentRequestDigest
       * </pre>
       *
       * <code>required bytes signature = 5;</code>
       * @param value The signature to set.
       * @return This builder for chaining.
       */
      public Builder setSignature(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        signature_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the trusted party's signature of the paymentRequestDigest
       * </pre>
       *
       * <code>required bytes signature = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearSignature() {
        bitField0_ = (bitField0_ & ~0x00000010);
        signature_ = getDefaultInstance().getSignature();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAckPaymentRequest)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAckPaymentRequest)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TxAckPaymentRequest>
        PARSER = new com.google.protobuf.AbstractParser<TxAckPaymentRequest>() {
      @java.lang.Override
      public TxAckPaymentRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TxAckPaymentRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TxAckPaymentRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPaymentRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TxAckInputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAckInput)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper tx = 1;</code>
     * @return Whether the tx field is set.
     */
    boolean hasTx();
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper tx = 1;</code>
     * @return The tx.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper getTx();
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper tx = 1;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapperOrBuilder getTxOrBuilder();
  }
  /**
   * <pre>
   * *
   * Request: Data about input to be signed.
   * Wire-alias of TxAck.
   *
   * Do not edit this type without considering compatibility with TxAck.
   * Prefer to modify the inner TxInput type.
   *
   * &#64;next TxRequest
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckInput}
   */
  public static final class TxAckInput extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAckInput)
      TxAckInputOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        TxAckInput.class.getName());
    }
    // Use TxAckInput.newBuilder() to construct.
    private TxAckInput(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TxAckInput() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckInput_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckInput_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.Builder.class);
    }

    public interface TxAckInputWrapperOrBuilder extends
        // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required .hw.trezor.messages.bitcoin.TxInput input = 2;</code>
       * @return Whether the input field is set.
       */
      boolean hasInput();
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxInput input = 2;</code>
       * @return The input.
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput getInput();
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxInput input = 2;</code>
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInputOrBuilder getInputOrBuilder();
    }
    /**
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper}
     */
    public static final class TxAckInputWrapper extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper)
        TxAckInputWrapperOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          TxAckInputWrapper.class.getName());
      }
      // Use TxAckInputWrapper.newBuilder() to construct.
      private TxAckInputWrapper(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private TxAckInputWrapper() {
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckInput_TxAckInputWrapper_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckInput_TxAckInputWrapper_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper.Builder.class);
      }

      private int bitField0_;
      public static final int INPUT_FIELD_NUMBER = 2;
      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput input_;
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxInput input = 2;</code>
       * @return Whether the input field is set.
       */
      @java.lang.Override
      public boolean hasInput() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxInput input = 2;</code>
       * @return The input.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput getInput() {
        return input_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput.getDefaultInstance() : input_;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxInput input = 2;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInputOrBuilder getInputOrBuilder() {
        return input_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput.getDefaultInstance() : input_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasInput()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!getInput().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeMessage(2, getInput());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getInput());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper) obj;

        if (hasInput() != other.hasInput()) return false;
        if (hasInput()) {
          if (!getInput()
              .equals(other.getInput())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasInput()) {
          hash = (37 * hash) + INPUT_FIELD_NUMBER;
          hash = (53 * hash) + getInput().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper)
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapperOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckInput_TxAckInputWrapper_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckInput_TxAckInputWrapper_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage
                  .alwaysUseFieldBuilders) {
            getInputFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          input_ = null;
          if (inputBuilder_ != null) {
            inputBuilder_.dispose();
            inputBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckInput_TxAckInputWrapper_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper getDefaultInstanceForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper build() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper buildPartial() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.input_ = inputBuilder_ == null
                ? input_
                : inputBuilder_.build();
            to_bitField0_ |= 0x00000001;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper) {
            return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper other) {
          if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper.getDefaultInstance()) return this;
          if (other.hasInput()) {
            mergeInput(other.getInput());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          if (!hasInput()) {
            return false;
          }
          if (!getInput().isInitialized()) {
            return false;
          }
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 18: {
                  input.readMessage(
                      getInputFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000001;
                  break;
                } // case 18
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput input_;
        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInputOrBuilder> inputBuilder_;
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxInput input = 2;</code>
         * @return Whether the input field is set.
         */
        public boolean hasInput() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxInput input = 2;</code>
         * @return The input.
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput getInput() {
          if (inputBuilder_ == null) {
            return input_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput.getDefaultInstance() : input_;
          } else {
            return inputBuilder_.getMessage();
          }
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxInput input = 2;</code>
         */
        public Builder setInput(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput value) {
          if (inputBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            input_ = value;
          } else {
            inputBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxInput input = 2;</code>
         */
        public Builder setInput(
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput.Builder builderForValue) {
          if (inputBuilder_ == null) {
            input_ = builderForValue.build();
          } else {
            inputBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxInput input = 2;</code>
         */
        public Builder mergeInput(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput value) {
          if (inputBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0) &&
              input_ != null &&
              input_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput.getDefaultInstance()) {
              getInputBuilder().mergeFrom(value);
            } else {
              input_ = value;
            }
          } else {
            inputBuilder_.mergeFrom(value);
          }
          if (input_ != null) {
            bitField0_ |= 0x00000001;
            onChanged();
          }
          return this;
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxInput input = 2;</code>
         */
        public Builder clearInput() {
          bitField0_ = (bitField0_ & ~0x00000001);
          input_ = null;
          if (inputBuilder_ != null) {
            inputBuilder_.dispose();
            inputBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxInput input = 2;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput.Builder getInputBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getInputFieldBuilder().getBuilder();
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxInput input = 2;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInputOrBuilder getInputOrBuilder() {
          if (inputBuilder_ != null) {
            return inputBuilder_.getMessageOrBuilder();
          } else {
            return input_ == null ?
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput.getDefaultInstance() : input_;
          }
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxInput input = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInputOrBuilder> 
            getInputFieldBuilder() {
          if (inputBuilder_ == null) {
            inputBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInput.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxInputOrBuilder>(
                    getInput(),
                    getParentForChildren(),
                    isClean());
            input_ = null;
          }
          return inputBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper)
      }

      // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper)
      private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper();
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TxAckInputWrapper>
          PARSER = new com.google.protobuf.AbstractParser<TxAckInputWrapper>() {
        @java.lang.Override
        public TxAckInputWrapper parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TxAckInputWrapper> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TxAckInputWrapper> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int TX_FIELD_NUMBER = 1;
    private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper tx_;
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper tx = 1;</code>
     * @return Whether the tx field is set.
     */
    @java.lang.Override
    public boolean hasTx() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper tx = 1;</code>
     * @return The tx.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper getTx() {
      return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper.getDefaultInstance() : tx_;
    }
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper tx = 1;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapperOrBuilder getTxOrBuilder() {
      return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper.getDefaultInstance() : tx_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTx()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTx().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getTx());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTx());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput) obj;

      if (hasTx() != other.hasTx()) return false;
      if (hasTx()) {
        if (!getTx()
            .equals(other.getTx())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTx()) {
        hash = (37 * hash) + TX_FIELD_NUMBER;
        hash = (53 * hash) + getTx().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Request: Data about input to be signed.
     * Wire-alias of TxAck.
     *
     * Do not edit this type without considering compatibility with TxAck.
     * Prefer to modify the inner TxInput type.
     *
     * &#64;next TxRequest
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckInput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAckInput)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInputOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckInput_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckInput_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTxFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        tx_ = null;
        if (txBuilder_ != null) {
          txBuilder_.dispose();
          txBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckInput_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.tx_ = txBuilder_ == null
              ? tx_
              : txBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.getDefaultInstance()) return this;
        if (other.hasTx()) {
          mergeTx(other.getTx());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasTx()) {
          return false;
        }
        if (!getTx().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getTxFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper tx_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapperOrBuilder> txBuilder_;
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper tx = 1;</code>
       * @return Whether the tx field is set.
       */
      public boolean hasTx() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper tx = 1;</code>
       * @return The tx.
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper getTx() {
        if (txBuilder_ == null) {
          return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper.getDefaultInstance() : tx_;
        } else {
          return txBuilder_.getMessage();
        }
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper tx = 1;</code>
       */
      public Builder setTx(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper value) {
        if (txBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tx_ = value;
        } else {
          txBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper tx = 1;</code>
       */
      public Builder setTx(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper.Builder builderForValue) {
        if (txBuilder_ == null) {
          tx_ = builderForValue.build();
        } else {
          txBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper tx = 1;</code>
       */
      public Builder mergeTx(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper value) {
        if (txBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            tx_ != null &&
            tx_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper.getDefaultInstance()) {
            getTxBuilder().mergeFrom(value);
          } else {
            tx_ = value;
          }
        } else {
          txBuilder_.mergeFrom(value);
        }
        if (tx_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper tx = 1;</code>
       */
      public Builder clearTx() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tx_ = null;
        if (txBuilder_ != null) {
          txBuilder_.dispose();
          txBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper tx = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper.Builder getTxBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTxFieldBuilder().getBuilder();
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper tx = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapperOrBuilder getTxOrBuilder() {
        if (txBuilder_ != null) {
          return txBuilder_.getMessageOrBuilder();
        } else {
          return tx_ == null ?
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper.getDefaultInstance() : tx_;
        }
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper tx = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapperOrBuilder> 
          getTxFieldBuilder() {
        if (txBuilder_ == null) {
          txBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapper.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput.TxAckInputWrapperOrBuilder>(
                  getTx(),
                  getParentForChildren(),
                  isClean());
          tx_ = null;
        }
        return txBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAckInput)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAckInput)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TxAckInput>
        PARSER = new com.google.protobuf.AbstractParser<TxAckInput>() {
      @java.lang.Override
      public TxAckInput parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TxAckInput> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TxAckInput> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckInput getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TxAckOutputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAckOutput)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper tx = 1;</code>
     * @return Whether the tx field is set.
     */
    boolean hasTx();
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper tx = 1;</code>
     * @return The tx.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper getTx();
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper tx = 1;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapperOrBuilder getTxOrBuilder();
  }
  /**
   * <pre>
   * *
   * Request: Data about output to be signed.
   * Wire-alias of TxAck.
   *
   * Do not edit this type without considering compatibility with TxAck.
   * Prefer to modify the inner TxOutput type.
   *
   * &#64;next TxRequest
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckOutput}
   */
  public static final class TxAckOutput extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAckOutput)
      TxAckOutputOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        TxAckOutput.class.getName());
    }
    // Use TxAckOutput.newBuilder() to construct.
    private TxAckOutput(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TxAckOutput() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckOutput_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckOutput_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.Builder.class);
    }

    public interface TxAckOutputWrapperOrBuilder extends
        // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required .hw.trezor.messages.bitcoin.TxOutput output = 5;</code>
       * @return Whether the output field is set.
       */
      boolean hasOutput();
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxOutput output = 5;</code>
       * @return The output.
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput getOutput();
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxOutput output = 5;</code>
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutputOrBuilder getOutputOrBuilder();
    }
    /**
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper}
     */
    public static final class TxAckOutputWrapper extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper)
        TxAckOutputWrapperOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          TxAckOutputWrapper.class.getName());
      }
      // Use TxAckOutputWrapper.newBuilder() to construct.
      private TxAckOutputWrapper(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private TxAckOutputWrapper() {
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckOutput_TxAckOutputWrapper_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckOutput_TxAckOutputWrapper_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper.Builder.class);
      }

      private int bitField0_;
      public static final int OUTPUT_FIELD_NUMBER = 5;
      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput output_;
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxOutput output = 5;</code>
       * @return Whether the output field is set.
       */
      @java.lang.Override
      public boolean hasOutput() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxOutput output = 5;</code>
       * @return The output.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput getOutput() {
        return output_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput.getDefaultInstance() : output_;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxOutput output = 5;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutputOrBuilder getOutputOrBuilder() {
        return output_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput.getDefaultInstance() : output_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasOutput()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!getOutput().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeMessage(5, getOutput());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, getOutput());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper) obj;

        if (hasOutput() != other.hasOutput()) return false;
        if (hasOutput()) {
          if (!getOutput()
              .equals(other.getOutput())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasOutput()) {
          hash = (37 * hash) + OUTPUT_FIELD_NUMBER;
          hash = (53 * hash) + getOutput().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper)
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapperOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckOutput_TxAckOutputWrapper_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckOutput_TxAckOutputWrapper_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage
                  .alwaysUseFieldBuilders) {
            getOutputFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          output_ = null;
          if (outputBuilder_ != null) {
            outputBuilder_.dispose();
            outputBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckOutput_TxAckOutputWrapper_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper getDefaultInstanceForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper build() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper buildPartial() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.output_ = outputBuilder_ == null
                ? output_
                : outputBuilder_.build();
            to_bitField0_ |= 0x00000001;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper) {
            return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper other) {
          if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper.getDefaultInstance()) return this;
          if (other.hasOutput()) {
            mergeOutput(other.getOutput());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          if (!hasOutput()) {
            return false;
          }
          if (!getOutput().isInitialized()) {
            return false;
          }
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 42: {
                  input.readMessage(
                      getOutputFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000001;
                  break;
                } // case 42
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput output_;
        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutputOrBuilder> outputBuilder_;
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxOutput output = 5;</code>
         * @return Whether the output field is set.
         */
        public boolean hasOutput() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxOutput output = 5;</code>
         * @return The output.
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput getOutput() {
          if (outputBuilder_ == null) {
            return output_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput.getDefaultInstance() : output_;
          } else {
            return outputBuilder_.getMessage();
          }
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxOutput output = 5;</code>
         */
        public Builder setOutput(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput value) {
          if (outputBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            output_ = value;
          } else {
            outputBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxOutput output = 5;</code>
         */
        public Builder setOutput(
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput.Builder builderForValue) {
          if (outputBuilder_ == null) {
            output_ = builderForValue.build();
          } else {
            outputBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxOutput output = 5;</code>
         */
        public Builder mergeOutput(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput value) {
          if (outputBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0) &&
              output_ != null &&
              output_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput.getDefaultInstance()) {
              getOutputBuilder().mergeFrom(value);
            } else {
              output_ = value;
            }
          } else {
            outputBuilder_.mergeFrom(value);
          }
          if (output_ != null) {
            bitField0_ |= 0x00000001;
            onChanged();
          }
          return this;
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxOutput output = 5;</code>
         */
        public Builder clearOutput() {
          bitField0_ = (bitField0_ & ~0x00000001);
          output_ = null;
          if (outputBuilder_ != null) {
            outputBuilder_.dispose();
            outputBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxOutput output = 5;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput.Builder getOutputBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getOutputFieldBuilder().getBuilder();
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxOutput output = 5;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutputOrBuilder getOutputOrBuilder() {
          if (outputBuilder_ != null) {
            return outputBuilder_.getMessageOrBuilder();
          } else {
            return output_ == null ?
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput.getDefaultInstance() : output_;
          }
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.TxOutput output = 5;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutputOrBuilder> 
            getOutputFieldBuilder() {
          if (outputBuilder_ == null) {
            outputBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutput.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxOutputOrBuilder>(
                    getOutput(),
                    getParentForChildren(),
                    isClean());
            output_ = null;
          }
          return outputBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper)
      }

      // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper)
      private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper();
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TxAckOutputWrapper>
          PARSER = new com.google.protobuf.AbstractParser<TxAckOutputWrapper>() {
        @java.lang.Override
        public TxAckOutputWrapper parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TxAckOutputWrapper> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TxAckOutputWrapper> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int TX_FIELD_NUMBER = 1;
    private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper tx_;
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper tx = 1;</code>
     * @return Whether the tx field is set.
     */
    @java.lang.Override
    public boolean hasTx() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper tx = 1;</code>
     * @return The tx.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper getTx() {
      return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper.getDefaultInstance() : tx_;
    }
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper tx = 1;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapperOrBuilder getTxOrBuilder() {
      return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper.getDefaultInstance() : tx_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTx()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTx().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getTx());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTx());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput) obj;

      if (hasTx() != other.hasTx()) return false;
      if (hasTx()) {
        if (!getTx()
            .equals(other.getTx())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTx()) {
        hash = (37 * hash) + TX_FIELD_NUMBER;
        hash = (53 * hash) + getTx().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Request: Data about output to be signed.
     * Wire-alias of TxAck.
     *
     * Do not edit this type without considering compatibility with TxAck.
     * Prefer to modify the inner TxOutput type.
     *
     * &#64;next TxRequest
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckOutput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAckOutput)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutputOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckOutput_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckOutput_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTxFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        tx_ = null;
        if (txBuilder_ != null) {
          txBuilder_.dispose();
          txBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckOutput_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.tx_ = txBuilder_ == null
              ? tx_
              : txBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.getDefaultInstance()) return this;
        if (other.hasTx()) {
          mergeTx(other.getTx());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasTx()) {
          return false;
        }
        if (!getTx().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getTxFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper tx_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapperOrBuilder> txBuilder_;
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper tx = 1;</code>
       * @return Whether the tx field is set.
       */
      public boolean hasTx() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper tx = 1;</code>
       * @return The tx.
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper getTx() {
        if (txBuilder_ == null) {
          return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper.getDefaultInstance() : tx_;
        } else {
          return txBuilder_.getMessage();
        }
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper tx = 1;</code>
       */
      public Builder setTx(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper value) {
        if (txBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tx_ = value;
        } else {
          txBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper tx = 1;</code>
       */
      public Builder setTx(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper.Builder builderForValue) {
        if (txBuilder_ == null) {
          tx_ = builderForValue.build();
        } else {
          txBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper tx = 1;</code>
       */
      public Builder mergeTx(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper value) {
        if (txBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            tx_ != null &&
            tx_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper.getDefaultInstance()) {
            getTxBuilder().mergeFrom(value);
          } else {
            tx_ = value;
          }
        } else {
          txBuilder_.mergeFrom(value);
        }
        if (tx_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper tx = 1;</code>
       */
      public Builder clearTx() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tx_ = null;
        if (txBuilder_ != null) {
          txBuilder_.dispose();
          txBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper tx = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper.Builder getTxBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTxFieldBuilder().getBuilder();
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper tx = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapperOrBuilder getTxOrBuilder() {
        if (txBuilder_ != null) {
          return txBuilder_.getMessageOrBuilder();
        } else {
          return tx_ == null ?
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper.getDefaultInstance() : tx_;
        }
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper tx = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapperOrBuilder> 
          getTxFieldBuilder() {
        if (txBuilder_ == null) {
          txBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapper.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput.TxAckOutputWrapperOrBuilder>(
                  getTx(),
                  getParentForChildren(),
                  isClean());
          tx_ = null;
        }
        return txBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAckOutput)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAckOutput)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TxAckOutput>
        PARSER = new com.google.protobuf.AbstractParser<TxAckOutput>() {
      @java.lang.Override
      public TxAckOutput parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TxAckOutput> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TxAckOutput> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckOutput getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TxAckPrevMetaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAckPrevMeta)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .hw.trezor.messages.bitcoin.PrevTx tx = 1;</code>
     * @return Whether the tx field is set.
     */
    boolean hasTx();
    /**
     * <code>required .hw.trezor.messages.bitcoin.PrevTx tx = 1;</code>
     * @return The tx.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx getTx();
    /**
     * <code>required .hw.trezor.messages.bitcoin.PrevTx tx = 1;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTxOrBuilder getTxOrBuilder();
  }
  /**
   * <pre>
   * *
   * Request: Data about previous transaction metadata
   * Wire-alias of TxAck.
   *
   * Do not edit this type without considering compatibility with TxAck.
   * Prefer to modify the inner PrevTx type.
   *
   * &#64;next TxRequest
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPrevMeta}
   */
  public static final class TxAckPrevMeta extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAckPrevMeta)
      TxAckPrevMetaOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        TxAckPrevMeta.class.getName());
    }
    // Use TxAckPrevMeta.newBuilder() to construct.
    private TxAckPrevMeta(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TxAckPrevMeta() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevMeta_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevMeta_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta.Builder.class);
    }

    private int bitField0_;
    public static final int TX_FIELD_NUMBER = 1;
    private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx tx_;
    /**
     * <code>required .hw.trezor.messages.bitcoin.PrevTx tx = 1;</code>
     * @return Whether the tx field is set.
     */
    @java.lang.Override
    public boolean hasTx() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required .hw.trezor.messages.bitcoin.PrevTx tx = 1;</code>
     * @return The tx.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx getTx() {
      return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx.getDefaultInstance() : tx_;
    }
    /**
     * <code>required .hw.trezor.messages.bitcoin.PrevTx tx = 1;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTxOrBuilder getTxOrBuilder() {
      return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx.getDefaultInstance() : tx_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTx()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTx().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getTx());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTx());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta) obj;

      if (hasTx() != other.hasTx()) return false;
      if (hasTx()) {
        if (!getTx()
            .equals(other.getTx())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTx()) {
        hash = (37 * hash) + TX_FIELD_NUMBER;
        hash = (53 * hash) + getTx().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Request: Data about previous transaction metadata
     * Wire-alias of TxAck.
     *
     * Do not edit this type without considering compatibility with TxAck.
     * Prefer to modify the inner PrevTx type.
     *
     * &#64;next TxRequest
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPrevMeta}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAckPrevMeta)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMetaOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevMeta_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevMeta_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTxFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        tx_ = null;
        if (txBuilder_ != null) {
          txBuilder_.dispose();
          txBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevMeta_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.tx_ = txBuilder_ == null
              ? tx_
              : txBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta.getDefaultInstance()) return this;
        if (other.hasTx()) {
          mergeTx(other.getTx());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasTx()) {
          return false;
        }
        if (!getTx().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getTxFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx tx_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTxOrBuilder> txBuilder_;
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevTx tx = 1;</code>
       * @return Whether the tx field is set.
       */
      public boolean hasTx() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevTx tx = 1;</code>
       * @return The tx.
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx getTx() {
        if (txBuilder_ == null) {
          return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx.getDefaultInstance() : tx_;
        } else {
          return txBuilder_.getMessage();
        }
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevTx tx = 1;</code>
       */
      public Builder setTx(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx value) {
        if (txBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tx_ = value;
        } else {
          txBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevTx tx = 1;</code>
       */
      public Builder setTx(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx.Builder builderForValue) {
        if (txBuilder_ == null) {
          tx_ = builderForValue.build();
        } else {
          txBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevTx tx = 1;</code>
       */
      public Builder mergeTx(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx value) {
        if (txBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            tx_ != null &&
            tx_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx.getDefaultInstance()) {
            getTxBuilder().mergeFrom(value);
          } else {
            tx_ = value;
          }
        } else {
          txBuilder_.mergeFrom(value);
        }
        if (tx_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevTx tx = 1;</code>
       */
      public Builder clearTx() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tx_ = null;
        if (txBuilder_ != null) {
          txBuilder_.dispose();
          txBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevTx tx = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx.Builder getTxBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTxFieldBuilder().getBuilder();
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevTx tx = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTxOrBuilder getTxOrBuilder() {
        if (txBuilder_ != null) {
          return txBuilder_.getMessageOrBuilder();
        } else {
          return tx_ == null ?
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx.getDefaultInstance() : tx_;
        }
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevTx tx = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTxOrBuilder> 
          getTxFieldBuilder() {
        if (txBuilder_ == null) {
          txBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTx.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevTxOrBuilder>(
                  getTx(),
                  getParentForChildren(),
                  isClean());
          tx_ = null;
        }
        return txBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAckPrevMeta)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAckPrevMeta)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TxAckPrevMeta>
        PARSER = new com.google.protobuf.AbstractParser<TxAckPrevMeta>() {
      @java.lang.Override
      public TxAckPrevMeta parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TxAckPrevMeta> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TxAckPrevMeta> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevMeta getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TxAckPrevInputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAckPrevInput)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper tx = 1;</code>
     * @return Whether the tx field is set.
     */
    boolean hasTx();
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper tx = 1;</code>
     * @return The tx.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper getTx();
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper tx = 1;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapperOrBuilder getTxOrBuilder();
  }
  /**
   * <pre>
   * *
   * Request: Data about previous transaction input
   * Wire-alias of TxAck.
   *
   * Do not edit this type without considering compatibility with TxAck.
   * Prefer to modify the inner PrevInput type.
   *
   * &#64;next TxRequest
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPrevInput}
   */
  public static final class TxAckPrevInput extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAckPrevInput)
      TxAckPrevInputOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        TxAckPrevInput.class.getName());
    }
    // Use TxAckPrevInput.newBuilder() to construct.
    private TxAckPrevInput(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TxAckPrevInput() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.Builder.class);
    }

    public interface TxAckPrevInputWrapperOrBuilder extends
        // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevInput input = 2;</code>
       * @return Whether the input field is set.
       */
      boolean hasInput();
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevInput input = 2;</code>
       * @return The input.
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput getInput();
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevInput input = 2;</code>
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInputOrBuilder getInputOrBuilder();
    }
    /**
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper}
     */
    public static final class TxAckPrevInputWrapper extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper)
        TxAckPrevInputWrapperOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          TxAckPrevInputWrapper.class.getName());
      }
      // Use TxAckPrevInputWrapper.newBuilder() to construct.
      private TxAckPrevInputWrapper(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private TxAckPrevInputWrapper() {
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_TxAckPrevInputWrapper_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_TxAckPrevInputWrapper_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper.Builder.class);
      }

      private int bitField0_;
      public static final int INPUT_FIELD_NUMBER = 2;
      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput input_;
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevInput input = 2;</code>
       * @return Whether the input field is set.
       */
      @java.lang.Override
      public boolean hasInput() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevInput input = 2;</code>
       * @return The input.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput getInput() {
        return input_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput.getDefaultInstance() : input_;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevInput input = 2;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInputOrBuilder getInputOrBuilder() {
        return input_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput.getDefaultInstance() : input_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasInput()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!getInput().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeMessage(2, getInput());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getInput());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper) obj;

        if (hasInput() != other.hasInput()) return false;
        if (hasInput()) {
          if (!getInput()
              .equals(other.getInput())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasInput()) {
          hash = (37 * hash) + INPUT_FIELD_NUMBER;
          hash = (53 * hash) + getInput().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper)
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapperOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_TxAckPrevInputWrapper_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_TxAckPrevInputWrapper_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage
                  .alwaysUseFieldBuilders) {
            getInputFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          input_ = null;
          if (inputBuilder_ != null) {
            inputBuilder_.dispose();
            inputBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_TxAckPrevInputWrapper_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper getDefaultInstanceForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper build() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper buildPartial() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.input_ = inputBuilder_ == null
                ? input_
                : inputBuilder_.build();
            to_bitField0_ |= 0x00000001;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper) {
            return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper other) {
          if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper.getDefaultInstance()) return this;
          if (other.hasInput()) {
            mergeInput(other.getInput());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          if (!hasInput()) {
            return false;
          }
          if (!getInput().isInitialized()) {
            return false;
          }
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 18: {
                  input.readMessage(
                      getInputFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000001;
                  break;
                } // case 18
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput input_;
        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInputOrBuilder> inputBuilder_;
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevInput input = 2;</code>
         * @return Whether the input field is set.
         */
        public boolean hasInput() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevInput input = 2;</code>
         * @return The input.
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput getInput() {
          if (inputBuilder_ == null) {
            return input_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput.getDefaultInstance() : input_;
          } else {
            return inputBuilder_.getMessage();
          }
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevInput input = 2;</code>
         */
        public Builder setInput(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput value) {
          if (inputBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            input_ = value;
          } else {
            inputBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevInput input = 2;</code>
         */
        public Builder setInput(
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput.Builder builderForValue) {
          if (inputBuilder_ == null) {
            input_ = builderForValue.build();
          } else {
            inputBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevInput input = 2;</code>
         */
        public Builder mergeInput(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput value) {
          if (inputBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0) &&
              input_ != null &&
              input_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput.getDefaultInstance()) {
              getInputBuilder().mergeFrom(value);
            } else {
              input_ = value;
            }
          } else {
            inputBuilder_.mergeFrom(value);
          }
          if (input_ != null) {
            bitField0_ |= 0x00000001;
            onChanged();
          }
          return this;
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevInput input = 2;</code>
         */
        public Builder clearInput() {
          bitField0_ = (bitField0_ & ~0x00000001);
          input_ = null;
          if (inputBuilder_ != null) {
            inputBuilder_.dispose();
            inputBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevInput input = 2;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput.Builder getInputBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getInputFieldBuilder().getBuilder();
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevInput input = 2;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInputOrBuilder getInputOrBuilder() {
          if (inputBuilder_ != null) {
            return inputBuilder_.getMessageOrBuilder();
          } else {
            return input_ == null ?
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput.getDefaultInstance() : input_;
          }
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevInput input = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInputOrBuilder> 
            getInputFieldBuilder() {
          if (inputBuilder_ == null) {
            inputBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInput.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevInputOrBuilder>(
                    getInput(),
                    getParentForChildren(),
                    isClean());
            input_ = null;
          }
          return inputBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper)
      }

      // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper)
      private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper();
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TxAckPrevInputWrapper>
          PARSER = new com.google.protobuf.AbstractParser<TxAckPrevInputWrapper>() {
        @java.lang.Override
        public TxAckPrevInputWrapper parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TxAckPrevInputWrapper> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TxAckPrevInputWrapper> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int TX_FIELD_NUMBER = 1;
    private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper tx_;
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper tx = 1;</code>
     * @return Whether the tx field is set.
     */
    @java.lang.Override
    public boolean hasTx() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper tx = 1;</code>
     * @return The tx.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper getTx() {
      return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper.getDefaultInstance() : tx_;
    }
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper tx = 1;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapperOrBuilder getTxOrBuilder() {
      return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper.getDefaultInstance() : tx_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTx()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTx().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getTx());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTx());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput) obj;

      if (hasTx() != other.hasTx()) return false;
      if (hasTx()) {
        if (!getTx()
            .equals(other.getTx())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTx()) {
        hash = (37 * hash) + TX_FIELD_NUMBER;
        hash = (53 * hash) + getTx().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Request: Data about previous transaction input
     * Wire-alias of TxAck.
     *
     * Do not edit this type without considering compatibility with TxAck.
     * Prefer to modify the inner PrevInput type.
     *
     * &#64;next TxRequest
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPrevInput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAckPrevInput)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInputOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTxFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        tx_ = null;
        if (txBuilder_ != null) {
          txBuilder_.dispose();
          txBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.tx_ = txBuilder_ == null
              ? tx_
              : txBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.getDefaultInstance()) return this;
        if (other.hasTx()) {
          mergeTx(other.getTx());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasTx()) {
          return false;
        }
        if (!getTx().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getTxFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper tx_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapperOrBuilder> txBuilder_;
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper tx = 1;</code>
       * @return Whether the tx field is set.
       */
      public boolean hasTx() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper tx = 1;</code>
       * @return The tx.
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper getTx() {
        if (txBuilder_ == null) {
          return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper.getDefaultInstance() : tx_;
        } else {
          return txBuilder_.getMessage();
        }
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper tx = 1;</code>
       */
      public Builder setTx(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper value) {
        if (txBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tx_ = value;
        } else {
          txBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper tx = 1;</code>
       */
      public Builder setTx(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper.Builder builderForValue) {
        if (txBuilder_ == null) {
          tx_ = builderForValue.build();
        } else {
          txBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper tx = 1;</code>
       */
      public Builder mergeTx(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper value) {
        if (txBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            tx_ != null &&
            tx_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper.getDefaultInstance()) {
            getTxBuilder().mergeFrom(value);
          } else {
            tx_ = value;
          }
        } else {
          txBuilder_.mergeFrom(value);
        }
        if (tx_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper tx = 1;</code>
       */
      public Builder clearTx() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tx_ = null;
        if (txBuilder_ != null) {
          txBuilder_.dispose();
          txBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper tx = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper.Builder getTxBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTxFieldBuilder().getBuilder();
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper tx = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapperOrBuilder getTxOrBuilder() {
        if (txBuilder_ != null) {
          return txBuilder_.getMessageOrBuilder();
        } else {
          return tx_ == null ?
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper.getDefaultInstance() : tx_;
        }
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper tx = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapperOrBuilder> 
          getTxFieldBuilder() {
        if (txBuilder_ == null) {
          txBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapper.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput.TxAckPrevInputWrapperOrBuilder>(
                  getTx(),
                  getParentForChildren(),
                  isClean());
          tx_ = null;
        }
        return txBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAckPrevInput)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAckPrevInput)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TxAckPrevInput>
        PARSER = new com.google.protobuf.AbstractParser<TxAckPrevInput>() {
      @java.lang.Override
      public TxAckPrevInput parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TxAckPrevInput> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TxAckPrevInput> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevInput getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TxAckPrevOutputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAckPrevOutput)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper tx = 1;</code>
     * @return Whether the tx field is set.
     */
    boolean hasTx();
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper tx = 1;</code>
     * @return The tx.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper getTx();
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper tx = 1;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapperOrBuilder getTxOrBuilder();
  }
  /**
   * <pre>
   * *
   * Request: Data about previous transaction output
   * Wire-alias of TxAck.
   *
   * Do not edit this type without considering compatibility with TxAck.
   * Prefer to modify the inner PrevOutput type.
   *
   * &#64;next TxRequest
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPrevOutput}
   */
  public static final class TxAckPrevOutput extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAckPrevOutput)
      TxAckPrevOutputOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        TxAckPrevOutput.class.getName());
    }
    // Use TxAckPrevOutput.newBuilder() to construct.
    private TxAckPrevOutput(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TxAckPrevOutput() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.Builder.class);
    }

    public interface TxAckPrevOutputWrapperOrBuilder extends
        // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevOutput output = 3;</code>
       * @return Whether the output field is set.
       */
      boolean hasOutput();
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevOutput output = 3;</code>
       * @return The output.
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput getOutput();
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevOutput output = 3;</code>
       */
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutputOrBuilder getOutputOrBuilder();
    }
    /**
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper}
     */
    public static final class TxAckPrevOutputWrapper extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper)
        TxAckPrevOutputWrapperOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          TxAckPrevOutputWrapper.class.getName());
      }
      // Use TxAckPrevOutputWrapper.newBuilder() to construct.
      private TxAckPrevOutputWrapper(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private TxAckPrevOutputWrapper() {
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_TxAckPrevOutputWrapper_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_TxAckPrevOutputWrapper_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.Builder.class);
      }

      private int bitField0_;
      public static final int OUTPUT_FIELD_NUMBER = 3;
      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput output_;
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevOutput output = 3;</code>
       * @return Whether the output field is set.
       */
      @java.lang.Override
      public boolean hasOutput() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevOutput output = 3;</code>
       * @return The output.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput getOutput() {
        return output_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput.getDefaultInstance() : output_;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.PrevOutput output = 3;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutputOrBuilder getOutputOrBuilder() {
        return output_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput.getDefaultInstance() : output_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasOutput()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!getOutput().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeMessage(3, getOutput());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getOutput());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper) obj;

        if (hasOutput() != other.hasOutput()) return false;
        if (hasOutput()) {
          if (!getOutput()
              .equals(other.getOutput())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasOutput()) {
          hash = (37 * hash) + OUTPUT_FIELD_NUMBER;
          hash = (53 * hash) + getOutput().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper)
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapperOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_TxAckPrevOutputWrapper_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_TxAckPrevOutputWrapper_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage
                  .alwaysUseFieldBuilders) {
            getOutputFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          output_ = null;
          if (outputBuilder_ != null) {
            outputBuilder_.dispose();
            outputBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_TxAckPrevOutputWrapper_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper getDefaultInstanceForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper build() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper buildPartial() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.output_ = outputBuilder_ == null
                ? output_
                : outputBuilder_.build();
            to_bitField0_ |= 0x00000001;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper) {
            return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper other) {
          if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.getDefaultInstance()) return this;
          if (other.hasOutput()) {
            mergeOutput(other.getOutput());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          if (!hasOutput()) {
            return false;
          }
          if (!getOutput().isInitialized()) {
            return false;
          }
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 26: {
                  input.readMessage(
                      getOutputFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000001;
                  break;
                } // case 26
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput output_;
        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutputOrBuilder> outputBuilder_;
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevOutput output = 3;</code>
         * @return Whether the output field is set.
         */
        public boolean hasOutput() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevOutput output = 3;</code>
         * @return The output.
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput getOutput() {
          if (outputBuilder_ == null) {
            return output_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput.getDefaultInstance() : output_;
          } else {
            return outputBuilder_.getMessage();
          }
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevOutput output = 3;</code>
         */
        public Builder setOutput(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput value) {
          if (outputBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            output_ = value;
          } else {
            outputBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevOutput output = 3;</code>
         */
        public Builder setOutput(
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput.Builder builderForValue) {
          if (outputBuilder_ == null) {
            output_ = builderForValue.build();
          } else {
            outputBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevOutput output = 3;</code>
         */
        public Builder mergeOutput(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput value) {
          if (outputBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0) &&
              output_ != null &&
              output_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput.getDefaultInstance()) {
              getOutputBuilder().mergeFrom(value);
            } else {
              output_ = value;
            }
          } else {
            outputBuilder_.mergeFrom(value);
          }
          if (output_ != null) {
            bitField0_ |= 0x00000001;
            onChanged();
          }
          return this;
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevOutput output = 3;</code>
         */
        public Builder clearOutput() {
          bitField0_ = (bitField0_ & ~0x00000001);
          output_ = null;
          if (outputBuilder_ != null) {
            outputBuilder_.dispose();
            outputBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevOutput output = 3;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput.Builder getOutputBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getOutputFieldBuilder().getBuilder();
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevOutput output = 3;</code>
         */
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutputOrBuilder getOutputOrBuilder() {
          if (outputBuilder_ != null) {
            return outputBuilder_.getMessageOrBuilder();
          } else {
            return output_ == null ?
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput.getDefaultInstance() : output_;
          }
        }
        /**
         * <code>required .hw.trezor.messages.bitcoin.PrevOutput output = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutputOrBuilder> 
            getOutputFieldBuilder() {
          if (outputBuilder_ == null) {
            outputBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutput.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.PrevOutputOrBuilder>(
                    getOutput(),
                    getParentForChildren(),
                    isClean());
            output_ = null;
          }
          return outputBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper)
      }

      // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper)
      private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper();
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TxAckPrevOutputWrapper>
          PARSER = new com.google.protobuf.AbstractParser<TxAckPrevOutputWrapper>() {
        @java.lang.Override
        public TxAckPrevOutputWrapper parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TxAckPrevOutputWrapper> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TxAckPrevOutputWrapper> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int TX_FIELD_NUMBER = 1;
    private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper tx_;
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper tx = 1;</code>
     * @return Whether the tx field is set.
     */
    @java.lang.Override
    public boolean hasTx() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper tx = 1;</code>
     * @return The tx.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper getTx() {
      return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.getDefaultInstance() : tx_;
    }
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper tx = 1;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapperOrBuilder getTxOrBuilder() {
      return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.getDefaultInstance() : tx_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTx()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTx().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getTx());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTx());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput) obj;

      if (hasTx() != other.hasTx()) return false;
      if (hasTx()) {
        if (!getTx()
            .equals(other.getTx())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTx()) {
        hash = (37 * hash) + TX_FIELD_NUMBER;
        hash = (53 * hash) + getTx().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Request: Data about previous transaction output
     * Wire-alias of TxAck.
     *
     * Do not edit this type without considering compatibility with TxAck.
     * Prefer to modify the inner PrevOutput type.
     *
     * &#64;next TxRequest
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPrevOutput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAckPrevOutput)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutputOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTxFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        tx_ = null;
        if (txBuilder_ != null) {
          txBuilder_.dispose();
          txBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.tx_ = txBuilder_ == null
              ? tx_
              : txBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.getDefaultInstance()) return this;
        if (other.hasTx()) {
          mergeTx(other.getTx());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasTx()) {
          return false;
        }
        if (!getTx().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getTxFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper tx_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapperOrBuilder> txBuilder_;
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper tx = 1;</code>
       * @return Whether the tx field is set.
       */
      public boolean hasTx() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper tx = 1;</code>
       * @return The tx.
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper getTx() {
        if (txBuilder_ == null) {
          return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.getDefaultInstance() : tx_;
        } else {
          return txBuilder_.getMessage();
        }
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper tx = 1;</code>
       */
      public Builder setTx(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper value) {
        if (txBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tx_ = value;
        } else {
          txBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper tx = 1;</code>
       */
      public Builder setTx(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.Builder builderForValue) {
        if (txBuilder_ == null) {
          tx_ = builderForValue.build();
        } else {
          txBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper tx = 1;</code>
       */
      public Builder mergeTx(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper value) {
        if (txBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            tx_ != null &&
            tx_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.getDefaultInstance()) {
            getTxBuilder().mergeFrom(value);
          } else {
            tx_ = value;
          }
        } else {
          txBuilder_.mergeFrom(value);
        }
        if (tx_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper tx = 1;</code>
       */
      public Builder clearTx() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tx_ = null;
        if (txBuilder_ != null) {
          txBuilder_.dispose();
          txBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper tx = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.Builder getTxBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTxFieldBuilder().getBuilder();
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper tx = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapperOrBuilder getTxOrBuilder() {
        if (txBuilder_ != null) {
          return txBuilder_.getMessageOrBuilder();
        } else {
          return tx_ == null ?
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.getDefaultInstance() : tx_;
        }
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper tx = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapperOrBuilder> 
          getTxFieldBuilder() {
        if (txBuilder_ == null) {
          txBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput.TxAckPrevOutputWrapperOrBuilder>(
                  getTx(),
                  getParentForChildren(),
                  isClean());
          tx_ = null;
        }
        return txBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAckPrevOutput)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAckPrevOutput)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TxAckPrevOutput>
        PARSER = new com.google.protobuf.AbstractParser<TxAckPrevOutput>() {
      @java.lang.Override
      public TxAckPrevOutput parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TxAckPrevOutput> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TxAckPrevOutput> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevOutput getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TxAckPrevExtraDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAckPrevExtraData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper tx = 1;</code>
     * @return Whether the tx field is set.
     */
    boolean hasTx();
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper tx = 1;</code>
     * @return The tx.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper getTx();
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper tx = 1;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapperOrBuilder getTxOrBuilder();
  }
  /**
   * <pre>
   * *
   * Request: Content of the extra data of a previous transaction
   * Wire-alias of TxAck.
   *
   * Do not edit this type without considering compatibility with TxAck.
   *
   * &#64;next TxRequest
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPrevExtraData}
   */
  public static final class TxAckPrevExtraData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAckPrevExtraData)
      TxAckPrevExtraDataOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        TxAckPrevExtraData.class.getName());
    }
    // Use TxAckPrevExtraData.newBuilder() to construct.
    private TxAckPrevExtraData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TxAckPrevExtraData() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.Builder.class);
    }

    public interface TxAckPrevExtraDataWrapperOrBuilder extends
        // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required bytes extra_data_chunk = 8;</code>
       * @return Whether the extraDataChunk field is set.
       */
      boolean hasExtraDataChunk();
      /**
       * <code>required bytes extra_data_chunk = 8;</code>
       * @return The extraDataChunk.
       */
      com.google.protobuf.ByteString getExtraDataChunk();
    }
    /**
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper}
     */
    public static final class TxAckPrevExtraDataWrapper extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper)
        TxAckPrevExtraDataWrapperOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          TxAckPrevExtraDataWrapper.class.getName());
      }
      // Use TxAckPrevExtraDataWrapper.newBuilder() to construct.
      private TxAckPrevExtraDataWrapper(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private TxAckPrevExtraDataWrapper() {
        extraDataChunk_ = com.google.protobuf.ByteString.EMPTY;
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_TxAckPrevExtraDataWrapper_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_TxAckPrevExtraDataWrapper_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper.Builder.class);
      }

      private int bitField0_;
      public static final int EXTRA_DATA_CHUNK_FIELD_NUMBER = 8;
      private com.google.protobuf.ByteString extraDataChunk_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes extra_data_chunk = 8;</code>
       * @return Whether the extraDataChunk field is set.
       */
      @java.lang.Override
      public boolean hasExtraDataChunk() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required bytes extra_data_chunk = 8;</code>
       * @return The extraDataChunk.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getExtraDataChunk() {
        return extraDataChunk_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasExtraDataChunk()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeBytes(8, extraDataChunk_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(8, extraDataChunk_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper) obj;

        if (hasExtraDataChunk() != other.hasExtraDataChunk()) return false;
        if (hasExtraDataChunk()) {
          if (!getExtraDataChunk()
              .equals(other.getExtraDataChunk())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasExtraDataChunk()) {
          hash = (37 * hash) + EXTRA_DATA_CHUNK_FIELD_NUMBER;
          hash = (53 * hash) + getExtraDataChunk().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper)
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapperOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_TxAckPrevExtraDataWrapper_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_TxAckPrevExtraDataWrapper_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          extraDataChunk_ = com.google.protobuf.ByteString.EMPTY;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_TxAckPrevExtraDataWrapper_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper getDefaultInstanceForType() {
          return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper build() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper buildPartial() {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.extraDataChunk_ = extraDataChunk_;
            to_bitField0_ |= 0x00000001;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper) {
            return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper other) {
          if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper.getDefaultInstance()) return this;
          if (other.hasExtraDataChunk()) {
            setExtraDataChunk(other.getExtraDataChunk());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          if (!hasExtraDataChunk()) {
            return false;
          }
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 66: {
                  extraDataChunk_ = input.readBytes();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 66
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private com.google.protobuf.ByteString extraDataChunk_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <code>required bytes extra_data_chunk = 8;</code>
         * @return Whether the extraDataChunk field is set.
         */
        @java.lang.Override
        public boolean hasExtraDataChunk() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>required bytes extra_data_chunk = 8;</code>
         * @return The extraDataChunk.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getExtraDataChunk() {
          return extraDataChunk_;
        }
        /**
         * <code>required bytes extra_data_chunk = 8;</code>
         * @param value The extraDataChunk to set.
         * @return This builder for chaining.
         */
        public Builder setExtraDataChunk(com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          extraDataChunk_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>required bytes extra_data_chunk = 8;</code>
         * @return This builder for chaining.
         */
        public Builder clearExtraDataChunk() {
          bitField0_ = (bitField0_ & ~0x00000001);
          extraDataChunk_ = getDefaultInstance().getExtraDataChunk();
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper)
      }

      // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper)
      private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper();
      }

      public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TxAckPrevExtraDataWrapper>
          PARSER = new com.google.protobuf.AbstractParser<TxAckPrevExtraDataWrapper>() {
        @java.lang.Override
        public TxAckPrevExtraDataWrapper parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TxAckPrevExtraDataWrapper> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TxAckPrevExtraDataWrapper> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int TX_FIELD_NUMBER = 1;
    private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper tx_;
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper tx = 1;</code>
     * @return Whether the tx field is set.
     */
    @java.lang.Override
    public boolean hasTx() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper tx = 1;</code>
     * @return The tx.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper getTx() {
      return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper.getDefaultInstance() : tx_;
    }
    /**
     * <code>required .hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper tx = 1;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapperOrBuilder getTxOrBuilder() {
      return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper.getDefaultInstance() : tx_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTx()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTx().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getTx());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTx());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData) obj;

      if (hasTx() != other.hasTx()) return false;
      if (hasTx()) {
        if (!getTx()
            .equals(other.getTx())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTx()) {
        hash = (37 * hash) + TX_FIELD_NUMBER;
        hash = (53 * hash) + getTx().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Request: Content of the extra data of a previous transaction
     * Wire-alias of TxAck.
     *
     * Do not edit this type without considering compatibility with TxAck.
     *
     * &#64;next TxRequest
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.TxAckPrevExtraData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.TxAckPrevExtraData)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTxFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        tx_ = null;
        if (txBuilder_ != null) {
          txBuilder_.dispose();
          txBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.tx_ = txBuilder_ == null
              ? tx_
              : txBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.getDefaultInstance()) return this;
        if (other.hasTx()) {
          mergeTx(other.getTx());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasTx()) {
          return false;
        }
        if (!getTx().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getTxFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper tx_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapperOrBuilder> txBuilder_;
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper tx = 1;</code>
       * @return Whether the tx field is set.
       */
      public boolean hasTx() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper tx = 1;</code>
       * @return The tx.
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper getTx() {
        if (txBuilder_ == null) {
          return tx_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper.getDefaultInstance() : tx_;
        } else {
          return txBuilder_.getMessage();
        }
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper tx = 1;</code>
       */
      public Builder setTx(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper value) {
        if (txBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tx_ = value;
        } else {
          txBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper tx = 1;</code>
       */
      public Builder setTx(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper.Builder builderForValue) {
        if (txBuilder_ == null) {
          tx_ = builderForValue.build();
        } else {
          txBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper tx = 1;</code>
       */
      public Builder mergeTx(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper value) {
        if (txBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            tx_ != null &&
            tx_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper.getDefaultInstance()) {
            getTxBuilder().mergeFrom(value);
          } else {
            tx_ = value;
          }
        } else {
          txBuilder_.mergeFrom(value);
        }
        if (tx_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper tx = 1;</code>
       */
      public Builder clearTx() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tx_ = null;
        if (txBuilder_ != null) {
          txBuilder_.dispose();
          txBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper tx = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper.Builder getTxBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTxFieldBuilder().getBuilder();
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper tx = 1;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapperOrBuilder getTxOrBuilder() {
        if (txBuilder_ != null) {
          return txBuilder_.getMessageOrBuilder();
        } else {
          return tx_ == null ?
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper.getDefaultInstance() : tx_;
        }
      }
      /**
       * <code>required .hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper tx = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapperOrBuilder> 
          getTxFieldBuilder() {
        if (txBuilder_ == null) {
          txBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapperOrBuilder>(
                  getTx(),
                  getParentForChildren(),
                  isClean());
          tx_ = null;
        }
        return txBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.TxAckPrevExtraData)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.TxAckPrevExtraData)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TxAckPrevExtraData>
        PARSER = new com.google.protobuf.AbstractParser<TxAckPrevExtraData>() {
      @java.lang.Override
      public TxAckPrevExtraData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TxAckPrevExtraData> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TxAckPrevExtraData> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.TxAckPrevExtraData getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GetOwnershipProofOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.GetOwnershipProof)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return A list containing the addressN.
     */
    java.util.List<java.lang.Integer> getAddressNList();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return The count of addressN.
     */
    int getAddressNCount();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    int getAddressN(int index);

    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return Whether the coinName field is set.
     */
    boolean hasCoinName();
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return The coinName.
     */
    java.lang.String getCoinName();
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return The bytes for coinName.
     */
    com.google.protobuf.ByteString
        getCoinNameBytes();

    /**
     * <pre>
     * used to distinguish between various scriptPubKey types
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 3 [default = SPENDWITNESS];</code>
     * @return Whether the scriptType field is set.
     */
    boolean hasScriptType();
    /**
     * <pre>
     * used to distinguish between various scriptPubKey types
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 3 [default = SPENDWITNESS];</code>
     * @return The scriptType.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType();

    /**
     * <pre>
     * filled if proof is for a multisig address
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
     * @return Whether the multisig field is set.
     */
    boolean hasMultisig();
    /**
     * <pre>
     * filled if proof is for a multisig address
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
     * @return The multisig.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig();
    /**
     * <pre>
     * filled if proof is for a multisig address
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder();

    /**
     * <pre>
     * show a confirmation dialog and set the "user confirmation" bit in the proof
     * </pre>
     *
     * <code>optional bool user_confirmation = 5 [default = false];</code>
     * @return Whether the userConfirmation field is set.
     */
    boolean hasUserConfirmation();
    /**
     * <pre>
     * show a confirmation dialog and set the "user confirmation" bit in the proof
     * </pre>
     *
     * <code>optional bool user_confirmation = 5 [default = false];</code>
     * @return The userConfirmation.
     */
    boolean getUserConfirmation();

    /**
     * <pre>
     * list of ownership identifiers in case of multisig
     * </pre>
     *
     * <code>repeated bytes ownership_ids = 6;</code>
     * @return A list containing the ownershipIds.
     */
    java.util.List<com.google.protobuf.ByteString> getOwnershipIdsList();
    /**
     * <pre>
     * list of ownership identifiers in case of multisig
     * </pre>
     *
     * <code>repeated bytes ownership_ids = 6;</code>
     * @return The count of ownershipIds.
     */
    int getOwnershipIdsCount();
    /**
     * <pre>
     * list of ownership identifiers in case of multisig
     * </pre>
     *
     * <code>repeated bytes ownership_ids = 6;</code>
     * @param index The index of the element to return.
     * @return The ownershipIds at the given index.
     */
    com.google.protobuf.ByteString getOwnershipIds(int index);

    /**
     * <pre>
     * additional data to which the proof should commit
     * </pre>
     *
     * <code>optional bytes commitment_data = 7 [default = ""];</code>
     * @return Whether the commitmentData field is set.
     */
    boolean hasCommitmentData();
    /**
     * <pre>
     * additional data to which the proof should commit
     * </pre>
     *
     * <code>optional bytes commitment_data = 7 [default = ""];</code>
     * @return The commitmentData.
     */
    com.google.protobuf.ByteString getCommitmentData();
  }
  /**
   * <pre>
   * *
   * Request: Ask device for a proof of ownership corresponding to address_n path
   * &#64;start
   * &#64;next OwnershipProof
   * &#64;next Failure
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.GetOwnershipProof}
   */
  public static final class GetOwnershipProof extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.GetOwnershipProof)
      GetOwnershipProofOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        GetOwnershipProof.class.getName());
    }
    // Use GetOwnershipProof.newBuilder() to construct.
    private GetOwnershipProof(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private GetOwnershipProof() {
      addressN_ = emptyIntList();
      coinName_ = "Bitcoin";
      scriptType_ = 3;
      ownershipIds_ = emptyList(com.google.protobuf.ByteString.class);
      commitmentData_ = com.google.protobuf.Internal.bytesDefaultValue("");
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetOwnershipProof_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetOwnershipProof_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof.Builder.class);
    }

    private int bitField0_;
    public static final int ADDRESS_N_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList addressN_ =
        emptyIntList();
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return A list containing the addressN.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getAddressNList() {
      return addressN_;
    }
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @return The count of addressN.
     */
    public int getAddressNCount() {
      return addressN_.size();
    }
    /**
     * <pre>
     * BIP-32 path to derive the key from master node
     * </pre>
     *
     * <code>repeated uint32 address_n = 1;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    public int getAddressN(int index) {
      return addressN_.getInt(index);
    }

    public static final int COIN_NAME_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object coinName_ = "Bitcoin";
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return Whether the coinName field is set.
     */
    @java.lang.Override
    public boolean hasCoinName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return The coinName.
     */
    @java.lang.Override
    public java.lang.String getCoinName() {
      java.lang.Object ref = coinName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          coinName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
     * @return The bytes for coinName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCoinNameBytes() {
      java.lang.Object ref = coinName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        coinName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCRIPT_TYPE_FIELD_NUMBER = 3;
    private int scriptType_ = 3;
    /**
     * <pre>
     * used to distinguish between various scriptPubKey types
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 3 [default = SPENDWITNESS];</code>
     * @return Whether the scriptType field is set.
     */
    @java.lang.Override public boolean hasScriptType() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * used to distinguish between various scriptPubKey types
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 3 [default = SPENDWITNESS];</code>
     * @return The scriptType.
     */
    @java.lang.Override public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType() {
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(scriptType_);
      return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.SPENDWITNESS : result;
    }

    public static final int MULTISIG_FIELD_NUMBER = 4;
    private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType multisig_;
    /**
     * <pre>
     * filled if proof is for a multisig address
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
     * @return Whether the multisig field is set.
     */
    @java.lang.Override
    public boolean hasMultisig() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * filled if proof is for a multisig address
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
     * @return The multisig.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig() {
      return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
    }
    /**
     * <pre>
     * filled if proof is for a multisig address
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder() {
      return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
    }

    public static final int USER_CONFIRMATION_FIELD_NUMBER = 5;
    private boolean userConfirmation_ = false;
    /**
     * <pre>
     * show a confirmation dialog and set the "user confirmation" bit in the proof
     * </pre>
     *
     * <code>optional bool user_confirmation = 5 [default = false];</code>
     * @return Whether the userConfirmation field is set.
     */
    @java.lang.Override
    public boolean hasUserConfirmation() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * show a confirmation dialog and set the "user confirmation" bit in the proof
     * </pre>
     *
     * <code>optional bool user_confirmation = 5 [default = false];</code>
     * @return The userConfirmation.
     */
    @java.lang.Override
    public boolean getUserConfirmation() {
      return userConfirmation_;
    }

    public static final int OWNERSHIP_IDS_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> ownershipIds_ =
        emptyList(com.google.protobuf.ByteString.class);
    /**
     * <pre>
     * list of ownership identifiers in case of multisig
     * </pre>
     *
     * <code>repeated bytes ownership_ids = 6;</code>
     * @return A list containing the ownershipIds.
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.ByteString>
        getOwnershipIdsList() {
      return ownershipIds_;
    }
    /**
     * <pre>
     * list of ownership identifiers in case of multisig
     * </pre>
     *
     * <code>repeated bytes ownership_ids = 6;</code>
     * @return The count of ownershipIds.
     */
    public int getOwnershipIdsCount() {
      return ownershipIds_.size();
    }
    /**
     * <pre>
     * list of ownership identifiers in case of multisig
     * </pre>
     *
     * <code>repeated bytes ownership_ids = 6;</code>
     * @param index The index of the element to return.
     * @return The ownershipIds at the given index.
     */
    public com.google.protobuf.ByteString getOwnershipIds(int index) {
      return ownershipIds_.get(index);
    }

    public static final int COMMITMENT_DATA_FIELD_NUMBER = 7;
    private com.google.protobuf.ByteString commitmentData_ = com.google.protobuf.Internal.bytesDefaultValue("");
    /**
     * <pre>
     * additional data to which the proof should commit
     * </pre>
     *
     * <code>optional bytes commitment_data = 7 [default = ""];</code>
     * @return Whether the commitmentData field is set.
     */
    @java.lang.Override
    public boolean hasCommitmentData() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * additional data to which the proof should commit
     * </pre>
     *
     * <code>optional bytes commitment_data = 7 [default = ""];</code>
     * @return The commitmentData.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getCommitmentData() {
      return commitmentData_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasMultisig()) {
        if (!getMultisig().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < addressN_.size(); i++) {
        output.writeUInt32(1, addressN_.getInt(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, coinName_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeEnum(3, scriptType_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(4, getMultisig());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeBool(5, userConfirmation_);
      }
      for (int i = 0; i < ownershipIds_.size(); i++) {
        output.writeBytes(6, ownershipIds_.get(i));
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBytes(7, commitmentData_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < addressN_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(addressN_.getInt(i));
        }
        size += dataSize;
        size += 1 * getAddressNList().size();
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, coinName_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, scriptType_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getMultisig());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, userConfirmation_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < ownershipIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(ownershipIds_.get(i));
        }
        size += dataSize;
        size += 1 * getOwnershipIdsList().size();
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, commitmentData_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof) obj;

      if (!getAddressNList()
          .equals(other.getAddressNList())) return false;
      if (hasCoinName() != other.hasCoinName()) return false;
      if (hasCoinName()) {
        if (!getCoinName()
            .equals(other.getCoinName())) return false;
      }
      if (hasScriptType() != other.hasScriptType()) return false;
      if (hasScriptType()) {
        if (scriptType_ != other.scriptType_) return false;
      }
      if (hasMultisig() != other.hasMultisig()) return false;
      if (hasMultisig()) {
        if (!getMultisig()
            .equals(other.getMultisig())) return false;
      }
      if (hasUserConfirmation() != other.hasUserConfirmation()) return false;
      if (hasUserConfirmation()) {
        if (getUserConfirmation()
            != other.getUserConfirmation()) return false;
      }
      if (!getOwnershipIdsList()
          .equals(other.getOwnershipIdsList())) return false;
      if (hasCommitmentData() != other.hasCommitmentData()) return false;
      if (hasCommitmentData()) {
        if (!getCommitmentData()
            .equals(other.getCommitmentData())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getAddressNCount() > 0) {
        hash = (37 * hash) + ADDRESS_N_FIELD_NUMBER;
        hash = (53 * hash) + getAddressNList().hashCode();
      }
      if (hasCoinName()) {
        hash = (37 * hash) + COIN_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getCoinName().hashCode();
      }
      if (hasScriptType()) {
        hash = (37 * hash) + SCRIPT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + scriptType_;
      }
      if (hasMultisig()) {
        hash = (37 * hash) + MULTISIG_FIELD_NUMBER;
        hash = (53 * hash) + getMultisig().hashCode();
      }
      if (hasUserConfirmation()) {
        hash = (37 * hash) + USER_CONFIRMATION_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getUserConfirmation());
      }
      if (getOwnershipIdsCount() > 0) {
        hash = (37 * hash) + OWNERSHIP_IDS_FIELD_NUMBER;
        hash = (53 * hash) + getOwnershipIdsList().hashCode();
      }
      if (hasCommitmentData()) {
        hash = (37 * hash) + COMMITMENT_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getCommitmentData().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Request: Ask device for a proof of ownership corresponding to address_n path
     * &#64;start
     * &#64;next OwnershipProof
     * &#64;next Failure
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.GetOwnershipProof}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.GetOwnershipProof)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProofOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetOwnershipProof_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetOwnershipProof_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getMultisigFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        addressN_ = emptyIntList();
        coinName_ = "Bitcoin";
        scriptType_ = 3;
        multisig_ = null;
        if (multisigBuilder_ != null) {
          multisigBuilder_.dispose();
          multisigBuilder_ = null;
        }
        userConfirmation_ = false;
        ownershipIds_ = emptyList(com.google.protobuf.ByteString.class);
        commitmentData_ = com.google.protobuf.Internal.bytesDefaultValue("");
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_GetOwnershipProof_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          addressN_.makeImmutable();
          result.addressN_ = addressN_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.coinName_ = coinName_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.scriptType_ = scriptType_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.multisig_ = multisigBuilder_ == null
              ? multisig_
              : multisigBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.userConfirmation_ = userConfirmation_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          ownershipIds_.makeImmutable();
          result.ownershipIds_ = ownershipIds_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.commitmentData_ = commitmentData_;
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof.getDefaultInstance()) return this;
        if (!other.addressN_.isEmpty()) {
          if (addressN_.isEmpty()) {
            addressN_ = other.addressN_;
            addressN_.makeImmutable();
            bitField0_ |= 0x00000001;
          } else {
            ensureAddressNIsMutable();
            addressN_.addAll(other.addressN_);
          }
          onChanged();
        }
        if (other.hasCoinName()) {
          coinName_ = other.coinName_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasScriptType()) {
          setScriptType(other.getScriptType());
        }
        if (other.hasMultisig()) {
          mergeMultisig(other.getMultisig());
        }
        if (other.hasUserConfirmation()) {
          setUserConfirmation(other.getUserConfirmation());
        }
        if (!other.ownershipIds_.isEmpty()) {
          if (ownershipIds_.isEmpty()) {
            ownershipIds_ = other.ownershipIds_;
            ownershipIds_.makeImmutable();
            bitField0_ |= 0x00000020;
          } else {
            ensureOwnershipIdsIsMutable();
            ownershipIds_.addAll(other.ownershipIds_);
          }
          onChanged();
        }
        if (other.hasCommitmentData()) {
          setCommitmentData(other.getCommitmentData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (hasMultisig()) {
          if (!getMultisig().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int v = input.readUInt32();
                ensureAddressNIsMutable();
                addressN_.addInt(v);
                break;
              } // case 8
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureAddressNIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  addressN_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 10
              case 18: {
                coinName_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                int tmpRaw = input.readEnum();
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType tmpValue =
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(3, tmpRaw);
                } else {
                  scriptType_ = tmpRaw;
                  bitField0_ |= 0x00000004;
                }
                break;
              } // case 24
              case 34: {
                input.readMessage(
                    getMultisigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 40: {
                userConfirmation_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 50: {
                com.google.protobuf.ByteString v = input.readBytes();
                ensureOwnershipIdsIsMutable();
                ownershipIds_.add(v);
                break;
              } // case 50
              case 58: {
                commitmentData_ = input.readBytes();
                bitField0_ |= 0x00000040;
                break;
              } // case 58
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.IntList addressN_ = emptyIntList();
      private void ensureAddressNIsMutable() {
        if (!addressN_.isModifiable()) {
          addressN_ = makeMutableCopy(addressN_);
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return A list containing the addressN.
       */
      public java.util.List<java.lang.Integer>
          getAddressNList() {
        addressN_.makeImmutable();
        return addressN_;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return The count of addressN.
       */
      public int getAddressNCount() {
        return addressN_.size();
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param index The index of the element to return.
       * @return The addressN at the given index.
       */
      public int getAddressN(int index) {
        return addressN_.getInt(index);
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param index The index to set the value at.
       * @param value The addressN to set.
       * @return This builder for chaining.
       */
      public Builder setAddressN(
          int index, int value) {

        ensureAddressNIsMutable();
        addressN_.setInt(index, value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param value The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAddressN(int value) {

        ensureAddressNIsMutable();
        addressN_.addInt(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @param values The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAllAddressN(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAddressNIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, addressN_);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BIP-32 path to derive the key from master node
       * </pre>
       *
       * <code>repeated uint32 address_n = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAddressN() {
        addressN_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.lang.Object coinName_ = "Bitcoin";
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @return Whether the coinName field is set.
       */
      public boolean hasCoinName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @return The coinName.
       */
      public java.lang.String getCoinName() {
        java.lang.Object ref = coinName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            coinName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @return The bytes for coinName.
       */
      public com.google.protobuf.ByteString
          getCoinNameBytes() {
        java.lang.Object ref = coinName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          coinName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @param value The coinName to set.
       * @return This builder for chaining.
       */
      public Builder setCoinName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        coinName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @return This builder for chaining.
       */
      public Builder clearCoinName() {
        coinName_ = getDefaultInstance().getCoinName();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 2 [default = "Bitcoin"];</code>
       * @param value The bytes for coinName to set.
       * @return This builder for chaining.
       */
      public Builder setCoinNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        coinName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private int scriptType_ = 3;
      /**
       * <pre>
       * used to distinguish between various scriptPubKey types
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 3 [default = SPENDWITNESS];</code>
       * @return Whether the scriptType field is set.
       */
      @java.lang.Override public boolean hasScriptType() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * used to distinguish between various scriptPubKey types
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 3 [default = SPENDWITNESS];</code>
       * @return The scriptType.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(scriptType_);
        return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.SPENDWITNESS : result;
      }
      /**
       * <pre>
       * used to distinguish between various scriptPubKey types
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 3 [default = SPENDWITNESS];</code>
       * @param value The scriptType to set.
       * @return This builder for chaining.
       */
      public Builder setScriptType(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        scriptType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * used to distinguish between various scriptPubKey types
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 3 [default = SPENDWITNESS];</code>
       * @return This builder for chaining.
       */
      public Builder clearScriptType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        scriptType_ = 3;
        onChanged();
        return this;
      }

      private com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType multisig_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder> multisigBuilder_;
      /**
       * <pre>
       * filled if proof is for a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       * @return Whether the multisig field is set.
       */
      public boolean hasMultisig() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * filled if proof is for a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       * @return The multisig.
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType getMultisig() {
        if (multisigBuilder_ == null) {
          return multisig_ == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
        } else {
          return multisigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * filled if proof is for a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       */
      public Builder setMultisig(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType value) {
        if (multisigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          multisig_ = value;
        } else {
          multisigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * filled if proof is for a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       */
      public Builder setMultisig(
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder builderForValue) {
        if (multisigBuilder_ == null) {
          multisig_ = builderForValue.build();
        } else {
          multisigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * filled if proof is for a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       */
      public Builder mergeMultisig(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType value) {
        if (multisigBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            multisig_ != null &&
            multisig_ != com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance()) {
            getMultisigBuilder().mergeFrom(value);
          } else {
            multisig_ = value;
          }
        } else {
          multisigBuilder_.mergeFrom(value);
        }
        if (multisig_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * filled if proof is for a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       */
      public Builder clearMultisig() {
        bitField0_ = (bitField0_ & ~0x00000008);
        multisig_ = null;
        if (multisigBuilder_ != null) {
          multisigBuilder_.dispose();
          multisigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * filled if proof is for a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder getMultisigBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getMultisigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * filled if proof is for a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       */
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder getMultisigOrBuilder() {
        if (multisigBuilder_ != null) {
          return multisigBuilder_.getMessageOrBuilder();
        } else {
          return multisig_ == null ?
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.getDefaultInstance() : multisig_;
        }
      }
      /**
       * <pre>
       * filled if proof is for a multisig address
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.MultisigRedeemScriptType multisig = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder> 
          getMultisigFieldBuilder() {
        if (multisigBuilder_ == null) {
          multisigBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptType.Builder, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.MultisigRedeemScriptTypeOrBuilder>(
                  getMultisig(),
                  getParentForChildren(),
                  isClean());
          multisig_ = null;
        }
        return multisigBuilder_;
      }

      private boolean userConfirmation_ ;
      /**
       * <pre>
       * show a confirmation dialog and set the "user confirmation" bit in the proof
       * </pre>
       *
       * <code>optional bool user_confirmation = 5 [default = false];</code>
       * @return Whether the userConfirmation field is set.
       */
      @java.lang.Override
      public boolean hasUserConfirmation() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * show a confirmation dialog and set the "user confirmation" bit in the proof
       * </pre>
       *
       * <code>optional bool user_confirmation = 5 [default = false];</code>
       * @return The userConfirmation.
       */
      @java.lang.Override
      public boolean getUserConfirmation() {
        return userConfirmation_;
      }
      /**
       * <pre>
       * show a confirmation dialog and set the "user confirmation" bit in the proof
       * </pre>
       *
       * <code>optional bool user_confirmation = 5 [default = false];</code>
       * @param value The userConfirmation to set.
       * @return This builder for chaining.
       */
      public Builder setUserConfirmation(boolean value) {

        userConfirmation_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * show a confirmation dialog and set the "user confirmation" bit in the proof
       * </pre>
       *
       * <code>optional bool user_confirmation = 5 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearUserConfirmation() {
        bitField0_ = (bitField0_ & ~0x00000010);
        userConfirmation_ = false;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> ownershipIds_ = emptyList(com.google.protobuf.ByteString.class);
      private void ensureOwnershipIdsIsMutable() {
        if (!ownershipIds_.isModifiable()) {
          ownershipIds_ = makeMutableCopy(ownershipIds_);
        }
        bitField0_ |= 0x00000020;
      }
      /**
       * <pre>
       * list of ownership identifiers in case of multisig
       * </pre>
       *
       * <code>repeated bytes ownership_ids = 6;</code>
       * @return A list containing the ownershipIds.
       */
      public java.util.List<com.google.protobuf.ByteString>
          getOwnershipIdsList() {
        ownershipIds_.makeImmutable();
        return ownershipIds_;
      }
      /**
       * <pre>
       * list of ownership identifiers in case of multisig
       * </pre>
       *
       * <code>repeated bytes ownership_ids = 6;</code>
       * @return The count of ownershipIds.
       */
      public int getOwnershipIdsCount() {
        return ownershipIds_.size();
      }
      /**
       * <pre>
       * list of ownership identifiers in case of multisig
       * </pre>
       *
       * <code>repeated bytes ownership_ids = 6;</code>
       * @param index The index of the element to return.
       * @return The ownershipIds at the given index.
       */
      public com.google.protobuf.ByteString getOwnershipIds(int index) {
        return ownershipIds_.get(index);
      }
      /**
       * <pre>
       * list of ownership identifiers in case of multisig
       * </pre>
       *
       * <code>repeated bytes ownership_ids = 6;</code>
       * @param index The index to set the value at.
       * @param value The ownershipIds to set.
       * @return This builder for chaining.
       */
      public Builder setOwnershipIds(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureOwnershipIdsIsMutable();
        ownershipIds_.set(index, value);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * list of ownership identifiers in case of multisig
       * </pre>
       *
       * <code>repeated bytes ownership_ids = 6;</code>
       * @param value The ownershipIds to add.
       * @return This builder for chaining.
       */
      public Builder addOwnershipIds(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureOwnershipIdsIsMutable();
        ownershipIds_.add(value);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * list of ownership identifiers in case of multisig
       * </pre>
       *
       * <code>repeated bytes ownership_ids = 6;</code>
       * @param values The ownershipIds to add.
       * @return This builder for chaining.
       */
      public Builder addAllOwnershipIds(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureOwnershipIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, ownershipIds_);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * list of ownership identifiers in case of multisig
       * </pre>
       *
       * <code>repeated bytes ownership_ids = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearOwnershipIds() {
        ownershipIds_ = emptyList(com.google.protobuf.ByteString.class);
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString commitmentData_ = com.google.protobuf.Internal.bytesDefaultValue("");
      /**
       * <pre>
       * additional data to which the proof should commit
       * </pre>
       *
       * <code>optional bytes commitment_data = 7 [default = ""];</code>
       * @return Whether the commitmentData field is set.
       */
      @java.lang.Override
      public boolean hasCommitmentData() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * additional data to which the proof should commit
       * </pre>
       *
       * <code>optional bytes commitment_data = 7 [default = ""];</code>
       * @return The commitmentData.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getCommitmentData() {
        return commitmentData_;
      }
      /**
       * <pre>
       * additional data to which the proof should commit
       * </pre>
       *
       * <code>optional bytes commitment_data = 7 [default = ""];</code>
       * @param value The commitmentData to set.
       * @return This builder for chaining.
       */
      public Builder setCommitmentData(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        commitmentData_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * additional data to which the proof should commit
       * </pre>
       *
       * <code>optional bytes commitment_data = 7 [default = ""];</code>
       * @return This builder for chaining.
       */
      public Builder clearCommitmentData() {
        bitField0_ = (bitField0_ & ~0x00000040);
        commitmentData_ = getDefaultInstance().getCommitmentData();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.GetOwnershipProof)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.GetOwnershipProof)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GetOwnershipProof>
        PARSER = new com.google.protobuf.AbstractParser<GetOwnershipProof>() {
      @java.lang.Override
      public GetOwnershipProof parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<GetOwnershipProof> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GetOwnershipProof> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.GetOwnershipProof getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OwnershipProofOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.OwnershipProof)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * SLIP-0019 proof of ownership
     * </pre>
     *
     * <code>required bytes ownership_proof = 1;</code>
     * @return Whether the ownershipProof field is set.
     */
    boolean hasOwnershipProof();
    /**
     * <pre>
     * SLIP-0019 proof of ownership
     * </pre>
     *
     * <code>required bytes ownership_proof = 1;</code>
     * @return The ownershipProof.
     */
    com.google.protobuf.ByteString getOwnershipProof();

    /**
     * <pre>
     * signature of the proof
     * </pre>
     *
     * <code>required bytes signature = 2;</code>
     * @return Whether the signature field is set.
     */
    boolean hasSignature();
    /**
     * <pre>
     * signature of the proof
     * </pre>
     *
     * <code>required bytes signature = 2;</code>
     * @return The signature.
     */
    com.google.protobuf.ByteString getSignature();
  }
  /**
   * <pre>
   * *
   * Response: Contains the proof of ownership
   * &#64;end
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.OwnershipProof}
   */
  public static final class OwnershipProof extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.OwnershipProof)
      OwnershipProofOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        OwnershipProof.class.getName());
    }
    // Use OwnershipProof.newBuilder() to construct.
    private OwnershipProof(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private OwnershipProof() {
      ownershipProof_ = com.google.protobuf.ByteString.EMPTY;
      signature_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_OwnershipProof_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_OwnershipProof_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof.Builder.class);
    }

    private int bitField0_;
    public static final int OWNERSHIP_PROOF_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString ownershipProof_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * SLIP-0019 proof of ownership
     * </pre>
     *
     * <code>required bytes ownership_proof = 1;</code>
     * @return Whether the ownershipProof field is set.
     */
    @java.lang.Override
    public boolean hasOwnershipProof() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * SLIP-0019 proof of ownership
     * </pre>
     *
     * <code>required bytes ownership_proof = 1;</code>
     * @return The ownershipProof.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getOwnershipProof() {
      return ownershipProof_;
    }

    public static final int SIGNATURE_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * signature of the proof
     * </pre>
     *
     * <code>required bytes signature = 2;</code>
     * @return Whether the signature field is set.
     */
    @java.lang.Override
    public boolean hasSignature() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * signature of the proof
     * </pre>
     *
     * <code>required bytes signature = 2;</code>
     * @return The signature.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSignature() {
      return signature_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasOwnershipProof()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSignature()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBytes(1, ownershipProof_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBytes(2, signature_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, ownershipProof_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, signature_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof) obj;

      if (hasOwnershipProof() != other.hasOwnershipProof()) return false;
      if (hasOwnershipProof()) {
        if (!getOwnershipProof()
            .equals(other.getOwnershipProof())) return false;
      }
      if (hasSignature() != other.hasSignature()) return false;
      if (hasSignature()) {
        if (!getSignature()
            .equals(other.getSignature())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasOwnershipProof()) {
        hash = (37 * hash) + OWNERSHIP_PROOF_FIELD_NUMBER;
        hash = (53 * hash) + getOwnershipProof().hashCode();
      }
      if (hasSignature()) {
        hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
        hash = (53 * hash) + getSignature().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Response: Contains the proof of ownership
     * &#64;end
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.OwnershipProof}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.OwnershipProof)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProofOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_OwnershipProof_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_OwnershipProof_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        ownershipProof_ = com.google.protobuf.ByteString.EMPTY;
        signature_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_OwnershipProof_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.ownershipProof_ = ownershipProof_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.signature_ = signature_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof.getDefaultInstance()) return this;
        if (other.hasOwnershipProof()) {
          setOwnershipProof(other.getOwnershipProof());
        }
        if (other.hasSignature()) {
          setSignature(other.getSignature());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasOwnershipProof()) {
          return false;
        }
        if (!hasSignature()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                ownershipProof_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                signature_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString ownershipProof_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * SLIP-0019 proof of ownership
       * </pre>
       *
       * <code>required bytes ownership_proof = 1;</code>
       * @return Whether the ownershipProof field is set.
       */
      @java.lang.Override
      public boolean hasOwnershipProof() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * SLIP-0019 proof of ownership
       * </pre>
       *
       * <code>required bytes ownership_proof = 1;</code>
       * @return The ownershipProof.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getOwnershipProof() {
        return ownershipProof_;
      }
      /**
       * <pre>
       * SLIP-0019 proof of ownership
       * </pre>
       *
       * <code>required bytes ownership_proof = 1;</code>
       * @param value The ownershipProof to set.
       * @return This builder for chaining.
       */
      public Builder setOwnershipProof(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ownershipProof_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * SLIP-0019 proof of ownership
       * </pre>
       *
       * <code>required bytes ownership_proof = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearOwnershipProof() {
        bitField0_ = (bitField0_ & ~0x00000001);
        ownershipProof_ = getDefaultInstance().getOwnershipProof();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * signature of the proof
       * </pre>
       *
       * <code>required bytes signature = 2;</code>
       * @return Whether the signature field is set.
       */
      @java.lang.Override
      public boolean hasSignature() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * signature of the proof
       * </pre>
       *
       * <code>required bytes signature = 2;</code>
       * @return The signature.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSignature() {
        return signature_;
      }
      /**
       * <pre>
       * signature of the proof
       * </pre>
       *
       * <code>required bytes signature = 2;</code>
       * @param value The signature to set.
       * @return This builder for chaining.
       */
      public Builder setSignature(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        signature_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * signature of the proof
       * </pre>
       *
       * <code>required bytes signature = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSignature() {
        bitField0_ = (bitField0_ & ~0x00000002);
        signature_ = getDefaultInstance().getSignature();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.OwnershipProof)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.OwnershipProof)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OwnershipProof>
        PARSER = new com.google.protobuf.AbstractParser<OwnershipProof>() {
      @java.lang.Override
      public OwnershipProof parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<OwnershipProof> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OwnershipProof> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.OwnershipProof getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AuthorizeCoinJoinOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hw.trezor.messages.bitcoin.AuthorizeCoinJoin)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * coordinator identifier to approve as a prefix in commitment data (max. 36 ASCII characters)
     * </pre>
     *
     * <code>required string coordinator = 1;</code>
     * @return Whether the coordinator field is set.
     */
    boolean hasCoordinator();
    /**
     * <pre>
     * coordinator identifier to approve as a prefix in commitment data (max. 36 ASCII characters)
     * </pre>
     *
     * <code>required string coordinator = 1;</code>
     * @return The coordinator.
     */
    java.lang.String getCoordinator();
    /**
     * <pre>
     * coordinator identifier to approve as a prefix in commitment data (max. 36 ASCII characters)
     * </pre>
     *
     * <code>required string coordinator = 1;</code>
     * @return The bytes for coordinator.
     */
    com.google.protobuf.ByteString
        getCoordinatorBytes();

    /**
     * <pre>
     * maximum number of rounds that Trezor is authorized to take part in
     * </pre>
     *
     * <code>required uint64 max_rounds = 2;</code>
     * @return Whether the maxRounds field is set.
     */
    boolean hasMaxRounds();
    /**
     * <pre>
     * maximum number of rounds that Trezor is authorized to take part in
     * </pre>
     *
     * <code>required uint64 max_rounds = 2;</code>
     * @return The maxRounds.
     */
    long getMaxRounds();

    /**
     * <pre>
     * maximum coordination fee rate in units of 10^-6 percent
     * </pre>
     *
     * <code>required uint32 max_coordinator_fee_rate = 3;</code>
     * @return Whether the maxCoordinatorFeeRate field is set.
     */
    boolean hasMaxCoordinatorFeeRate();
    /**
     * <pre>
     * maximum coordination fee rate in units of 10^-6 percent
     * </pre>
     *
     * <code>required uint32 max_coordinator_fee_rate = 3;</code>
     * @return The maxCoordinatorFeeRate.
     */
    int getMaxCoordinatorFeeRate();

    /**
     * <pre>
     * maximum mining fee rate in units of satoshis per 1000 vbytes
     * </pre>
     *
     * <code>required uint32 max_fee_per_kvbyte = 4;</code>
     * @return Whether the maxFeePerKvbyte field is set.
     */
    boolean hasMaxFeePerKvbyte();
    /**
     * <pre>
     * maximum mining fee rate in units of satoshis per 1000 vbytes
     * </pre>
     *
     * <code>required uint32 max_fee_per_kvbyte = 4;</code>
     * @return The maxFeePerKvbyte.
     */
    int getMaxFeePerKvbyte();

    /**
     * <pre>
     * prefix of the BIP-32 path leading to the account (m / purpose' / coin_type' / account')
     * </pre>
     *
     * <code>repeated uint32 address_n = 5;</code>
     * @return A list containing the addressN.
     */
    java.util.List<java.lang.Integer> getAddressNList();
    /**
     * <pre>
     * prefix of the BIP-32 path leading to the account (m / purpose' / coin_type' / account')
     * </pre>
     *
     * <code>repeated uint32 address_n = 5;</code>
     * @return The count of addressN.
     */
    int getAddressNCount();
    /**
     * <pre>
     * prefix of the BIP-32 path leading to the account (m / purpose' / coin_type' / account')
     * </pre>
     *
     * <code>repeated uint32 address_n = 5;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    int getAddressN(int index);

    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 6 [default = "Bitcoin"];</code>
     * @return Whether the coinName field is set.
     */
    boolean hasCoinName();
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 6 [default = "Bitcoin"];</code>
     * @return The coinName.
     */
    java.lang.String getCoinName();
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 6 [default = "Bitcoin"];</code>
     * @return The bytes for coinName.
     */
    com.google.protobuf.ByteString
        getCoinNameBytes();

    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 7 [default = SPENDADDRESS];</code>
     * @return Whether the scriptType field is set.
     */
    boolean hasScriptType();
    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 7 [default = SPENDADDRESS];</code>
     * @return The scriptType.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType();

    /**
     * <pre>
     * show amounts in
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.AmountUnit amount_unit = 8 [default = BITCOIN];</code>
     * @return Whether the amountUnit field is set.
     */
    boolean hasAmountUnit();
    /**
     * <pre>
     * show amounts in
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.AmountUnit amount_unit = 8 [default = BITCOIN];</code>
     * @return The amountUnit.
     */
    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit getAmountUnit();
  }
  /**
   * <pre>
   * *
   * Request: Ask device to prompt the user to authorize a CoinJoin transaction
   * &#64;start
   * &#64;next Success
   * &#64;next Failure
   * </pre>
   *
   * Protobuf type {@code hw.trezor.messages.bitcoin.AuthorizeCoinJoin}
   */
  public static final class AuthorizeCoinJoin extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:hw.trezor.messages.bitcoin.AuthorizeCoinJoin)
      AuthorizeCoinJoinOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        AuthorizeCoinJoin.class.getName());
    }
    // Use AuthorizeCoinJoin.newBuilder() to construct.
    private AuthorizeCoinJoin(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private AuthorizeCoinJoin() {
      coordinator_ = "";
      addressN_ = emptyIntList();
      coinName_ = "Bitcoin";
      scriptType_ = 0;
      amountUnit_ = 0;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_AuthorizeCoinJoin_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_AuthorizeCoinJoin_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin.Builder.class);
    }

    private int bitField0_;
    public static final int COORDINATOR_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object coordinator_ = "";
    /**
     * <pre>
     * coordinator identifier to approve as a prefix in commitment data (max. 36 ASCII characters)
     * </pre>
     *
     * <code>required string coordinator = 1;</code>
     * @return Whether the coordinator field is set.
     */
    @java.lang.Override
    public boolean hasCoordinator() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * coordinator identifier to approve as a prefix in commitment data (max. 36 ASCII characters)
     * </pre>
     *
     * <code>required string coordinator = 1;</code>
     * @return The coordinator.
     */
    @java.lang.Override
    public java.lang.String getCoordinator() {
      java.lang.Object ref = coordinator_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          coordinator_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * coordinator identifier to approve as a prefix in commitment data (max. 36 ASCII characters)
     * </pre>
     *
     * <code>required string coordinator = 1;</code>
     * @return The bytes for coordinator.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCoordinatorBytes() {
      java.lang.Object ref = coordinator_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        coordinator_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MAX_ROUNDS_FIELD_NUMBER = 2;
    private long maxRounds_ = 0L;
    /**
     * <pre>
     * maximum number of rounds that Trezor is authorized to take part in
     * </pre>
     *
     * <code>required uint64 max_rounds = 2;</code>
     * @return Whether the maxRounds field is set.
     */
    @java.lang.Override
    public boolean hasMaxRounds() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * maximum number of rounds that Trezor is authorized to take part in
     * </pre>
     *
     * <code>required uint64 max_rounds = 2;</code>
     * @return The maxRounds.
     */
    @java.lang.Override
    public long getMaxRounds() {
      return maxRounds_;
    }

    public static final int MAX_COORDINATOR_FEE_RATE_FIELD_NUMBER = 3;
    private int maxCoordinatorFeeRate_ = 0;
    /**
     * <pre>
     * maximum coordination fee rate in units of 10^-6 percent
     * </pre>
     *
     * <code>required uint32 max_coordinator_fee_rate = 3;</code>
     * @return Whether the maxCoordinatorFeeRate field is set.
     */
    @java.lang.Override
    public boolean hasMaxCoordinatorFeeRate() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * maximum coordination fee rate in units of 10^-6 percent
     * </pre>
     *
     * <code>required uint32 max_coordinator_fee_rate = 3;</code>
     * @return The maxCoordinatorFeeRate.
     */
    @java.lang.Override
    public int getMaxCoordinatorFeeRate() {
      return maxCoordinatorFeeRate_;
    }

    public static final int MAX_FEE_PER_KVBYTE_FIELD_NUMBER = 4;
    private int maxFeePerKvbyte_ = 0;
    /**
     * <pre>
     * maximum mining fee rate in units of satoshis per 1000 vbytes
     * </pre>
     *
     * <code>required uint32 max_fee_per_kvbyte = 4;</code>
     * @return Whether the maxFeePerKvbyte field is set.
     */
    @java.lang.Override
    public boolean hasMaxFeePerKvbyte() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * maximum mining fee rate in units of satoshis per 1000 vbytes
     * </pre>
     *
     * <code>required uint32 max_fee_per_kvbyte = 4;</code>
     * @return The maxFeePerKvbyte.
     */
    @java.lang.Override
    public int getMaxFeePerKvbyte() {
      return maxFeePerKvbyte_;
    }

    public static final int ADDRESS_N_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList addressN_ =
        emptyIntList();
    /**
     * <pre>
     * prefix of the BIP-32 path leading to the account (m / purpose' / coin_type' / account')
     * </pre>
     *
     * <code>repeated uint32 address_n = 5;</code>
     * @return A list containing the addressN.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getAddressNList() {
      return addressN_;
    }
    /**
     * <pre>
     * prefix of the BIP-32 path leading to the account (m / purpose' / coin_type' / account')
     * </pre>
     *
     * <code>repeated uint32 address_n = 5;</code>
     * @return The count of addressN.
     */
    public int getAddressNCount() {
      return addressN_.size();
    }
    /**
     * <pre>
     * prefix of the BIP-32 path leading to the account (m / purpose' / coin_type' / account')
     * </pre>
     *
     * <code>repeated uint32 address_n = 5;</code>
     * @param index The index of the element to return.
     * @return The addressN at the given index.
     */
    public int getAddressN(int index) {
      return addressN_.getInt(index);
    }

    public static final int COIN_NAME_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private volatile java.lang.Object coinName_ = "Bitcoin";
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 6 [default = "Bitcoin"];</code>
     * @return Whether the coinName field is set.
     */
    @java.lang.Override
    public boolean hasCoinName() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 6 [default = "Bitcoin"];</code>
     * @return The coinName.
     */
    @java.lang.Override
    public java.lang.String getCoinName() {
      java.lang.Object ref = coinName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          coinName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * coin to use
     * </pre>
     *
     * <code>optional string coin_name = 6 [default = "Bitcoin"];</code>
     * @return The bytes for coinName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCoinNameBytes() {
      java.lang.Object ref = coinName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        coinName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCRIPT_TYPE_FIELD_NUMBER = 7;
    private int scriptType_ = 0;
    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 7 [default = SPENDADDRESS];</code>
     * @return Whether the scriptType field is set.
     */
    @java.lang.Override public boolean hasScriptType() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * used to distinguish between various address formats (non-segwit, segwit, etc.)
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 7 [default = SPENDADDRESS];</code>
     * @return The scriptType.
     */
    @java.lang.Override public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType() {
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(scriptType_);
      return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.SPENDADDRESS : result;
    }

    public static final int AMOUNT_UNIT_FIELD_NUMBER = 8;
    private int amountUnit_ = 0;
    /**
     * <pre>
     * show amounts in
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.AmountUnit amount_unit = 8 [default = BITCOIN];</code>
     * @return Whether the amountUnit field is set.
     */
    @java.lang.Override public boolean hasAmountUnit() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * show amounts in
     * </pre>
     *
     * <code>optional .hw.trezor.messages.bitcoin.AmountUnit amount_unit = 8 [default = BITCOIN];</code>
     * @return The amountUnit.
     */
    @java.lang.Override public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit getAmountUnit() {
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit.forNumber(amountUnit_);
      return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit.BITCOIN : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCoordinator()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMaxRounds()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMaxCoordinatorFeeRate()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMaxFeePerKvbyte()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, coordinator_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt64(2, maxRounds_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeUInt32(3, maxCoordinatorFeeRate_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeUInt32(4, maxFeePerKvbyte_);
      }
      for (int i = 0; i < addressN_.size(); i++) {
        output.writeUInt32(5, addressN_.getInt(i));
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 6, coinName_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeEnum(7, scriptType_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeEnum(8, amountUnit_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, coordinator_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, maxRounds_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, maxCoordinatorFeeRate_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, maxFeePerKvbyte_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < addressN_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(addressN_.getInt(i));
        }
        size += dataSize;
        size += 1 * getAddressNList().size();
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(6, coinName_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, scriptType_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, amountUnit_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin other = (com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin) obj;

      if (hasCoordinator() != other.hasCoordinator()) return false;
      if (hasCoordinator()) {
        if (!getCoordinator()
            .equals(other.getCoordinator())) return false;
      }
      if (hasMaxRounds() != other.hasMaxRounds()) return false;
      if (hasMaxRounds()) {
        if (getMaxRounds()
            != other.getMaxRounds()) return false;
      }
      if (hasMaxCoordinatorFeeRate() != other.hasMaxCoordinatorFeeRate()) return false;
      if (hasMaxCoordinatorFeeRate()) {
        if (getMaxCoordinatorFeeRate()
            != other.getMaxCoordinatorFeeRate()) return false;
      }
      if (hasMaxFeePerKvbyte() != other.hasMaxFeePerKvbyte()) return false;
      if (hasMaxFeePerKvbyte()) {
        if (getMaxFeePerKvbyte()
            != other.getMaxFeePerKvbyte()) return false;
      }
      if (!getAddressNList()
          .equals(other.getAddressNList())) return false;
      if (hasCoinName() != other.hasCoinName()) return false;
      if (hasCoinName()) {
        if (!getCoinName()
            .equals(other.getCoinName())) return false;
      }
      if (hasScriptType() != other.hasScriptType()) return false;
      if (hasScriptType()) {
        if (scriptType_ != other.scriptType_) return false;
      }
      if (hasAmountUnit() != other.hasAmountUnit()) return false;
      if (hasAmountUnit()) {
        if (amountUnit_ != other.amountUnit_) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCoordinator()) {
        hash = (37 * hash) + COORDINATOR_FIELD_NUMBER;
        hash = (53 * hash) + getCoordinator().hashCode();
      }
      if (hasMaxRounds()) {
        hash = (37 * hash) + MAX_ROUNDS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getMaxRounds());
      }
      if (hasMaxCoordinatorFeeRate()) {
        hash = (37 * hash) + MAX_COORDINATOR_FEE_RATE_FIELD_NUMBER;
        hash = (53 * hash) + getMaxCoordinatorFeeRate();
      }
      if (hasMaxFeePerKvbyte()) {
        hash = (37 * hash) + MAX_FEE_PER_KVBYTE_FIELD_NUMBER;
        hash = (53 * hash) + getMaxFeePerKvbyte();
      }
      if (getAddressNCount() > 0) {
        hash = (37 * hash) + ADDRESS_N_FIELD_NUMBER;
        hash = (53 * hash) + getAddressNList().hashCode();
      }
      if (hasCoinName()) {
        hash = (37 * hash) + COIN_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getCoinName().hashCode();
      }
      if (hasScriptType()) {
        hash = (37 * hash) + SCRIPT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + scriptType_;
      }
      if (hasAmountUnit()) {
        hash = (37 * hash) + AMOUNT_UNIT_FIELD_NUMBER;
        hash = (53 * hash) + amountUnit_;
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Request: Ask device to prompt the user to authorize a CoinJoin transaction
     * &#64;start
     * &#64;next Success
     * &#64;next Failure
     * </pre>
     *
     * Protobuf type {@code hw.trezor.messages.bitcoin.AuthorizeCoinJoin}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hw.trezor.messages.bitcoin.AuthorizeCoinJoin)
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoinOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_AuthorizeCoinJoin_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_AuthorizeCoinJoin_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin.class, com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        coordinator_ = "";
        maxRounds_ = 0L;
        maxCoordinatorFeeRate_ = 0;
        maxFeePerKvbyte_ = 0;
        addressN_ = emptyIntList();
        coinName_ = "Bitcoin";
        scriptType_ = 0;
        amountUnit_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.internal_static_hw_trezor_messages_bitcoin_AuthorizeCoinJoin_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin getDefaultInstanceForType() {
        return com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin build() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin buildPartial() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin result = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.coordinator_ = coordinator_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.maxRounds_ = maxRounds_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.maxCoordinatorFeeRate_ = maxCoordinatorFeeRate_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.maxFeePerKvbyte_ = maxFeePerKvbyte_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          addressN_.makeImmutable();
          result.addressN_ = addressN_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.coinName_ = coinName_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.scriptType_ = scriptType_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.amountUnit_ = amountUnit_;
          to_bitField0_ |= 0x00000040;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin) {
          return mergeFrom((com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin other) {
        if (other == com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin.getDefaultInstance()) return this;
        if (other.hasCoordinator()) {
          coordinator_ = other.coordinator_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasMaxRounds()) {
          setMaxRounds(other.getMaxRounds());
        }
        if (other.hasMaxCoordinatorFeeRate()) {
          setMaxCoordinatorFeeRate(other.getMaxCoordinatorFeeRate());
        }
        if (other.hasMaxFeePerKvbyte()) {
          setMaxFeePerKvbyte(other.getMaxFeePerKvbyte());
        }
        if (!other.addressN_.isEmpty()) {
          if (addressN_.isEmpty()) {
            addressN_ = other.addressN_;
            addressN_.makeImmutable();
            bitField0_ |= 0x00000010;
          } else {
            ensureAddressNIsMutable();
            addressN_.addAll(other.addressN_);
          }
          onChanged();
        }
        if (other.hasCoinName()) {
          coinName_ = other.coinName_;
          bitField0_ |= 0x00000020;
          onChanged();
        }
        if (other.hasScriptType()) {
          setScriptType(other.getScriptType());
        }
        if (other.hasAmountUnit()) {
          setAmountUnit(other.getAmountUnit());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasCoordinator()) {
          return false;
        }
        if (!hasMaxRounds()) {
          return false;
        }
        if (!hasMaxCoordinatorFeeRate()) {
          return false;
        }
        if (!hasMaxFeePerKvbyte()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                coordinator_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                maxRounds_ = input.readUInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                maxCoordinatorFeeRate_ = input.readUInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                maxFeePerKvbyte_ = input.readUInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                int v = input.readUInt32();
                ensureAddressNIsMutable();
                addressN_.addInt(v);
                break;
              } // case 40
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureAddressNIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  addressN_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 42
              case 50: {
                coinName_ = input.readBytes();
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              case 56: {
                int tmpRaw = input.readEnum();
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType tmpValue =
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(7, tmpRaw);
                } else {
                  scriptType_ = tmpRaw;
                  bitField0_ |= 0x00000040;
                }
                break;
              } // case 56
              case 64: {
                int tmpRaw = input.readEnum();
                com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit tmpValue =
                    com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(8, tmpRaw);
                } else {
                  amountUnit_ = tmpRaw;
                  bitField0_ |= 0x00000080;
                }
                break;
              } // case 64
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object coordinator_ = "";
      /**
       * <pre>
       * coordinator identifier to approve as a prefix in commitment data (max. 36 ASCII characters)
       * </pre>
       *
       * <code>required string coordinator = 1;</code>
       * @return Whether the coordinator field is set.
       */
      public boolean hasCoordinator() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * coordinator identifier to approve as a prefix in commitment data (max. 36 ASCII characters)
       * </pre>
       *
       * <code>required string coordinator = 1;</code>
       * @return The coordinator.
       */
      public java.lang.String getCoordinator() {
        java.lang.Object ref = coordinator_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            coordinator_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * coordinator identifier to approve as a prefix in commitment data (max. 36 ASCII characters)
       * </pre>
       *
       * <code>required string coordinator = 1;</code>
       * @return The bytes for coordinator.
       */
      public com.google.protobuf.ByteString
          getCoordinatorBytes() {
        java.lang.Object ref = coordinator_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          coordinator_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * coordinator identifier to approve as a prefix in commitment data (max. 36 ASCII characters)
       * </pre>
       *
       * <code>required string coordinator = 1;</code>
       * @param value The coordinator to set.
       * @return This builder for chaining.
       */
      public Builder setCoordinator(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        coordinator_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coordinator identifier to approve as a prefix in commitment data (max. 36 ASCII characters)
       * </pre>
       *
       * <code>required string coordinator = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCoordinator() {
        coordinator_ = getDefaultInstance().getCoordinator();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coordinator identifier to approve as a prefix in commitment data (max. 36 ASCII characters)
       * </pre>
       *
       * <code>required string coordinator = 1;</code>
       * @param value The bytes for coordinator to set.
       * @return This builder for chaining.
       */
      public Builder setCoordinatorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        coordinator_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private long maxRounds_ ;
      /**
       * <pre>
       * maximum number of rounds that Trezor is authorized to take part in
       * </pre>
       *
       * <code>required uint64 max_rounds = 2;</code>
       * @return Whether the maxRounds field is set.
       */
      @java.lang.Override
      public boolean hasMaxRounds() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * maximum number of rounds that Trezor is authorized to take part in
       * </pre>
       *
       * <code>required uint64 max_rounds = 2;</code>
       * @return The maxRounds.
       */
      @java.lang.Override
      public long getMaxRounds() {
        return maxRounds_;
      }
      /**
       * <pre>
       * maximum number of rounds that Trezor is authorized to take part in
       * </pre>
       *
       * <code>required uint64 max_rounds = 2;</code>
       * @param value The maxRounds to set.
       * @return This builder for chaining.
       */
      public Builder setMaxRounds(long value) {

        maxRounds_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * maximum number of rounds that Trezor is authorized to take part in
       * </pre>
       *
       * <code>required uint64 max_rounds = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxRounds() {
        bitField0_ = (bitField0_ & ~0x00000002);
        maxRounds_ = 0L;
        onChanged();
        return this;
      }

      private int maxCoordinatorFeeRate_ ;
      /**
       * <pre>
       * maximum coordination fee rate in units of 10^-6 percent
       * </pre>
       *
       * <code>required uint32 max_coordinator_fee_rate = 3;</code>
       * @return Whether the maxCoordinatorFeeRate field is set.
       */
      @java.lang.Override
      public boolean hasMaxCoordinatorFeeRate() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * maximum coordination fee rate in units of 10^-6 percent
       * </pre>
       *
       * <code>required uint32 max_coordinator_fee_rate = 3;</code>
       * @return The maxCoordinatorFeeRate.
       */
      @java.lang.Override
      public int getMaxCoordinatorFeeRate() {
        return maxCoordinatorFeeRate_;
      }
      /**
       * <pre>
       * maximum coordination fee rate in units of 10^-6 percent
       * </pre>
       *
       * <code>required uint32 max_coordinator_fee_rate = 3;</code>
       * @param value The maxCoordinatorFeeRate to set.
       * @return This builder for chaining.
       */
      public Builder setMaxCoordinatorFeeRate(int value) {

        maxCoordinatorFeeRate_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * maximum coordination fee rate in units of 10^-6 percent
       * </pre>
       *
       * <code>required uint32 max_coordinator_fee_rate = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxCoordinatorFeeRate() {
        bitField0_ = (bitField0_ & ~0x00000004);
        maxCoordinatorFeeRate_ = 0;
        onChanged();
        return this;
      }

      private int maxFeePerKvbyte_ ;
      /**
       * <pre>
       * maximum mining fee rate in units of satoshis per 1000 vbytes
       * </pre>
       *
       * <code>required uint32 max_fee_per_kvbyte = 4;</code>
       * @return Whether the maxFeePerKvbyte field is set.
       */
      @java.lang.Override
      public boolean hasMaxFeePerKvbyte() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * maximum mining fee rate in units of satoshis per 1000 vbytes
       * </pre>
       *
       * <code>required uint32 max_fee_per_kvbyte = 4;</code>
       * @return The maxFeePerKvbyte.
       */
      @java.lang.Override
      public int getMaxFeePerKvbyte() {
        return maxFeePerKvbyte_;
      }
      /**
       * <pre>
       * maximum mining fee rate in units of satoshis per 1000 vbytes
       * </pre>
       *
       * <code>required uint32 max_fee_per_kvbyte = 4;</code>
       * @param value The maxFeePerKvbyte to set.
       * @return This builder for chaining.
       */
      public Builder setMaxFeePerKvbyte(int value) {

        maxFeePerKvbyte_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * maximum mining fee rate in units of satoshis per 1000 vbytes
       * </pre>
       *
       * <code>required uint32 max_fee_per_kvbyte = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxFeePerKvbyte() {
        bitField0_ = (bitField0_ & ~0x00000008);
        maxFeePerKvbyte_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList addressN_ = emptyIntList();
      private void ensureAddressNIsMutable() {
        if (!addressN_.isModifiable()) {
          addressN_ = makeMutableCopy(addressN_);
        }
        bitField0_ |= 0x00000010;
      }
      /**
       * <pre>
       * prefix of the BIP-32 path leading to the account (m / purpose' / coin_type' / account')
       * </pre>
       *
       * <code>repeated uint32 address_n = 5;</code>
       * @return A list containing the addressN.
       */
      public java.util.List<java.lang.Integer>
          getAddressNList() {
        addressN_.makeImmutable();
        return addressN_;
      }
      /**
       * <pre>
       * prefix of the BIP-32 path leading to the account (m / purpose' / coin_type' / account')
       * </pre>
       *
       * <code>repeated uint32 address_n = 5;</code>
       * @return The count of addressN.
       */
      public int getAddressNCount() {
        return addressN_.size();
      }
      /**
       * <pre>
       * prefix of the BIP-32 path leading to the account (m / purpose' / coin_type' / account')
       * </pre>
       *
       * <code>repeated uint32 address_n = 5;</code>
       * @param index The index of the element to return.
       * @return The addressN at the given index.
       */
      public int getAddressN(int index) {
        return addressN_.getInt(index);
      }
      /**
       * <pre>
       * prefix of the BIP-32 path leading to the account (m / purpose' / coin_type' / account')
       * </pre>
       *
       * <code>repeated uint32 address_n = 5;</code>
       * @param index The index to set the value at.
       * @param value The addressN to set.
       * @return This builder for chaining.
       */
      public Builder setAddressN(
          int index, int value) {

        ensureAddressNIsMutable();
        addressN_.setInt(index, value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * prefix of the BIP-32 path leading to the account (m / purpose' / coin_type' / account')
       * </pre>
       *
       * <code>repeated uint32 address_n = 5;</code>
       * @param value The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAddressN(int value) {

        ensureAddressNIsMutable();
        addressN_.addInt(value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * prefix of the BIP-32 path leading to the account (m / purpose' / coin_type' / account')
       * </pre>
       *
       * <code>repeated uint32 address_n = 5;</code>
       * @param values The addressN to add.
       * @return This builder for chaining.
       */
      public Builder addAllAddressN(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAddressNIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, addressN_);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * prefix of the BIP-32 path leading to the account (m / purpose' / coin_type' / account')
       * </pre>
       *
       * <code>repeated uint32 address_n = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearAddressN() {
        addressN_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private java.lang.Object coinName_ = "Bitcoin";
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 6 [default = "Bitcoin"];</code>
       * @return Whether the coinName field is set.
       */
      public boolean hasCoinName() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 6 [default = "Bitcoin"];</code>
       * @return The coinName.
       */
      public java.lang.String getCoinName() {
        java.lang.Object ref = coinName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            coinName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 6 [default = "Bitcoin"];</code>
       * @return The bytes for coinName.
       */
      public com.google.protobuf.ByteString
          getCoinNameBytes() {
        java.lang.Object ref = coinName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          coinName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 6 [default = "Bitcoin"];</code>
       * @param value The coinName to set.
       * @return This builder for chaining.
       */
      public Builder setCoinName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        coinName_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 6 [default = "Bitcoin"];</code>
       * @return This builder for chaining.
       */
      public Builder clearCoinName() {
        coinName_ = getDefaultInstance().getCoinName();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * coin to use
       * </pre>
       *
       * <code>optional string coin_name = 6 [default = "Bitcoin"];</code>
       * @param value The bytes for coinName to set.
       * @return This builder for chaining.
       */
      public Builder setCoinNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        coinName_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }

      private int scriptType_ = 0;
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 7 [default = SPENDADDRESS];</code>
       * @return Whether the scriptType field is set.
       */
      @java.lang.Override public boolean hasScriptType() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 7 [default = SPENDADDRESS];</code>
       * @return The scriptType.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType getScriptType() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.forNumber(scriptType_);
        return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType.SPENDADDRESS : result;
      }
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 7 [default = SPENDADDRESS];</code>
       * @param value The scriptType to set.
       * @return This builder for chaining.
       */
      public Builder setScriptType(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.InputScriptType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        scriptType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * used to distinguish between various address formats (non-segwit, segwit, etc.)
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.InputScriptType script_type = 7 [default = SPENDADDRESS];</code>
       * @return This builder for chaining.
       */
      public Builder clearScriptType() {
        bitField0_ = (bitField0_ & ~0x00000040);
        scriptType_ = 0;
        onChanged();
        return this;
      }

      private int amountUnit_ = 0;
      /**
       * <pre>
       * show amounts in
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.AmountUnit amount_unit = 8 [default = BITCOIN];</code>
       * @return Whether the amountUnit field is set.
       */
      @java.lang.Override public boolean hasAmountUnit() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * show amounts in
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.AmountUnit amount_unit = 8 [default = BITCOIN];</code>
       * @return The amountUnit.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit getAmountUnit() {
        com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit result = com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit.forNumber(amountUnit_);
        return result == null ? com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit.BITCOIN : result;
      }
      /**
       * <pre>
       * show amounts in
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.AmountUnit amount_unit = 8 [default = BITCOIN];</code>
       * @param value The amountUnit to set.
       * @return This builder for chaining.
       */
      public Builder setAmountUnit(com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AmountUnit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        amountUnit_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * show amounts in
       * </pre>
       *
       * <code>optional .hw.trezor.messages.bitcoin.AmountUnit amount_unit = 8 [default = BITCOIN];</code>
       * @return This builder for chaining.
       */
      public Builder clearAmountUnit() {
        bitField0_ = (bitField0_ & ~0x00000080);
        amountUnit_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hw.trezor.messages.bitcoin.AuthorizeCoinJoin)
    }

    // @@protoc_insertion_point(class_scope:hw.trezor.messages.bitcoin.AuthorizeCoinJoin)
    private static final com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin();
    }

    public static com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AuthorizeCoinJoin>
        PARSER = new com.google.protobuf.AbstractParser<AuthorizeCoinJoin>() {
      @java.lang.Override
      public AuthorizeCoinJoin parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AuthorizeCoinJoin> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AuthorizeCoinJoin> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.trezor.generated.TrezorMessageBitcoin.AuthorizeCoinJoin getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_HDNodePathType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_HDNodePathType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_GetPublicKey_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_GetPublicKey_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_PublicKey_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_PublicKey_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_GetAddress_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_GetAddress_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_Address_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_Address_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_GetOwnershipId_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_GetOwnershipId_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_OwnershipId_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_OwnershipId_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_SignMessage_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_SignMessage_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_MessageSignature_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_MessageSignature_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_VerifyMessage_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_VerifyMessage_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_SignTx_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_SignTx_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_SignTx_CoinJoinRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_SignTx_CoinJoinRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestDetailsType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestDetailsType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestSerializedType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestSerializedType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAck_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAck_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxInputType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxInputType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputBinType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputBinType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxInput_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxInput_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxOutput_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxOutput_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_PrevTx_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_PrevTx_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_PrevInput_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_PrevInput_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_PrevOutput_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_PrevOutput_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_PaymentRequestMemo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_PaymentRequestMemo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_TextMemo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_TextMemo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_RefundMemo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_RefundMemo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_CoinPurchaseMemo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_CoinPurchaseMemo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAckInput_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAckInput_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAckInput_TxAckInputWrapper_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAckInput_TxAckInputWrapper_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAckOutput_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAckOutput_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAckOutput_TxAckOutputWrapper_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAckOutput_TxAckOutputWrapper_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevMeta_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAckPrevMeta_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_TxAckPrevInputWrapper_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_TxAckPrevInputWrapper_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_TxAckPrevOutputWrapper_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_TxAckPrevOutputWrapper_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_TxAckPrevExtraDataWrapper_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_TxAckPrevExtraDataWrapper_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_GetOwnershipProof_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_GetOwnershipProof_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_OwnershipProof_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_OwnershipProof_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hw_trezor_messages_bitcoin_AuthorizeCoinJoin_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hw_trezor_messages_bitcoin_AuthorizeCoinJoin_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026messages-bitcoin.proto\022\032hw.trezor.mess" +
      "ages.bitcoin\032\025messages-common.proto\032\ropt" +
      "ions.proto\"\262\002\n\030MultisigRedeemScriptType\022" +
      "T\n\007pubkeys\030\001 \003(\0132C.hw.trezor.messages.bi" +
      "tcoin.MultisigRedeemScriptType.HDNodePat" +
      "hType\022\022\n\nsignatures\030\002 \003(\014\022\t\n\001m\030\003 \002(\r\0224\n\005" +
      "nodes\030\004 \003(\0132%.hw.trezor.messages.common." +
      "HDNodeType\022\021\n\taddress_n\030\005 \003(\r\032X\n\016HDNodeP" +
      "athType\0223\n\004node\030\001 \002(\0132%.hw.trezor.messag" +
      "es.common.HDNodeType\022\021\n\taddress_n\030\002 \003(\r\"" +
      "\330\001\n\014GetPublicKey\022\021\n\taddress_n\030\001 \003(\r\022\030\n\020e" +
      "cdsa_curve_name\030\002 \001(\t\022\024\n\014show_display\030\003 " +
      "\001(\010\022\032\n\tcoin_name\030\004 \001(\t:\007Bitcoin\022N\n\013scrip" +
      "t_type\030\005 \001(\0162+.hw.trezor.messages.bitcoi" +
      "n.InputScriptType:\014SPENDADDRESS\022\031\n\021ignor" +
      "e_xpub_magic\030\006 \001(\010\"\202\001\n\tPublicKey\0223\n\004node" +
      "\030\001 \002(\0132%.hw.trezor.messages.common.HDNod" +
      "eType\022\014\n\004xpub\030\002 \002(\t\022\030\n\020root_fingerprint\030" +
      "\003 \001(\r\022\030\n\020descriptor_field\030\004 \001(\t\"\226\002\n\nGetA" +
      "ddress\022\021\n\taddress_n\030\001 \003(\r\022\032\n\tcoin_name\030\002" +
      " \001(\t:\007Bitcoin\022\024\n\014show_display\030\003 \001(\010\022F\n\010m" +
      "ultisig\030\004 \001(\01324.hw.trezor.messages.bitco" +
      "in.MultisigRedeemScriptType\022N\n\013script_ty" +
      "pe\030\005 \001(\0162+.hw.trezor.messages.bitcoin.In" +
      "putScriptType:\014SPENDADDRESS\022\031\n\021ignore_xp" +
      "ub_magic\030\006 \001(\010\022\020\n\010chunkify\030\007 \001(\010\"\'\n\007Addr" +
      "ess\022\017\n\007address\030\001 \002(\t\022\013\n\003mac\030\002 \001(\014\"\327\001\n\016Ge" +
      "tOwnershipId\022\021\n\taddress_n\030\001 \003(\r\022\032\n\tcoin_" +
      "name\030\002 \001(\t:\007Bitcoin\022F\n\010multisig\030\003 \001(\01324." +
      "hw.trezor.messages.bitcoin.MultisigRedee" +
      "mScriptType\022N\n\013script_type\030\004 \001(\0162+.hw.tr" +
      "ezor.messages.bitcoin.InputScriptType:\014S" +
      "PENDADDRESS\"#\n\013OwnershipId\022\024\n\014ownership_" +
      "id\030\001 \002(\014\"\307\001\n\013SignMessage\022\021\n\taddress_n\030\001 " +
      "\003(\r\022\017\n\007message\030\002 \002(\014\022\032\n\tcoin_name\030\003 \001(\t:" +
      "\007Bitcoin\022N\n\013script_type\030\004 \001(\0162+.hw.trezo" +
      "r.messages.bitcoin.InputScriptType:\014SPEN" +
      "DADDRESS\022\026\n\016no_script_type\030\005 \001(\010\022\020\n\010chun" +
      "kify\030\006 \001(\010\"6\n\020MessageSignature\022\017\n\007addres" +
      "s\030\001 \002(\t\022\021\n\tsignature\030\002 \002(\014\"r\n\rVerifyMess" +
      "age\022\017\n\007address\030\001 \002(\t\022\021\n\tsignature\030\002 \002(\014\022" +
      "\017\n\007message\030\003 \002(\014\022\032\n\tcoin_name\030\004 \001(\t:\007Bit" +
      "coin\022\020\n\010chunkify\030\005 \001(\010\"\326\004\n\006SignTx\022\025\n\rout" +
      "puts_count\030\001 \002(\r\022\024\n\014inputs_count\030\002 \002(\r\022\032" +
      "\n\tcoin_name\030\003 \001(\t:\007Bitcoin\022\022\n\007version\030\004 " +
      "\001(\r:\0011\022\024\n\tlock_time\030\005 \001(\r:\0010\022\016\n\006expiry\030\006" +
      " \001(\r\022\030\n\014overwintered\030\007 \001(\010B\002\030\001\022\030\n\020versio" +
      "n_group_id\030\010 \001(\r\022\021\n\ttimestamp\030\t \001(\r\022\021\n\tb" +
      "ranch_id\030\n \001(\r\022D\n\013amount_unit\030\013 \001(\0162&.hw" +
      ".trezor.messages.bitcoin.AmountUnit:\007BIT" +
      "COIN\022$\n\025decred_staking_ticket\030\014 \001(\010:\005fal" +
      "se\022\027\n\tserialize\030\r \001(\010:\004true\022L\n\020coinjoin_" +
      "request\030\016 \001(\01322.hw.trezor.messages.bitco" +
      "in.SignTx.CoinJoinRequest\022\020\n\010chunkify\030\017 " +
      "\001(\010\032\211\001\n\017CoinJoinRequest\022\020\n\010fee_rate\030\001 \002(" +
      "\r\022\030\n\020no_fee_threshold\030\002 \002(\004\022\036\n\026min_regis" +
      "trable_amount\030\003 \002(\004\022\027\n\017mask_public_key\030\004" +
      " \001(\014\022\021\n\tsignature\030\005 \001(\014\"\322\004\n\tTxRequest\022G\n" +
      "\014request_type\030\001 \001(\01621.hw.trezor.messages" +
      ".bitcoin.TxRequest.RequestType\022K\n\007detail" +
      "s\030\002 \001(\0132:.hw.trezor.messages.bitcoin.TxR" +
      "equest.TxRequestDetailsType\022Q\n\nserialize" +
      "d\030\003 \001(\0132=.hw.trezor.messages.bitcoin.TxR" +
      "equest.TxRequestSerializedType\032q\n\024TxRequ" +
      "estDetailsType\022\025\n\rrequest_index\030\001 \001(\r\022\017\n" +
      "\007tx_hash\030\002 \001(\014\022\026\n\016extra_data_len\030\003 \001(\r\022\031" +
      "\n\021extra_data_offset\030\004 \001(\r\032\\\n\027TxRequestSe" +
      "rializedType\022\027\n\017signature_index\030\001 \001(\r\022\021\n" +
      "\tsignature\030\002 \001(\014\022\025\n\rserialized_tx\030\003 \001(\014\"" +
      "\212\001\n\013RequestType\022\013\n\007TXINPUT\020\000\022\014\n\010TXOUTPUT" +
      "\020\001\022\n\n\006TXMETA\020\002\022\016\n\nTXFINISHED\020\003\022\017\n\013TXEXTR" +
      "ADATA\020\004\022\017\n\013TXORIGINPUT\020\005\022\020\n\014TXORIGOUTPUT" +
      "\020\006\022\020\n\014TXPAYMENTREQ\020\007\"\367\013\n\005TxAck\022=\n\002tx\030\001 \001" +
      "(\01321.hw.trezor.messages.bitcoin.TxAck.Tr" +
      "ansactionType\032\252\013\n\017TransactionType\022\017\n\007ver" +
      "sion\030\001 \001(\r\022M\n\006inputs\030\002 \003(\0132=.hw.trezor.m" +
      "essages.bitcoin.TxAck.TransactionType.Tx" +
      "InputType\022V\n\013bin_outputs\030\003 \003(\0132A.hw.trez" +
      "or.messages.bitcoin.TxAck.TransactionTyp" +
      "e.TxOutputBinType\022\021\n\tlock_time\030\004 \001(\r\022O\n\007" +
      "outputs\030\005 \003(\0132>.hw.trezor.messages.bitco" +
      "in.TxAck.TransactionType.TxOutputType\022\022\n" +
      "\ninputs_cnt\030\006 \001(\r\022\023\n\013outputs_cnt\030\007 \001(\r\022\022" +
      "\n\nextra_data\030\010 \001(\014\022\026\n\016extra_data_len\030\t \001" +
      "(\r\022\016\n\006expiry\030\n \001(\r\022\030\n\014overwintered\030\013 \001(\010" +
      "B\002\030\001\022\030\n\020version_group_id\030\014 \001(\r\022\021\n\ttimest" +
      "amp\030\r \001(\r\022\021\n\tbranch_id\030\016 \001(\r\032\244\004\n\013TxInput" +
      "Type\022\021\n\taddress_n\030\001 \003(\r\022\021\n\tprev_hash\030\002 \002" +
      "(\014\022\022\n\nprev_index\030\003 \002(\r\022\022\n\nscript_sig\030\004 \001" +
      "(\014\022\034\n\010sequence\030\005 \001(\r:\n4294967295\022N\n\013scri" +
      "pt_type\030\006 \001(\0162+.hw.trezor.messages.bitco" +
      "in.InputScriptType:\014SPENDADDRESS\022F\n\010mult" +
      "isig\030\007 \001(\01324.hw.trezor.messages.bitcoin." +
      "MultisigRedeemScriptType\022\016\n\006amount\030\010 \001(\004" +
      "\022\023\n\013decred_tree\030\t \001(\r\022\017\n\007witness\030\r \001(\014\022\027" +
      "\n\017ownership_proof\030\016 \001(\014\022\027\n\017commitment_da" +
      "ta\030\017 \001(\014\022\021\n\torig_hash\030\020 \001(\014\022\022\n\norig_inde" +
      "x\030\021 \001(\r\022P\n\024decred_staking_spend\030\022 \001(\01622." +
      "hw.trezor.messages.bitcoin.DecredStaking" +
      "SpendType\022\025\n\rscript_pubkey\030\023 \001(\014\022\031\n\016coin" +
      "join_flags\030\024 \001(\r:\0010\032W\n\017TxOutputBinType\022\016" +
      "\n\006amount\030\001 \002(\004\022\025\n\rscript_pubkey\030\002 \002(\014\022\035\n" +
      "\025decred_script_version\030\003 \001(\r\032\273\002\n\014TxOutpu" +
      "tType\022\017\n\007address\030\001 \001(\t\022\021\n\taddress_n\030\002 \003(" +
      "\r\022\016\n\006amount\030\003 \002(\004\022O\n\013script_type\030\004 \001(\0162," +
      ".hw.trezor.messages.bitcoin.OutputScript" +
      "Type:\014PAYTOADDRESS\022F\n\010multisig\030\005 \001(\01324.h" +
      "w.trezor.messages.bitcoin.MultisigRedeem" +
      "ScriptType\022\026\n\016op_return_data\030\006 \001(\014\022\021\n\tor" +
      "ig_hash\030\n \001(\014\022\022\n\norig_index\030\013 \001(\r\022\037\n\021pay" +
      "ment_req_index\030\014 \001(\rB\004\310\360\031\001:\002\030\001\"\262\004\n\007TxInp" +
      "ut\022\021\n\taddress_n\030\001 \003(\r\022\021\n\tprev_hash\030\002 \002(\014" +
      "\022\022\n\nprev_index\030\003 \002(\r\022\022\n\nscript_sig\030\004 \001(\014" +
      "\022\034\n\010sequence\030\005 \001(\r:\n4294967295\022N\n\013script" +
      "_type\030\006 \001(\0162+.hw.trezor.messages.bitcoin" +
      ".InputScriptType:\014SPENDADDRESS\022F\n\010multis" +
      "ig\030\007 \001(\01324.hw.trezor.messages.bitcoin.Mu" +
      "ltisigRedeemScriptType\022\016\n\006amount\030\010 \002(\004\022\023" +
      "\n\013decred_tree\030\t \001(\r\022\017\n\007witness\030\r \001(\014\022\027\n\017" +
      "ownership_proof\030\016 \001(\014\022\027\n\017commitment_data" +
      "\030\017 \001(\014\022\021\n\torig_hash\030\020 \001(\014\022\022\n\norig_index\030" +
      "\021 \001(\r\022P\n\024decred_staking_spend\030\022 \001(\01622.hw" +
      ".trezor.messages.bitcoin.DecredStakingSp" +
      "endType\022\025\n\rscript_pubkey\030\023 \001(\014\022\031\n\016coinjo" +
      "in_flags\030\024 \001(\r:\0010J\004\010\n\020\013J\004\010\013\020\014J\004\010\014\020\r\"\311\002\n\010" +
      "TxOutput\022\017\n\007address\030\001 \001(\t\022\021\n\taddress_n\030\002" +
      " \003(\r\022\016\n\006amount\030\003 \002(\004\022O\n\013script_type\030\004 \001(" +
      "\0162,.hw.trezor.messages.bitcoin.OutputScr" +
      "iptType:\014PAYTOADDRESS\022F\n\010multisig\030\005 \001(\0132" +
      "4.hw.trezor.messages.bitcoin.MultisigRed" +
      "eemScriptType\022\026\n\016op_return_data\030\006 \001(\014\022\021\n" +
      "\torig_hash\030\n \001(\014\022\022\n\norig_index\030\013 \001(\r\022\037\n\021" +
      "payment_req_index\030\014 \001(\rB\004\310\360\031\001J\004\010\007\020\010J\004\010\010\020" +
      "\tJ\004\010\t\020\n\"\342\001\n\006PrevTx\022\017\n\007version\030\001 \002(\r\022\021\n\tl" +
      "ock_time\030\004 \002(\r\022\024\n\014inputs_count\030\006 \002(\r\022\025\n\r" +
      "outputs_count\030\007 \002(\r\022\031\n\016extra_data_len\030\t " +
      "\001(\r:\0010\022\016\n\006expiry\030\n \001(\r\022\030\n\020version_group_" +
      "id\030\014 \001(\r\022\021\n\ttimestamp\030\r \001(\r\022\021\n\tbranch_id" +
      "\030\016 \001(\rJ\004\010\002\020\003J\004\010\003\020\004J\004\010\005\020\006J\004\010\010\020\tJ\004\010\013\020\014\"\301\001\n" +
      "\tPrevInput\022\021\n\tprev_hash\030\002 \002(\014\022\022\n\nprev_in" +
      "dex\030\003 \002(\r\022\022\n\nscript_sig\030\004 \002(\014\022\020\n\010sequenc" +
      "e\030\005 \002(\r\022\023\n\013decred_tree\030\t \001(\rJ\004\010\001\020\002J\004\010\006\020\007" +
      "J\004\010\007\020\010J\004\010\010\020\tJ\004\010\n\020\013J\004\010\013\020\014J\004\010\014\020\rJ\004\010\r\020\016J\004\010\016" +
      "\020\017J\004\010\017\020\020J\004\010\020\020\021J\004\010\021\020\022J\004\010\022\020\023J\004\010\023\020\024\"R\n\nPrev" +
      "Output\022\016\n\006amount\030\001 \002(\004\022\025\n\rscript_pubkey\030" +
      "\002 \002(\014\022\035\n\025decred_script_version\030\003 \001(\r\"\346\004\n" +
      "\023TxAckPaymentRequest\022\r\n\005nonce\030\001 \001(\014\022\026\n\016r" +
      "ecipient_name\030\002 \002(\t\022Q\n\005memos\030\003 \003(\0132B.hw." +
      "trezor.messages.bitcoin.TxAckPaymentRequ" +
      "est.PaymentRequestMemo\022\016\n\006amount\030\004 \001(\004\022\021" +
      "\n\tsignature\030\005 \002(\014\032\220\002\n\022PaymentRequestMemo" +
      "\022K\n\ttext_memo\030\001 \001(\01328.hw.trezor.messages" +
      ".bitcoin.TxAckPaymentRequest.TextMemo\022O\n" +
      "\013refund_memo\030\002 \001(\0132:.hw.trezor.messages." +
      "bitcoin.TxAckPaymentRequest.RefundMemo\022\\" +
      "\n\022coin_purchase_memo\030\003 \001(\0132@.hw.trezor.m" +
      "essages.bitcoin.TxAckPaymentRequest.Coin" +
      "PurchaseMemo\032\030\n\010TextMemo\022\014\n\004text\030\001 \002(\t\032*" +
      "\n\nRefundMemo\022\017\n\007address\030\001 \002(\t\022\013\n\003mac\030\002 \002" +
      "(\014\032S\n\020CoinPurchaseMemo\022\021\n\tcoin_type\030\001 \002(" +
      "\r\022\016\n\006amount\030\002 \002(\t\022\017\n\007address\030\003 \002(\t\022\013\n\003ma" +
      "c\030\004 \002(\014:\004\210\262\031\001\"\241\001\n\nTxAckInput\022D\n\002tx\030\001 \002(\013" +
      "28.hw.trezor.messages.bitcoin.TxAckInput" +
      ".TxAckInputWrapper\032G\n\021TxAckInputWrapper\022" +
      "2\n\005input\030\002 \002(\0132#.hw.trezor.messages.bitc" +
      "oin.TxInput:\004\220\262\031\026\"\247\001\n\013TxAckOutput\022F\n\002tx\030" +
      "\001 \002(\0132:.hw.trezor.messages.bitcoin.TxAck" +
      "Output.TxAckOutputWrapper\032J\n\022TxAckOutput" +
      "Wrapper\0224\n\006output\030\005 \002(\0132$.hw.trezor.mess" +
      "ages.bitcoin.TxOutput:\004\220\262\031\026\"E\n\rTxAckPrev" +
      "Meta\022.\n\002tx\030\001 \002(\0132\".hw.trezor.messages.bi" +
      "tcoin.PrevTx:\004\220\262\031\026\"\263\001\n\016TxAckPrevInput\022L\n" +
      "\002tx\030\001 \002(\0132@.hw.trezor.messages.bitcoin.T" +
      "xAckPrevInput.TxAckPrevInputWrapper\032M\n\025T" +
      "xAckPrevInputWrapper\0224\n\005input\030\002 \002(\0132%.hw" +
      ".trezor.messages.bitcoin.PrevInput:\004\220\262\031\026" +
      "\"\271\001\n\017TxAckPrevOutput\022N\n\002tx\030\001 \002(\0132B.hw.tr" +
      "ezor.messages.bitcoin.TxAckPrevOutput.Tx" +
      "AckPrevOutputWrapper\032P\n\026TxAckPrevOutputW" +
      "rapper\0226\n\006output\030\003 \002(\0132&.hw.trezor.messa" +
      "ges.bitcoin.PrevOutput:\004\220\262\031\026\"\247\001\n\022TxAckPr" +
      "evExtraData\022T\n\002tx\030\001 \002(\0132H.hw.trezor.mess" +
      "ages.bitcoin.TxAckPrevExtraData.TxAckPre" +
      "vExtraDataWrapper\0325\n\031TxAckPrevExtraDataW" +
      "rapper\022\030\n\020extra_data_chunk\030\010 \002(\014:\004\220\262\031\026\"\256" +
      "\002\n\021GetOwnershipProof\022\021\n\taddress_n\030\001 \003(\r\022" +
      "\032\n\tcoin_name\030\002 \001(\t:\007Bitcoin\022N\n\013script_ty" +
      "pe\030\003 \001(\0162+.hw.trezor.messages.bitcoin.In" +
      "putScriptType:\014SPENDWITNESS\022F\n\010multisig\030" +
      "\004 \001(\01324.hw.trezor.messages.bitcoin.Multi" +
      "sigRedeemScriptType\022 \n\021user_confirmation" +
      "\030\005 \001(\010:\005false\022\025\n\rownership_ids\030\006 \003(\014\022\031\n\017" +
      "commitment_data\030\007 \001(\014:\000\"<\n\016OwnershipProo" +
      "f\022\027\n\017ownership_proof\030\001 \002(\014\022\021\n\tsignature\030" +
      "\002 \002(\014\"\277\002\n\021AuthorizeCoinJoin\022\023\n\013coordinat" +
      "or\030\001 \002(\t\022\022\n\nmax_rounds\030\002 \002(\004\022 \n\030max_coor" +
      "dinator_fee_rate\030\003 \002(\r\022\032\n\022max_fee_per_kv" +
      "byte\030\004 \002(\r\022\021\n\taddress_n\030\005 \003(\r\022\032\n\tcoin_na" +
      "me\030\006 \001(\t:\007Bitcoin\022N\n\013script_type\030\007 \001(\0162+" +
      ".hw.trezor.messages.bitcoin.InputScriptT" +
      "ype:\014SPENDADDRESS\022D\n\013amount_unit\030\010 \001(\0162&" +
      ".hw.trezor.messages.bitcoin.AmountUnit:\007" +
      "BITCOIN*~\n\017InputScriptType\022\020\n\014SPENDADDRE" +
      "SS\020\000\022\021\n\rSPENDMULTISIG\020\001\022\014\n\010EXTERNAL\020\002\022\020\n" +
      "\014SPENDWITNESS\020\003\022\024\n\020SPENDP2SHWITNESS\020\004\022\020\n" +
      "\014SPENDTAPROOT\020\005*\231\001\n\020OutputScriptType\022\020\n\014" +
      "PAYTOADDRESS\020\000\022\023\n\017PAYTOSCRIPTHASH\020\001\022\021\n\rP" +
      "AYTOMULTISIG\020\002\022\021\n\rPAYTOOPRETURN\020\003\022\020\n\014PAY" +
      "TOWITNESS\020\004\022\024\n\020PAYTOP2SHWITNESS\020\005\022\020\n\014PAY" +
      "TOTAPROOT\020\006*.\n\026DecredStakingSpendType\022\t\n" +
      "\005SSGen\020\000\022\t\n\005SSRTX\020\001*J\n\nAmountUnit\022\013\n\007BIT" +
      "COIN\020\000\022\020\n\014MILLIBITCOIN\020\001\022\020\n\014MICROBITCOIN" +
      "\020\002\022\013\n\007SATOSHI\020\003BC\n\'com.sparrowwallet.lar" +
      "k.trezor.generatedB\024TrezorMessageBitcoin" +
      "\200\246\035\001"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.getDescriptor(),
          com.sparrowwallet.lark.trezor.generated.TrezorOptions.getDescriptor(),
        });
    internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_descriptor,
        new java.lang.String[] { "Pubkeys", "Signatures", "M", "Nodes", "AddressN", });
    internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_HDNodePathType_descriptor =
      internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_descriptor.getNestedTypes().get(0);
    internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_HDNodePathType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_MultisigRedeemScriptType_HDNodePathType_descriptor,
        new java.lang.String[] { "Node", "AddressN", });
    internal_static_hw_trezor_messages_bitcoin_GetPublicKey_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_hw_trezor_messages_bitcoin_GetPublicKey_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_GetPublicKey_descriptor,
        new java.lang.String[] { "AddressN", "EcdsaCurveName", "ShowDisplay", "CoinName", "ScriptType", "IgnoreXpubMagic", });
    internal_static_hw_trezor_messages_bitcoin_PublicKey_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_hw_trezor_messages_bitcoin_PublicKey_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_PublicKey_descriptor,
        new java.lang.String[] { "Node", "Xpub", "RootFingerprint", "DescriptorField", });
    internal_static_hw_trezor_messages_bitcoin_GetAddress_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_hw_trezor_messages_bitcoin_GetAddress_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_GetAddress_descriptor,
        new java.lang.String[] { "AddressN", "CoinName", "ShowDisplay", "Multisig", "ScriptType", "IgnoreXpubMagic", "Chunkify", });
    internal_static_hw_trezor_messages_bitcoin_Address_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_hw_trezor_messages_bitcoin_Address_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_Address_descriptor,
        new java.lang.String[] { "Address", "Mac", });
    internal_static_hw_trezor_messages_bitcoin_GetOwnershipId_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_hw_trezor_messages_bitcoin_GetOwnershipId_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_GetOwnershipId_descriptor,
        new java.lang.String[] { "AddressN", "CoinName", "Multisig", "ScriptType", });
    internal_static_hw_trezor_messages_bitcoin_OwnershipId_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_hw_trezor_messages_bitcoin_OwnershipId_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_OwnershipId_descriptor,
        new java.lang.String[] { "OwnershipId", });
    internal_static_hw_trezor_messages_bitcoin_SignMessage_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_hw_trezor_messages_bitcoin_SignMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_SignMessage_descriptor,
        new java.lang.String[] { "AddressN", "Message", "CoinName", "ScriptType", "NoScriptType", "Chunkify", });
    internal_static_hw_trezor_messages_bitcoin_MessageSignature_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_hw_trezor_messages_bitcoin_MessageSignature_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_MessageSignature_descriptor,
        new java.lang.String[] { "Address", "Signature", });
    internal_static_hw_trezor_messages_bitcoin_VerifyMessage_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_hw_trezor_messages_bitcoin_VerifyMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_VerifyMessage_descriptor,
        new java.lang.String[] { "Address", "Signature", "Message", "CoinName", "Chunkify", });
    internal_static_hw_trezor_messages_bitcoin_SignTx_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_hw_trezor_messages_bitcoin_SignTx_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_SignTx_descriptor,
        new java.lang.String[] { "OutputsCount", "InputsCount", "CoinName", "Version", "LockTime", "Expiry", "Overwintered", "VersionGroupId", "Timestamp", "BranchId", "AmountUnit", "DecredStakingTicket", "Serialize", "CoinjoinRequest", "Chunkify", });
    internal_static_hw_trezor_messages_bitcoin_SignTx_CoinJoinRequest_descriptor =
      internal_static_hw_trezor_messages_bitcoin_SignTx_descriptor.getNestedTypes().get(0);
    internal_static_hw_trezor_messages_bitcoin_SignTx_CoinJoinRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_SignTx_CoinJoinRequest_descriptor,
        new java.lang.String[] { "FeeRate", "NoFeeThreshold", "MinRegistrableAmount", "MaskPublicKey", "Signature", });
    internal_static_hw_trezor_messages_bitcoin_TxRequest_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_hw_trezor_messages_bitcoin_TxRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxRequest_descriptor,
        new java.lang.String[] { "RequestType", "Details", "Serialized", });
    internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestDetailsType_descriptor =
      internal_static_hw_trezor_messages_bitcoin_TxRequest_descriptor.getNestedTypes().get(0);
    internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestDetailsType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestDetailsType_descriptor,
        new java.lang.String[] { "RequestIndex", "TxHash", "ExtraDataLen", "ExtraDataOffset", });
    internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestSerializedType_descriptor =
      internal_static_hw_trezor_messages_bitcoin_TxRequest_descriptor.getNestedTypes().get(1);
    internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestSerializedType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxRequest_TxRequestSerializedType_descriptor,
        new java.lang.String[] { "SignatureIndex", "Signature", "SerializedTx", });
    internal_static_hw_trezor_messages_bitcoin_TxAck_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_hw_trezor_messages_bitcoin_TxAck_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAck_descriptor,
        new java.lang.String[] { "Tx", });
    internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_descriptor =
      internal_static_hw_trezor_messages_bitcoin_TxAck_descriptor.getNestedTypes().get(0);
    internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_descriptor,
        new java.lang.String[] { "Version", "Inputs", "BinOutputs", "LockTime", "Outputs", "InputsCnt", "OutputsCnt", "ExtraData", "ExtraDataLen", "Expiry", "Overwintered", "VersionGroupId", "Timestamp", "BranchId", });
    internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxInputType_descriptor =
      internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_descriptor.getNestedTypes().get(0);
    internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxInputType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxInputType_descriptor,
        new java.lang.String[] { "AddressN", "PrevHash", "PrevIndex", "ScriptSig", "Sequence", "ScriptType", "Multisig", "Amount", "DecredTree", "Witness", "OwnershipProof", "CommitmentData", "OrigHash", "OrigIndex", "DecredStakingSpend", "ScriptPubkey", "CoinjoinFlags", });
    internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputBinType_descriptor =
      internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_descriptor.getNestedTypes().get(1);
    internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputBinType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputBinType_descriptor,
        new java.lang.String[] { "Amount", "ScriptPubkey", "DecredScriptVersion", });
    internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputType_descriptor =
      internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_descriptor.getNestedTypes().get(2);
    internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAck_TransactionType_TxOutputType_descriptor,
        new java.lang.String[] { "Address", "AddressN", "Amount", "ScriptType", "Multisig", "OpReturnData", "OrigHash", "OrigIndex", "PaymentReqIndex", });
    internal_static_hw_trezor_messages_bitcoin_TxInput_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_hw_trezor_messages_bitcoin_TxInput_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxInput_descriptor,
        new java.lang.String[] { "AddressN", "PrevHash", "PrevIndex", "ScriptSig", "Sequence", "ScriptType", "Multisig", "Amount", "DecredTree", "Witness", "OwnershipProof", "CommitmentData", "OrigHash", "OrigIndex", "DecredStakingSpend", "ScriptPubkey", "CoinjoinFlags", });
    internal_static_hw_trezor_messages_bitcoin_TxOutput_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_hw_trezor_messages_bitcoin_TxOutput_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxOutput_descriptor,
        new java.lang.String[] { "Address", "AddressN", "Amount", "ScriptType", "Multisig", "OpReturnData", "OrigHash", "OrigIndex", "PaymentReqIndex", });
    internal_static_hw_trezor_messages_bitcoin_PrevTx_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_hw_trezor_messages_bitcoin_PrevTx_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_PrevTx_descriptor,
        new java.lang.String[] { "Version", "LockTime", "InputsCount", "OutputsCount", "ExtraDataLen", "Expiry", "VersionGroupId", "Timestamp", "BranchId", });
    internal_static_hw_trezor_messages_bitcoin_PrevInput_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_hw_trezor_messages_bitcoin_PrevInput_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_PrevInput_descriptor,
        new java.lang.String[] { "PrevHash", "PrevIndex", "ScriptSig", "Sequence", "DecredTree", });
    internal_static_hw_trezor_messages_bitcoin_PrevOutput_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_hw_trezor_messages_bitcoin_PrevOutput_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_PrevOutput_descriptor,
        new java.lang.String[] { "Amount", "ScriptPubkey", "DecredScriptVersion", });
    internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_descriptor,
        new java.lang.String[] { "Nonce", "RecipientName", "Memos", "Amount", "Signature", });
    internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_PaymentRequestMemo_descriptor =
      internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_descriptor.getNestedTypes().get(0);
    internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_PaymentRequestMemo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_PaymentRequestMemo_descriptor,
        new java.lang.String[] { "TextMemo", "RefundMemo", "CoinPurchaseMemo", });
    internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_TextMemo_descriptor =
      internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_descriptor.getNestedTypes().get(1);
    internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_TextMemo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_TextMemo_descriptor,
        new java.lang.String[] { "Text", });
    internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_RefundMemo_descriptor =
      internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_descriptor.getNestedTypes().get(2);
    internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_RefundMemo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_RefundMemo_descriptor,
        new java.lang.String[] { "Address", "Mac", });
    internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_CoinPurchaseMemo_descriptor =
      internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_descriptor.getNestedTypes().get(3);
    internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_CoinPurchaseMemo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAckPaymentRequest_CoinPurchaseMemo_descriptor,
        new java.lang.String[] { "CoinType", "Amount", "Address", "Mac", });
    internal_static_hw_trezor_messages_bitcoin_TxAckInput_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_hw_trezor_messages_bitcoin_TxAckInput_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAckInput_descriptor,
        new java.lang.String[] { "Tx", });
    internal_static_hw_trezor_messages_bitcoin_TxAckInput_TxAckInputWrapper_descriptor =
      internal_static_hw_trezor_messages_bitcoin_TxAckInput_descriptor.getNestedTypes().get(0);
    internal_static_hw_trezor_messages_bitcoin_TxAckInput_TxAckInputWrapper_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAckInput_TxAckInputWrapper_descriptor,
        new java.lang.String[] { "Input", });
    internal_static_hw_trezor_messages_bitcoin_TxAckOutput_descriptor =
      getDescriptor().getMessageTypes().get(20);
    internal_static_hw_trezor_messages_bitcoin_TxAckOutput_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAckOutput_descriptor,
        new java.lang.String[] { "Tx", });
    internal_static_hw_trezor_messages_bitcoin_TxAckOutput_TxAckOutputWrapper_descriptor =
      internal_static_hw_trezor_messages_bitcoin_TxAckOutput_descriptor.getNestedTypes().get(0);
    internal_static_hw_trezor_messages_bitcoin_TxAckOutput_TxAckOutputWrapper_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAckOutput_TxAckOutputWrapper_descriptor,
        new java.lang.String[] { "Output", });
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevMeta_descriptor =
      getDescriptor().getMessageTypes().get(21);
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevMeta_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAckPrevMeta_descriptor,
        new java.lang.String[] { "Tx", });
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_descriptor =
      getDescriptor().getMessageTypes().get(22);
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_descriptor,
        new java.lang.String[] { "Tx", });
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_TxAckPrevInputWrapper_descriptor =
      internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_descriptor.getNestedTypes().get(0);
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_TxAckPrevInputWrapper_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAckPrevInput_TxAckPrevInputWrapper_descriptor,
        new java.lang.String[] { "Input", });
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_descriptor =
      getDescriptor().getMessageTypes().get(23);
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_descriptor,
        new java.lang.String[] { "Tx", });
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_TxAckPrevOutputWrapper_descriptor =
      internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_descriptor.getNestedTypes().get(0);
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_TxAckPrevOutputWrapper_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAckPrevOutput_TxAckPrevOutputWrapper_descriptor,
        new java.lang.String[] { "Output", });
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_descriptor =
      getDescriptor().getMessageTypes().get(24);
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_descriptor,
        new java.lang.String[] { "Tx", });
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_TxAckPrevExtraDataWrapper_descriptor =
      internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_descriptor.getNestedTypes().get(0);
    internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_TxAckPrevExtraDataWrapper_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_TxAckPrevExtraData_TxAckPrevExtraDataWrapper_descriptor,
        new java.lang.String[] { "ExtraDataChunk", });
    internal_static_hw_trezor_messages_bitcoin_GetOwnershipProof_descriptor =
      getDescriptor().getMessageTypes().get(25);
    internal_static_hw_trezor_messages_bitcoin_GetOwnershipProof_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_GetOwnershipProof_descriptor,
        new java.lang.String[] { "AddressN", "CoinName", "ScriptType", "Multisig", "UserConfirmation", "OwnershipIds", "CommitmentData", });
    internal_static_hw_trezor_messages_bitcoin_OwnershipProof_descriptor =
      getDescriptor().getMessageTypes().get(26);
    internal_static_hw_trezor_messages_bitcoin_OwnershipProof_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_OwnershipProof_descriptor,
        new java.lang.String[] { "OwnershipProof", "Signature", });
    internal_static_hw_trezor_messages_bitcoin_AuthorizeCoinJoin_descriptor =
      getDescriptor().getMessageTypes().get(27);
    internal_static_hw_trezor_messages_bitcoin_AuthorizeCoinJoin_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_hw_trezor_messages_bitcoin_AuthorizeCoinJoin_descriptor,
        new java.lang.String[] { "Coordinator", "MaxRounds", "MaxCoordinatorFeeRate", "MaxFeePerKvbyte", "AddressN", "CoinName", "ScriptType", "AmountUnit", });
    descriptor.resolveAllFeaturesImmutable();
    com.sparrowwallet.lark.trezor.generated.TrezorMessageCommon.getDescriptor();
    com.sparrowwallet.lark.trezor.generated.TrezorOptions.getDescriptor();
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.sparrowwallet.lark.trezor.generated.TrezorOptions.experimentalField);
    registry.add(com.sparrowwallet.lark.trezor.generated.TrezorOptions.experimentalMessage);
    registry.add(com.sparrowwallet.lark.trezor.generated.TrezorOptions.includeInBitcoinOnly);
    registry.add(com.sparrowwallet.lark.trezor.generated.TrezorOptions.wireType);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
