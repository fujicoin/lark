// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: btc.proto
// Protobuf Java Version: 4.28.3

package com.sparrowwallet.lark.bitbox02.generated;

public final class Btc {
  private Btc() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 28,
      /* patch= */ 3,
      /* suffix= */ "",
      Btc.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code com.sparrowwallet.lark.bitbox02.generated.BTCCoin}
   */
  public enum BTCCoin
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>BTC = 0;</code>
     */
    BTC(0),
    /**
     * <code>TBTC = 1;</code>
     */
    TBTC(1),
    /**
     * <code>LTC = 2;</code>
     */
    LTC(2),
    /**
     * <code>TLTC = 3;</code>
     */
    TLTC(3),
    /**
     * <pre>
     * Regtest
     * </pre>
     *
     * <code>RBTC = 4;</code>
     */
    RBTC(4),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCCoin.class.getName());
    }
    /**
     * <code>BTC = 0;</code>
     */
    public static final int BTC_VALUE = 0;
    /**
     * <code>TBTC = 1;</code>
     */
    public static final int TBTC_VALUE = 1;
    /**
     * <code>LTC = 2;</code>
     */
    public static final int LTC_VALUE = 2;
    /**
     * <code>TLTC = 3;</code>
     */
    public static final int TLTC_VALUE = 3;
    /**
     * <pre>
     * Regtest
     * </pre>
     *
     * <code>RBTC = 4;</code>
     */
    public static final int RBTC_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static BTCCoin valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static BTCCoin forNumber(int value) {
      switch (value) {
        case 0: return BTC;
        case 1: return TBTC;
        case 2: return LTC;
        case 3: return TLTC;
        case 4: return RBTC;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BTCCoin>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        BTCCoin> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BTCCoin>() {
            public BTCCoin findValueByNumber(int number) {
              return BTCCoin.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.getDescriptor().getEnumTypes().get(0);
    }

    private static final BTCCoin[] VALUES = values();

    public static BTCCoin valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private BTCCoin(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.sparrowwallet.lark.bitbox02.generated.BTCCoin)
  }

  /**
   * Protobuf enum {@code com.sparrowwallet.lark.bitbox02.generated.BTCOutputType}
   */
  public enum BTCOutputType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN = 0;</code>
     */
    UNKNOWN(0),
    /**
     * <code>P2PKH = 1;</code>
     */
    P2PKH(1),
    /**
     * <code>P2SH = 2;</code>
     */
    P2SH(2),
    /**
     * <code>P2WPKH = 3;</code>
     */
    P2WPKH(3),
    /**
     * <code>P2WSH = 4;</code>
     */
    P2WSH(4),
    /**
     * <code>P2TR = 5;</code>
     */
    P2TR(5),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCOutputType.class.getName());
    }
    /**
     * <code>UNKNOWN = 0;</code>
     */
    public static final int UNKNOWN_VALUE = 0;
    /**
     * <code>P2PKH = 1;</code>
     */
    public static final int P2PKH_VALUE = 1;
    /**
     * <code>P2SH = 2;</code>
     */
    public static final int P2SH_VALUE = 2;
    /**
     * <code>P2WPKH = 3;</code>
     */
    public static final int P2WPKH_VALUE = 3;
    /**
     * <code>P2WSH = 4;</code>
     */
    public static final int P2WSH_VALUE = 4;
    /**
     * <code>P2TR = 5;</code>
     */
    public static final int P2TR_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static BTCOutputType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static BTCOutputType forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN;
        case 1: return P2PKH;
        case 2: return P2SH;
        case 3: return P2WPKH;
        case 4: return P2WSH;
        case 5: return P2TR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BTCOutputType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        BTCOutputType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BTCOutputType>() {
            public BTCOutputType findValueByNumber(int number) {
              return BTCOutputType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.getDescriptor().getEnumTypes().get(1);
    }

    private static final BTCOutputType[] VALUES = values();

    public static BTCOutputType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private BTCOutputType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.sparrowwallet.lark.bitbox02.generated.BTCOutputType)
  }

  public interface BTCScriptConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.SimpleType simple_type = 1;</code>
     * @return Whether the simpleType field is set.
     */
    boolean hasSimpleType();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.SimpleType simple_type = 1;</code>
     * @return The enum numeric value on the wire for simpleType.
     */
    int getSimpleTypeValue();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.SimpleType simple_type = 1;</code>
     * @return The simpleType.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.SimpleType getSimpleType();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig multisig = 2;</code>
     * @return Whether the multisig field is set.
     */
    boolean hasMultisig();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig multisig = 2;</code>
     * @return The multisig.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig getMultisig();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig multisig = 2;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.MultisigOrBuilder getMultisigOrBuilder();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy policy = 3;</code>
     * @return Whether the policy field is set.
     */
    boolean hasPolicy();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy policy = 3;</code>
     * @return The policy.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy getPolicy();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy policy = 3;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.PolicyOrBuilder getPolicyOrBuilder();

    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.ConfigCase getConfigCase();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig}
   */
  public static final class BTCScriptConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig)
      BTCScriptConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCScriptConfig.class.getName());
    }
    // Use BTCScriptConfig.newBuilder() to construct.
    private BTCScriptConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCScriptConfig() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Builder.class);
    }

    /**
     * <pre>
     * SimpleType is a "simple" script: one public key, no additional inputs.
     * </pre>
     *
     * Protobuf enum {@code com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.SimpleType}
     */
    public enum SimpleType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>P2WPKH_P2SH = 0;</code>
       */
      P2WPKH_P2SH(0),
      /**
       * <code>P2WPKH = 1;</code>
       */
      P2WPKH(1),
      /**
       * <code>P2TR = 2;</code>
       */
      P2TR(2),
      UNRECOGNIZED(-1),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          SimpleType.class.getName());
      }
      /**
       * <code>P2WPKH_P2SH = 0;</code>
       */
      public static final int P2WPKH_P2SH_VALUE = 0;
      /**
       * <code>P2WPKH = 1;</code>
       */
      public static final int P2WPKH_VALUE = 1;
      /**
       * <code>P2TR = 2;</code>
       */
      public static final int P2TR_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static SimpleType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static SimpleType forNumber(int value) {
        switch (value) {
          case 0: return P2WPKH_P2SH;
          case 1: return P2WPKH;
          case 2: return P2TR;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SimpleType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          SimpleType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SimpleType>() {
              public SimpleType findValueByNumber(int number) {
                return SimpleType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDescriptor().getEnumTypes().get(0);
      }

      private static final SimpleType[] VALUES = values();

      public static SimpleType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private SimpleType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.SimpleType)
    }

    public interface MultisigOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>uint32 threshold = 1;</code>
       * @return The threshold.
       */
      int getThreshold();

      /**
       * <pre>
       * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
       * The number of xpubs defines the number of cosigners.
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
       */
      java.util.List<com.sparrowwallet.lark.bitbox02.generated.Common.XPub> 
          getXpubsList();
      /**
       * <pre>
       * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
       * The number of xpubs defines the number of cosigners.
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
       */
      com.sparrowwallet.lark.bitbox02.generated.Common.XPub getXpubs(int index);
      /**
       * <pre>
       * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
       * The number of xpubs defines the number of cosigners.
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
       */
      int getXpubsCount();
      /**
       * <pre>
       * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
       * The number of xpubs defines the number of cosigners.
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
       */
      java.util.List<? extends com.sparrowwallet.lark.bitbox02.generated.Common.XPubOrBuilder> 
          getXpubsOrBuilderList();
      /**
       * <pre>
       * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
       * The number of xpubs defines the number of cosigners.
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
       */
      com.sparrowwallet.lark.bitbox02.generated.Common.XPubOrBuilder getXpubsOrBuilder(
          int index);

      /**
       * <pre>
       * Index to the xpub of our keystore in xpubs. The keypath to it is provided via
       * BTCPubRequest/BTCSignInit.
       * </pre>
       *
       * <code>uint32 our_xpub_index = 3;</code>
       * @return The ourXpubIndex.
       */
      int getOurXpubIndex();

      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig.ScriptType script_type = 4;</code>
       * @return The enum numeric value on the wire for scriptType.
       */
      int getScriptTypeValue();
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig.ScriptType script_type = 4;</code>
       * @return The scriptType.
       */
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.ScriptType getScriptType();
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig}
     */
    public static final class Multisig extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig)
        MultisigOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          Multisig.class.getName());
      }
      // Use Multisig.newBuilder() to construct.
      private Multisig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private Multisig() {
        xpubs_ = java.util.Collections.emptyList();
        scriptType_ = 0;
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Multisig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Multisig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.Builder.class);
      }

      /**
       * Protobuf enum {@code com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig.ScriptType}
       */
      public enum ScriptType
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * native segwit v0 multisig (bech32 addresses)
         * </pre>
         *
         * <code>P2WSH = 0;</code>
         */
        P2WSH(0),
        /**
         * <pre>
         * wrapped segwit for legacy address compatibility
         * </pre>
         *
         * <code>P2WSH_P2SH = 1;</code>
         */
        P2WSH_P2SH(1),
        UNRECOGNIZED(-1),
        ;

        static {
          com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
            com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
            /* major= */ 4,
            /* minor= */ 28,
            /* patch= */ 3,
            /* suffix= */ "",
            ScriptType.class.getName());
        }
        /**
         * <pre>
         * native segwit v0 multisig (bech32 addresses)
         * </pre>
         *
         * <code>P2WSH = 0;</code>
         */
        public static final int P2WSH_VALUE = 0;
        /**
         * <pre>
         * wrapped segwit for legacy address compatibility
         * </pre>
         *
         * <code>P2WSH_P2SH = 1;</code>
         */
        public static final int P2WSH_P2SH_VALUE = 1;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static ScriptType valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static ScriptType forNumber(int value) {
          switch (value) {
            case 0: return P2WSH;
            case 1: return P2WSH_P2SH;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ScriptType>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            ScriptType> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<ScriptType>() {
                public ScriptType findValueByNumber(int number) {
                  return ScriptType.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalStateException(
                "Can't get the descriptor of an unrecognized enum value.");
          }
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.getDescriptor().getEnumTypes().get(0);
        }

        private static final ScriptType[] VALUES = values();

        public static ScriptType valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private ScriptType(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig.ScriptType)
      }

      public static final int THRESHOLD_FIELD_NUMBER = 1;
      private int threshold_ = 0;
      /**
       * <code>uint32 threshold = 1;</code>
       * @return The threshold.
       */
      @java.lang.Override
      public int getThreshold() {
        return threshold_;
      }

      public static final int XPUBS_FIELD_NUMBER = 2;
      @SuppressWarnings("serial")
      private java.util.List<com.sparrowwallet.lark.bitbox02.generated.Common.XPub> xpubs_;
      /**
       * <pre>
       * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
       * The number of xpubs defines the number of cosigners.
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
       */
      @java.lang.Override
      public java.util.List<com.sparrowwallet.lark.bitbox02.generated.Common.XPub> getXpubsList() {
        return xpubs_;
      }
      /**
       * <pre>
       * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
       * The number of xpubs defines the number of cosigners.
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
       */
      @java.lang.Override
      public java.util.List<? extends com.sparrowwallet.lark.bitbox02.generated.Common.XPubOrBuilder> 
          getXpubsOrBuilderList() {
        return xpubs_;
      }
      /**
       * <pre>
       * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
       * The number of xpubs defines the number of cosigners.
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
       */
      @java.lang.Override
      public int getXpubsCount() {
        return xpubs_.size();
      }
      /**
       * <pre>
       * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
       * The number of xpubs defines the number of cosigners.
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Common.XPub getXpubs(int index) {
        return xpubs_.get(index);
      }
      /**
       * <pre>
       * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
       * The number of xpubs defines the number of cosigners.
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Common.XPubOrBuilder getXpubsOrBuilder(
          int index) {
        return xpubs_.get(index);
      }

      public static final int OUR_XPUB_INDEX_FIELD_NUMBER = 3;
      private int ourXpubIndex_ = 0;
      /**
       * <pre>
       * Index to the xpub of our keystore in xpubs. The keypath to it is provided via
       * BTCPubRequest/BTCSignInit.
       * </pre>
       *
       * <code>uint32 our_xpub_index = 3;</code>
       * @return The ourXpubIndex.
       */
      @java.lang.Override
      public int getOurXpubIndex() {
        return ourXpubIndex_;
      }

      public static final int SCRIPT_TYPE_FIELD_NUMBER = 4;
      private int scriptType_ = 0;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig.ScriptType script_type = 4;</code>
       * @return The enum numeric value on the wire for scriptType.
       */
      @java.lang.Override public int getScriptTypeValue() {
        return scriptType_;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig.ScriptType script_type = 4;</code>
       * @return The scriptType.
       */
      @java.lang.Override public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.ScriptType getScriptType() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.ScriptType result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.ScriptType.forNumber(scriptType_);
        return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.ScriptType.UNRECOGNIZED : result;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (threshold_ != 0) {
          output.writeUInt32(1, threshold_);
        }
        for (int i = 0; i < xpubs_.size(); i++) {
          output.writeMessage(2, xpubs_.get(i));
        }
        if (ourXpubIndex_ != 0) {
          output.writeUInt32(3, ourXpubIndex_);
        }
        if (scriptType_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.ScriptType.P2WSH.getNumber()) {
          output.writeEnum(4, scriptType_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (threshold_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, threshold_);
        }
        for (int i = 0; i < xpubs_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, xpubs_.get(i));
        }
        if (ourXpubIndex_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, ourXpubIndex_);
        }
        if (scriptType_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.ScriptType.P2WSH.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(4, scriptType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig) obj;

        if (getThreshold()
            != other.getThreshold()) return false;
        if (!getXpubsList()
            .equals(other.getXpubsList())) return false;
        if (getOurXpubIndex()
            != other.getOurXpubIndex()) return false;
        if (scriptType_ != other.scriptType_) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + THRESHOLD_FIELD_NUMBER;
        hash = (53 * hash) + getThreshold();
        if (getXpubsCount() > 0) {
          hash = (37 * hash) + XPUBS_FIELD_NUMBER;
          hash = (53 * hash) + getXpubsList().hashCode();
        }
        hash = (37 * hash) + OUR_XPUB_INDEX_FIELD_NUMBER;
        hash = (53 * hash) + getOurXpubIndex();
        hash = (37 * hash) + SCRIPT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + scriptType_;
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig)
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.MultisigOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Multisig_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Multisig_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          threshold_ = 0;
          if (xpubsBuilder_ == null) {
            xpubs_ = java.util.Collections.emptyList();
          } else {
            xpubs_ = null;
            xpubsBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          ourXpubIndex_ = 0;
          scriptType_ = 0;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Multisig_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig getDefaultInstanceForType() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig build() {
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig buildPartial() {
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig(this);
          buildPartialRepeatedFields(result);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartialRepeatedFields(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig result) {
          if (xpubsBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0)) {
              xpubs_ = java.util.Collections.unmodifiableList(xpubs_);
              bitField0_ = (bitField0_ & ~0x00000002);
            }
            result.xpubs_ = xpubs_;
          } else {
            result.xpubs_ = xpubsBuilder_.build();
          }
        }

        private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig result) {
          int from_bitField0_ = bitField0_;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.threshold_ = threshold_;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.ourXpubIndex_ = ourXpubIndex_;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.scriptType_ = scriptType_;
          }
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig) {
            return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig other) {
          if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.getDefaultInstance()) return this;
          if (other.getThreshold() != 0) {
            setThreshold(other.getThreshold());
          }
          if (xpubsBuilder_ == null) {
            if (!other.xpubs_.isEmpty()) {
              if (xpubs_.isEmpty()) {
                xpubs_ = other.xpubs_;
                bitField0_ = (bitField0_ & ~0x00000002);
              } else {
                ensureXpubsIsMutable();
                xpubs_.addAll(other.xpubs_);
              }
              onChanged();
            }
          } else {
            if (!other.xpubs_.isEmpty()) {
              if (xpubsBuilder_.isEmpty()) {
                xpubsBuilder_.dispose();
                xpubsBuilder_ = null;
                xpubs_ = other.xpubs_;
                bitField0_ = (bitField0_ & ~0x00000002);
                xpubsBuilder_ = 
                  com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                     getXpubsFieldBuilder() : null;
              } else {
                xpubsBuilder_.addAllMessages(other.xpubs_);
              }
            }
          }
          if (other.getOurXpubIndex() != 0) {
            setOurXpubIndex(other.getOurXpubIndex());
          }
          if (other.scriptType_ != 0) {
            setScriptTypeValue(other.getScriptTypeValue());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  threshold_ = input.readUInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 18: {
                  com.sparrowwallet.lark.bitbox02.generated.Common.XPub m =
                      input.readMessage(
                          com.sparrowwallet.lark.bitbox02.generated.Common.XPub.parser(),
                          extensionRegistry);
                  if (xpubsBuilder_ == null) {
                    ensureXpubsIsMutable();
                    xpubs_.add(m);
                  } else {
                    xpubsBuilder_.addMessage(m);
                  }
                  break;
                } // case 18
                case 24: {
                  ourXpubIndex_ = input.readUInt32();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
                case 32: {
                  scriptType_ = input.readEnum();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 32
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int threshold_ ;
        /**
         * <code>uint32 threshold = 1;</code>
         * @return The threshold.
         */
        @java.lang.Override
        public int getThreshold() {
          return threshold_;
        }
        /**
         * <code>uint32 threshold = 1;</code>
         * @param value The threshold to set.
         * @return This builder for chaining.
         */
        public Builder setThreshold(int value) {

          threshold_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>uint32 threshold = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearThreshold() {
          bitField0_ = (bitField0_ & ~0x00000001);
          threshold_ = 0;
          onChanged();
          return this;
        }

        private java.util.List<com.sparrowwallet.lark.bitbox02.generated.Common.XPub> xpubs_ =
          java.util.Collections.emptyList();
        private void ensureXpubsIsMutable() {
          if (!((bitField0_ & 0x00000002) != 0)) {
            xpubs_ = new java.util.ArrayList<com.sparrowwallet.lark.bitbox02.generated.Common.XPub>(xpubs_);
            bitField0_ |= 0x00000002;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilder<
            com.sparrowwallet.lark.bitbox02.generated.Common.XPub, com.sparrowwallet.lark.bitbox02.generated.Common.XPub.Builder, com.sparrowwallet.lark.bitbox02.generated.Common.XPubOrBuilder> xpubsBuilder_;

        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public java.util.List<com.sparrowwallet.lark.bitbox02.generated.Common.XPub> getXpubsList() {
          if (xpubsBuilder_ == null) {
            return java.util.Collections.unmodifiableList(xpubs_);
          } else {
            return xpubsBuilder_.getMessageList();
          }
        }
        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public int getXpubsCount() {
          if (xpubsBuilder_ == null) {
            return xpubs_.size();
          } else {
            return xpubsBuilder_.getCount();
          }
        }
        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public com.sparrowwallet.lark.bitbox02.generated.Common.XPub getXpubs(int index) {
          if (xpubsBuilder_ == null) {
            return xpubs_.get(index);
          } else {
            return xpubsBuilder_.getMessage(index);
          }
        }
        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public Builder setXpubs(
            int index, com.sparrowwallet.lark.bitbox02.generated.Common.XPub value) {
          if (xpubsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureXpubsIsMutable();
            xpubs_.set(index, value);
            onChanged();
          } else {
            xpubsBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public Builder setXpubs(
            int index, com.sparrowwallet.lark.bitbox02.generated.Common.XPub.Builder builderForValue) {
          if (xpubsBuilder_ == null) {
            ensureXpubsIsMutable();
            xpubs_.set(index, builderForValue.build());
            onChanged();
          } else {
            xpubsBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public Builder addXpubs(com.sparrowwallet.lark.bitbox02.generated.Common.XPub value) {
          if (xpubsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureXpubsIsMutable();
            xpubs_.add(value);
            onChanged();
          } else {
            xpubsBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public Builder addXpubs(
            int index, com.sparrowwallet.lark.bitbox02.generated.Common.XPub value) {
          if (xpubsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureXpubsIsMutable();
            xpubs_.add(index, value);
            onChanged();
          } else {
            xpubsBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public Builder addXpubs(
            com.sparrowwallet.lark.bitbox02.generated.Common.XPub.Builder builderForValue) {
          if (xpubsBuilder_ == null) {
            ensureXpubsIsMutable();
            xpubs_.add(builderForValue.build());
            onChanged();
          } else {
            xpubsBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public Builder addXpubs(
            int index, com.sparrowwallet.lark.bitbox02.generated.Common.XPub.Builder builderForValue) {
          if (xpubsBuilder_ == null) {
            ensureXpubsIsMutable();
            xpubs_.add(index, builderForValue.build());
            onChanged();
          } else {
            xpubsBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public Builder addAllXpubs(
            java.lang.Iterable<? extends com.sparrowwallet.lark.bitbox02.generated.Common.XPub> values) {
          if (xpubsBuilder_ == null) {
            ensureXpubsIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, xpubs_);
            onChanged();
          } else {
            xpubsBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public Builder clearXpubs() {
          if (xpubsBuilder_ == null) {
            xpubs_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
            onChanged();
          } else {
            xpubsBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public Builder removeXpubs(int index) {
          if (xpubsBuilder_ == null) {
            ensureXpubsIsMutable();
            xpubs_.remove(index);
            onChanged();
          } else {
            xpubsBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public com.sparrowwallet.lark.bitbox02.generated.Common.XPub.Builder getXpubsBuilder(
            int index) {
          return getXpubsFieldBuilder().getBuilder(index);
        }
        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public com.sparrowwallet.lark.bitbox02.generated.Common.XPubOrBuilder getXpubsOrBuilder(
            int index) {
          if (xpubsBuilder_ == null) {
            return xpubs_.get(index);  } else {
            return xpubsBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public java.util.List<? extends com.sparrowwallet.lark.bitbox02.generated.Common.XPubOrBuilder> 
             getXpubsOrBuilderList() {
          if (xpubsBuilder_ != null) {
            return xpubsBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(xpubs_);
          }
        }
        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public com.sparrowwallet.lark.bitbox02.generated.Common.XPub.Builder addXpubsBuilder() {
          return getXpubsFieldBuilder().addBuilder(
              com.sparrowwallet.lark.bitbox02.generated.Common.XPub.getDefaultInstance());
        }
        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public com.sparrowwallet.lark.bitbox02.generated.Common.XPub.Builder addXpubsBuilder(
            int index) {
          return getXpubsFieldBuilder().addBuilder(
              index, com.sparrowwallet.lark.bitbox02.generated.Common.XPub.getDefaultInstance());
        }
        /**
         * <pre>
         * xpubs are acount-level xpubs. Addresses are going to be derived from it using: `m/&lt;change&gt;/&lt;receive&gt;`.
         * The number of xpubs defines the number of cosigners.
         * </pre>
         *
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.XPub xpubs = 2;</code>
         */
        public java.util.List<com.sparrowwallet.lark.bitbox02.generated.Common.XPub.Builder> 
             getXpubsBuilderList() {
          return getXpubsFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilder<
            com.sparrowwallet.lark.bitbox02.generated.Common.XPub, com.sparrowwallet.lark.bitbox02.generated.Common.XPub.Builder, com.sparrowwallet.lark.bitbox02.generated.Common.XPubOrBuilder> 
            getXpubsFieldBuilder() {
          if (xpubsBuilder_ == null) {
            xpubsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                com.sparrowwallet.lark.bitbox02.generated.Common.XPub, com.sparrowwallet.lark.bitbox02.generated.Common.XPub.Builder, com.sparrowwallet.lark.bitbox02.generated.Common.XPubOrBuilder>(
                    xpubs_,
                    ((bitField0_ & 0x00000002) != 0),
                    getParentForChildren(),
                    isClean());
            xpubs_ = null;
          }
          return xpubsBuilder_;
        }

        private int ourXpubIndex_ ;
        /**
         * <pre>
         * Index to the xpub of our keystore in xpubs. The keypath to it is provided via
         * BTCPubRequest/BTCSignInit.
         * </pre>
         *
         * <code>uint32 our_xpub_index = 3;</code>
         * @return The ourXpubIndex.
         */
        @java.lang.Override
        public int getOurXpubIndex() {
          return ourXpubIndex_;
        }
        /**
         * <pre>
         * Index to the xpub of our keystore in xpubs. The keypath to it is provided via
         * BTCPubRequest/BTCSignInit.
         * </pre>
         *
         * <code>uint32 our_xpub_index = 3;</code>
         * @param value The ourXpubIndex to set.
         * @return This builder for chaining.
         */
        public Builder setOurXpubIndex(int value) {

          ourXpubIndex_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Index to the xpub of our keystore in xpubs. The keypath to it is provided via
         * BTCPubRequest/BTCSignInit.
         * </pre>
         *
         * <code>uint32 our_xpub_index = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearOurXpubIndex() {
          bitField0_ = (bitField0_ & ~0x00000004);
          ourXpubIndex_ = 0;
          onChanged();
          return this;
        }

        private int scriptType_ = 0;
        /**
         * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig.ScriptType script_type = 4;</code>
         * @return The enum numeric value on the wire for scriptType.
         */
        @java.lang.Override public int getScriptTypeValue() {
          return scriptType_;
        }
        /**
         * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig.ScriptType script_type = 4;</code>
         * @param value The enum numeric value on the wire for scriptType to set.
         * @return This builder for chaining.
         */
        public Builder setScriptTypeValue(int value) {
          scriptType_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig.ScriptType script_type = 4;</code>
         * @return The scriptType.
         */
        @java.lang.Override
        public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.ScriptType getScriptType() {
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.ScriptType result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.ScriptType.forNumber(scriptType_);
          return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.ScriptType.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig.ScriptType script_type = 4;</code>
         * @param value The scriptType to set.
         * @return This builder for chaining.
         */
        public Builder setScriptType(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.ScriptType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000008;
          scriptType_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig.ScriptType script_type = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearScriptType() {
          bitField0_ = (bitField0_ & ~0x00000008);
          scriptType_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig)
      }

      // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig)
      private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig();
      }

      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Multisig>
          PARSER = new com.google.protobuf.AbstractParser<Multisig>() {
        @java.lang.Override
        public Multisig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Multisig> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Multisig> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface PolicyOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string policy = 1;</code>
       * @return The policy.
       */
      java.lang.String getPolicy();
      /**
       * <code>string policy = 1;</code>
       * @return The bytes for policy.
       */
      com.google.protobuf.ByteString
          getPolicyBytes();

      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
       */
      java.util.List<com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo> 
          getKeysList();
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
       */
      com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo getKeys(int index);
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
       */
      int getKeysCount();
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
       */
      java.util.List<? extends com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfoOrBuilder> 
          getKeysOrBuilderList();
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
       */
      com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfoOrBuilder getKeysOrBuilder(
          int index);
    }
    /**
     * <pre>
     * A policy as specified by 'Wallet policies':
     * https://github.com/bitcoin/bips/pull/1389
     * </pre>
     *
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy}
     */
    public static final class Policy extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy)
        PolicyOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          Policy.class.getName());
      }
      // Use Policy.newBuilder() to construct.
      private Policy(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private Policy() {
        policy_ = "";
        keys_ = java.util.Collections.emptyList();
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Policy_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Policy_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.Builder.class);
      }

      public static final int POLICY_FIELD_NUMBER = 1;
      @SuppressWarnings("serial")
      private volatile java.lang.Object policy_ = "";
      /**
       * <code>string policy = 1;</code>
       * @return The policy.
       */
      @java.lang.Override
      public java.lang.String getPolicy() {
        java.lang.Object ref = policy_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          policy_ = s;
          return s;
        }
      }
      /**
       * <code>string policy = 1;</code>
       * @return The bytes for policy.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getPolicyBytes() {
        java.lang.Object ref = policy_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          policy_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int KEYS_FIELD_NUMBER = 2;
      @SuppressWarnings("serial")
      private java.util.List<com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo> keys_;
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
       */
      @java.lang.Override
      public java.util.List<com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo> getKeysList() {
        return keys_;
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
       */
      @java.lang.Override
      public java.util.List<? extends com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfoOrBuilder> 
          getKeysOrBuilderList() {
        return keys_;
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
       */
      @java.lang.Override
      public int getKeysCount() {
        return keys_.size();
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo getKeys(int index) {
        return keys_.get(index);
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfoOrBuilder getKeysOrBuilder(
          int index) {
        return keys_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessage.isStringEmpty(policy_)) {
          com.google.protobuf.GeneratedMessage.writeString(output, 1, policy_);
        }
        for (int i = 0; i < keys_.size(); i++) {
          output.writeMessage(2, keys_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessage.isStringEmpty(policy_)) {
          size += com.google.protobuf.GeneratedMessage.computeStringSize(1, policy_);
        }
        for (int i = 0; i < keys_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, keys_.get(i));
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy) obj;

        if (!getPolicy()
            .equals(other.getPolicy())) return false;
        if (!getKeysList()
            .equals(other.getKeysList())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + POLICY_FIELD_NUMBER;
        hash = (53 * hash) + getPolicy().hashCode();
        if (getKeysCount() > 0) {
          hash = (37 * hash) + KEYS_FIELD_NUMBER;
          hash = (53 * hash) + getKeysList().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * A policy as specified by 'Wallet policies':
       * https://github.com/bitcoin/bips/pull/1389
       * </pre>
       *
       * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy)
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.PolicyOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Policy_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Policy_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          policy_ = "";
          if (keysBuilder_ == null) {
            keys_ = java.util.Collections.emptyList();
          } else {
            keys_ = null;
            keysBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Policy_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy getDefaultInstanceForType() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy build() {
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy buildPartial() {
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy(this);
          buildPartialRepeatedFields(result);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartialRepeatedFields(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy result) {
          if (keysBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0)) {
              keys_ = java.util.Collections.unmodifiableList(keys_);
              bitField0_ = (bitField0_ & ~0x00000002);
            }
            result.keys_ = keys_;
          } else {
            result.keys_ = keysBuilder_.build();
          }
        }

        private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy result) {
          int from_bitField0_ = bitField0_;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.policy_ = policy_;
          }
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy) {
            return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy other) {
          if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.getDefaultInstance()) return this;
          if (!other.getPolicy().isEmpty()) {
            policy_ = other.policy_;
            bitField0_ |= 0x00000001;
            onChanged();
          }
          if (keysBuilder_ == null) {
            if (!other.keys_.isEmpty()) {
              if (keys_.isEmpty()) {
                keys_ = other.keys_;
                bitField0_ = (bitField0_ & ~0x00000002);
              } else {
                ensureKeysIsMutable();
                keys_.addAll(other.keys_);
              }
              onChanged();
            }
          } else {
            if (!other.keys_.isEmpty()) {
              if (keysBuilder_.isEmpty()) {
                keysBuilder_.dispose();
                keysBuilder_ = null;
                keys_ = other.keys_;
                bitField0_ = (bitField0_ & ~0x00000002);
                keysBuilder_ = 
                  com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                     getKeysFieldBuilder() : null;
              } else {
                keysBuilder_.addAllMessages(other.keys_);
              }
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  policy_ = input.readStringRequireUtf8();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                case 18: {
                  com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo m =
                      input.readMessage(
                          com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo.parser(),
                          extensionRegistry);
                  if (keysBuilder_ == null) {
                    ensureKeysIsMutable();
                    keys_.add(m);
                  } else {
                    keysBuilder_.addMessage(m);
                  }
                  break;
                } // case 18
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private java.lang.Object policy_ = "";
        /**
         * <code>string policy = 1;</code>
         * @return The policy.
         */
        public java.lang.String getPolicy() {
          java.lang.Object ref = policy_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            policy_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string policy = 1;</code>
         * @return The bytes for policy.
         */
        public com.google.protobuf.ByteString
            getPolicyBytes() {
          java.lang.Object ref = policy_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            policy_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string policy = 1;</code>
         * @param value The policy to set.
         * @return This builder for chaining.
         */
        public Builder setPolicy(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          policy_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>string policy = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPolicy() {
          policy_ = getDefaultInstance().getPolicy();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }
        /**
         * <code>string policy = 1;</code>
         * @param value The bytes for policy to set.
         * @return This builder for chaining.
         */
        public Builder setPolicyBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          checkByteStringIsUtf8(value);
          policy_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }

        private java.util.List<com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo> keys_ =
          java.util.Collections.emptyList();
        private void ensureKeysIsMutable() {
          if (!((bitField0_ & 0x00000002) != 0)) {
            keys_ = new java.util.ArrayList<com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo>(keys_);
            bitField0_ |= 0x00000002;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilder<
            com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo, com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo.Builder, com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfoOrBuilder> keysBuilder_;

        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public java.util.List<com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo> getKeysList() {
          if (keysBuilder_ == null) {
            return java.util.Collections.unmodifiableList(keys_);
          } else {
            return keysBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public int getKeysCount() {
          if (keysBuilder_ == null) {
            return keys_.size();
          } else {
            return keysBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo getKeys(int index) {
          if (keysBuilder_ == null) {
            return keys_.get(index);
          } else {
            return keysBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public Builder setKeys(
            int index, com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo value) {
          if (keysBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureKeysIsMutable();
            keys_.set(index, value);
            onChanged();
          } else {
            keysBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public Builder setKeys(
            int index, com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo.Builder builderForValue) {
          if (keysBuilder_ == null) {
            ensureKeysIsMutable();
            keys_.set(index, builderForValue.build());
            onChanged();
          } else {
            keysBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public Builder addKeys(com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo value) {
          if (keysBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureKeysIsMutable();
            keys_.add(value);
            onChanged();
          } else {
            keysBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public Builder addKeys(
            int index, com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo value) {
          if (keysBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureKeysIsMutable();
            keys_.add(index, value);
            onChanged();
          } else {
            keysBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public Builder addKeys(
            com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo.Builder builderForValue) {
          if (keysBuilder_ == null) {
            ensureKeysIsMutable();
            keys_.add(builderForValue.build());
            onChanged();
          } else {
            keysBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public Builder addKeys(
            int index, com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo.Builder builderForValue) {
          if (keysBuilder_ == null) {
            ensureKeysIsMutable();
            keys_.add(index, builderForValue.build());
            onChanged();
          } else {
            keysBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public Builder addAllKeys(
            java.lang.Iterable<? extends com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo> values) {
          if (keysBuilder_ == null) {
            ensureKeysIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, keys_);
            onChanged();
          } else {
            keysBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public Builder clearKeys() {
          if (keysBuilder_ == null) {
            keys_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
            onChanged();
          } else {
            keysBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public Builder removeKeys(int index) {
          if (keysBuilder_ == null) {
            ensureKeysIsMutable();
            keys_.remove(index);
            onChanged();
          } else {
            keysBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo.Builder getKeysBuilder(
            int index) {
          return getKeysFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfoOrBuilder getKeysOrBuilder(
            int index) {
          if (keysBuilder_ == null) {
            return keys_.get(index);  } else {
            return keysBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public java.util.List<? extends com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfoOrBuilder> 
             getKeysOrBuilderList() {
          if (keysBuilder_ != null) {
            return keysBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(keys_);
          }
        }
        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo.Builder addKeysBuilder() {
          return getKeysFieldBuilder().addBuilder(
              com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo.getDefaultInstance());
        }
        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo.Builder addKeysBuilder(
            int index) {
          return getKeysFieldBuilder().addBuilder(
              index, com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo.getDefaultInstance());
        }
        /**
         * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.KeyOriginInfo keys = 2;</code>
         */
        public java.util.List<com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo.Builder> 
             getKeysBuilderList() {
          return getKeysFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilder<
            com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo, com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo.Builder, com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfoOrBuilder> 
            getKeysFieldBuilder() {
          if (keysBuilder_ == null) {
            keysBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo, com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfo.Builder, com.sparrowwallet.lark.bitbox02.generated.Common.KeyOriginInfoOrBuilder>(
                    keys_,
                    ((bitField0_ & 0x00000002) != 0),
                    getParentForChildren(),
                    isClean());
            keys_ = null;
          }
          return keysBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy)
      }

      // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy)
      private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy();
      }

      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Policy>
          PARSER = new com.google.protobuf.AbstractParser<Policy>() {
        @java.lang.Override
        public Policy parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Policy> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Policy> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int configCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object config_;
    public enum ConfigCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      SIMPLE_TYPE(1),
      MULTISIG(2),
      POLICY(3),
      CONFIG_NOT_SET(0);
      private final int value;
      private ConfigCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ConfigCase valueOf(int value) {
        return forNumber(value);
      }

      public static ConfigCase forNumber(int value) {
        switch (value) {
          case 1: return SIMPLE_TYPE;
          case 2: return MULTISIG;
          case 3: return POLICY;
          case 0: return CONFIG_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ConfigCase
    getConfigCase() {
      return ConfigCase.forNumber(
          configCase_);
    }

    public static final int SIMPLE_TYPE_FIELD_NUMBER = 1;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.SimpleType simple_type = 1;</code>
     * @return Whether the simpleType field is set.
     */
    public boolean hasSimpleType() {
      return configCase_ == 1;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.SimpleType simple_type = 1;</code>
     * @return The enum numeric value on the wire for simpleType.
     */
    public int getSimpleTypeValue() {
      if (configCase_ == 1) {
        return (java.lang.Integer) config_;
      }
      return 0;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.SimpleType simple_type = 1;</code>
     * @return The simpleType.
     */
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.SimpleType getSimpleType() {
      if (configCase_ == 1) {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.SimpleType result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.SimpleType.forNumber(
            (java.lang.Integer) config_);
        return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.SimpleType.UNRECOGNIZED : result;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.SimpleType.P2WPKH_P2SH;
    }

    public static final int MULTISIG_FIELD_NUMBER = 2;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig multisig = 2;</code>
     * @return Whether the multisig field is set.
     */
    @java.lang.Override
    public boolean hasMultisig() {
      return configCase_ == 2;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig multisig = 2;</code>
     * @return The multisig.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig getMultisig() {
      if (configCase_ == 2) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig) config_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.getDefaultInstance();
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig multisig = 2;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.MultisigOrBuilder getMultisigOrBuilder() {
      if (configCase_ == 2) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig) config_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.getDefaultInstance();
    }

    public static final int POLICY_FIELD_NUMBER = 3;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy policy = 3;</code>
     * @return Whether the policy field is set.
     */
    @java.lang.Override
    public boolean hasPolicy() {
      return configCase_ == 3;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy policy = 3;</code>
     * @return The policy.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy getPolicy() {
      if (configCase_ == 3) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy) config_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.getDefaultInstance();
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy policy = 3;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.PolicyOrBuilder getPolicyOrBuilder() {
      if (configCase_ == 3) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy) config_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (configCase_ == 1) {
        output.writeEnum(1, ((java.lang.Integer) config_));
      }
      if (configCase_ == 2) {
        output.writeMessage(2, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig) config_);
      }
      if (configCase_ == 3) {
        output.writeMessage(3, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy) config_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (configCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, ((java.lang.Integer) config_));
      }
      if (configCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig) config_);
      }
      if (configCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy) config_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig) obj;

      if (!getConfigCase().equals(other.getConfigCase())) return false;
      switch (configCase_) {
        case 1:
          if (getSimpleTypeValue()
              != other.getSimpleTypeValue()) return false;
          break;
        case 2:
          if (!getMultisig()
              .equals(other.getMultisig())) return false;
          break;
        case 3:
          if (!getPolicy()
              .equals(other.getPolicy())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (configCase_) {
        case 1:
          hash = (37 * hash) + SIMPLE_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getSimpleTypeValue();
          break;
        case 2:
          hash = (37 * hash) + MULTISIG_FIELD_NUMBER;
          hash = (53 * hash) + getMultisig().hashCode();
          break;
        case 3:
          hash = (37 * hash) + POLICY_FIELD_NUMBER;
          hash = (53 * hash) + getPolicy().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (multisigBuilder_ != null) {
          multisigBuilder_.clear();
        }
        if (policyBuilder_ != null) {
          policyBuilder_.clear();
        }
        configCase_ = 0;
        config_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig result) {
        result.configCase_ = configCase_;
        result.config_ = this.config_;
        if (configCase_ == 2 &&
            multisigBuilder_ != null) {
          result.config_ = multisigBuilder_.build();
        }
        if (configCase_ == 3 &&
            policyBuilder_ != null) {
          result.config_ = policyBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance()) return this;
        switch (other.getConfigCase()) {
          case SIMPLE_TYPE: {
            setSimpleTypeValue(other.getSimpleTypeValue());
            break;
          }
          case MULTISIG: {
            mergeMultisig(other.getMultisig());
            break;
          }
          case POLICY: {
            mergePolicy(other.getPolicy());
            break;
          }
          case CONFIG_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int rawValue = input.readEnum();
                configCase_ = 1;
                config_ = rawValue;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getMultisigFieldBuilder().getBuilder(),
                    extensionRegistry);
                configCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getPolicyFieldBuilder().getBuilder(),
                    extensionRegistry);
                configCase_ = 3;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int configCase_ = 0;
      private java.lang.Object config_;
      public ConfigCase
          getConfigCase() {
        return ConfigCase.forNumber(
            configCase_);
      }

      public Builder clearConfig() {
        configCase_ = 0;
        config_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.SimpleType simple_type = 1;</code>
       * @return Whether the simpleType field is set.
       */
      @java.lang.Override
      public boolean hasSimpleType() {
        return configCase_ == 1;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.SimpleType simple_type = 1;</code>
       * @return The enum numeric value on the wire for simpleType.
       */
      @java.lang.Override
      public int getSimpleTypeValue() {
        if (configCase_ == 1) {
          return ((java.lang.Integer) config_).intValue();
        }
        return 0;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.SimpleType simple_type = 1;</code>
       * @param value The enum numeric value on the wire for simpleType to set.
       * @return This builder for chaining.
       */
      public Builder setSimpleTypeValue(int value) {
        configCase_ = 1;
        config_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.SimpleType simple_type = 1;</code>
       * @return The simpleType.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.SimpleType getSimpleType() {
        if (configCase_ == 1) {
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.SimpleType result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.SimpleType.forNumber(
              (java.lang.Integer) config_);
          return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.SimpleType.UNRECOGNIZED : result;
        }
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.SimpleType.P2WPKH_P2SH;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.SimpleType simple_type = 1;</code>
       * @param value The simpleType to set.
       * @return This builder for chaining.
       */
      public Builder setSimpleType(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.SimpleType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        configCase_ = 1;
        config_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.SimpleType simple_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSimpleType() {
        if (configCase_ == 1) {
          configCase_ = 0;
          config_ = null;
          onChanged();
        }
        return this;
      }

      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.MultisigOrBuilder> multisigBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig multisig = 2;</code>
       * @return Whether the multisig field is set.
       */
      @java.lang.Override
      public boolean hasMultisig() {
        return configCase_ == 2;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig multisig = 2;</code>
       * @return The multisig.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig getMultisig() {
        if (multisigBuilder_ == null) {
          if (configCase_ == 2) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig) config_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.getDefaultInstance();
        } else {
          if (configCase_ == 2) {
            return multisigBuilder_.getMessage();
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig multisig = 2;</code>
       */
      public Builder setMultisig(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig value) {
        if (multisigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          config_ = value;
          onChanged();
        } else {
          multisigBuilder_.setMessage(value);
        }
        configCase_ = 2;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig multisig = 2;</code>
       */
      public Builder setMultisig(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.Builder builderForValue) {
        if (multisigBuilder_ == null) {
          config_ = builderForValue.build();
          onChanged();
        } else {
          multisigBuilder_.setMessage(builderForValue.build());
        }
        configCase_ = 2;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig multisig = 2;</code>
       */
      public Builder mergeMultisig(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig value) {
        if (multisigBuilder_ == null) {
          if (configCase_ == 2 &&
              config_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.getDefaultInstance()) {
            config_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.newBuilder((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig) config_)
                .mergeFrom(value).buildPartial();
          } else {
            config_ = value;
          }
          onChanged();
        } else {
          if (configCase_ == 2) {
            multisigBuilder_.mergeFrom(value);
          } else {
            multisigBuilder_.setMessage(value);
          }
        }
        configCase_ = 2;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig multisig = 2;</code>
       */
      public Builder clearMultisig() {
        if (multisigBuilder_ == null) {
          if (configCase_ == 2) {
            configCase_ = 0;
            config_ = null;
            onChanged();
          }
        } else {
          if (configCase_ == 2) {
            configCase_ = 0;
            config_ = null;
          }
          multisigBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig multisig = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.Builder getMultisigBuilder() {
        return getMultisigFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig multisig = 2;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.MultisigOrBuilder getMultisigOrBuilder() {
        if ((configCase_ == 2) && (multisigBuilder_ != null)) {
          return multisigBuilder_.getMessageOrBuilder();
        } else {
          if (configCase_ == 2) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig) config_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Multisig multisig = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.MultisigOrBuilder> 
          getMultisigFieldBuilder() {
        if (multisigBuilder_ == null) {
          if (!(configCase_ == 2)) {
            config_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.getDefaultInstance();
          }
          multisigBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.MultisigOrBuilder>(
                  (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Multisig) config_,
                  getParentForChildren(),
                  isClean());
          config_ = null;
        }
        configCase_ = 2;
        onChanged();
        return multisigBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.PolicyOrBuilder> policyBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy policy = 3;</code>
       * @return Whether the policy field is set.
       */
      @java.lang.Override
      public boolean hasPolicy() {
        return configCase_ == 3;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy policy = 3;</code>
       * @return The policy.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy getPolicy() {
        if (policyBuilder_ == null) {
          if (configCase_ == 3) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy) config_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.getDefaultInstance();
        } else {
          if (configCase_ == 3) {
            return policyBuilder_.getMessage();
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy policy = 3;</code>
       */
      public Builder setPolicy(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy value) {
        if (policyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          config_ = value;
          onChanged();
        } else {
          policyBuilder_.setMessage(value);
        }
        configCase_ = 3;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy policy = 3;</code>
       */
      public Builder setPolicy(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.Builder builderForValue) {
        if (policyBuilder_ == null) {
          config_ = builderForValue.build();
          onChanged();
        } else {
          policyBuilder_.setMessage(builderForValue.build());
        }
        configCase_ = 3;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy policy = 3;</code>
       */
      public Builder mergePolicy(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy value) {
        if (policyBuilder_ == null) {
          if (configCase_ == 3 &&
              config_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.getDefaultInstance()) {
            config_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.newBuilder((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy) config_)
                .mergeFrom(value).buildPartial();
          } else {
            config_ = value;
          }
          onChanged();
        } else {
          if (configCase_ == 3) {
            policyBuilder_.mergeFrom(value);
          } else {
            policyBuilder_.setMessage(value);
          }
        }
        configCase_ = 3;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy policy = 3;</code>
       */
      public Builder clearPolicy() {
        if (policyBuilder_ == null) {
          if (configCase_ == 3) {
            configCase_ = 0;
            config_ = null;
            onChanged();
          }
        } else {
          if (configCase_ == 3) {
            configCase_ = 0;
            config_ = null;
          }
          policyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy policy = 3;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.Builder getPolicyBuilder() {
        return getPolicyFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy policy = 3;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.PolicyOrBuilder getPolicyOrBuilder() {
        if ((configCase_ == 3) && (policyBuilder_ != null)) {
          return policyBuilder_.getMessageOrBuilder();
        } else {
          if (configCase_ == 3) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy) config_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig.Policy policy = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.PolicyOrBuilder> 
          getPolicyFieldBuilder() {
        if (policyBuilder_ == null) {
          if (!(configCase_ == 3)) {
            config_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.getDefaultInstance();
          }
          policyBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.PolicyOrBuilder>(
                  (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Policy) config_,
                  getParentForChildren(),
                  isClean());
          config_ = null;
        }
        configCase_ = 3;
        onChanged();
        return policyBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCScriptConfig>
        PARSER = new com.google.protobuf.AbstractParser<BTCScriptConfig>() {
      @java.lang.Override
      public BTCScriptConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCScriptConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCScriptConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCPubRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
     * @return The enum numeric value on the wire for coin.
     */
    int getCoinValue();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
     * @return The coin.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin getCoin();

    /**
     * <code>repeated uint32 keypath = 2;</code>
     * @return A list containing the keypath.
     */
    java.util.List<java.lang.Integer> getKeypathList();
    /**
     * <code>repeated uint32 keypath = 2;</code>
     * @return The count of keypath.
     */
    int getKeypathCount();
    /**
     * <code>repeated uint32 keypath = 2;</code>
     * @param index The index of the element to return.
     * @return The keypath at the given index.
     */
    int getKeypath(int index);

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest.XPubType xpub_type = 3;</code>
     * @return Whether the xpubType field is set.
     */
    boolean hasXpubType();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest.XPubType xpub_type = 3;</code>
     * @return The enum numeric value on the wire for xpubType.
     */
    int getXpubTypeValue();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest.XPubType xpub_type = 3;</code>
     * @return The xpubType.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.XPubType getXpubType();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 4;</code>
     * @return Whether the scriptConfig field is set.
     */
    boolean hasScriptConfig();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 4;</code>
     * @return The scriptConfig.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig getScriptConfig();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 4;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder getScriptConfigOrBuilder();

    /**
     * <code>bool display = 5;</code>
     * @return The display.
     */
    boolean getDisplay();

    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.OutputCase getOutputCase();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest}
   */
  public static final class BTCPubRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest)
      BTCPubRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCPubRequest.class.getName());
    }
    // Use BTCPubRequest.newBuilder() to construct.
    private BTCPubRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCPubRequest() {
      coin_ = 0;
      keypath_ = emptyIntList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPubRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPubRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.Builder.class);
    }

    /**
     * Protobuf enum {@code com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest.XPubType}
     */
    public enum XPubType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TPUB = 0;</code>
       */
      TPUB(0),
      /**
       * <code>XPUB = 1;</code>
       */
      XPUB(1),
      /**
       * <code>YPUB = 2;</code>
       */
      YPUB(2),
      /**
       * <pre>
       * zpub
       * </pre>
       *
       * <code>ZPUB = 3;</code>
       */
      ZPUB(3),
      /**
       * <pre>
       * vpub
       * </pre>
       *
       * <code>VPUB = 4;</code>
       */
      VPUB(4),
      /**
       * <code>UPUB = 5;</code>
       */
      UPUB(5),
      /**
       * <pre>
       * Vpub
       * </pre>
       *
       * <code>CAPITAL_VPUB = 6;</code>
       */
      CAPITAL_VPUB(6),
      /**
       * <pre>
       * Zpub
       * </pre>
       *
       * <code>CAPITAL_ZPUB = 7;</code>
       */
      CAPITAL_ZPUB(7),
      /**
       * <pre>
       * Upub
       * </pre>
       *
       * <code>CAPITAL_UPUB = 8;</code>
       */
      CAPITAL_UPUB(8),
      /**
       * <pre>
       * Ypub
       * </pre>
       *
       * <code>CAPITAL_YPUB = 9;</code>
       */
      CAPITAL_YPUB(9),
      UNRECOGNIZED(-1),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          XPubType.class.getName());
      }
      /**
       * <code>TPUB = 0;</code>
       */
      public static final int TPUB_VALUE = 0;
      /**
       * <code>XPUB = 1;</code>
       */
      public static final int XPUB_VALUE = 1;
      /**
       * <code>YPUB = 2;</code>
       */
      public static final int YPUB_VALUE = 2;
      /**
       * <pre>
       * zpub
       * </pre>
       *
       * <code>ZPUB = 3;</code>
       */
      public static final int ZPUB_VALUE = 3;
      /**
       * <pre>
       * vpub
       * </pre>
       *
       * <code>VPUB = 4;</code>
       */
      public static final int VPUB_VALUE = 4;
      /**
       * <code>UPUB = 5;</code>
       */
      public static final int UPUB_VALUE = 5;
      /**
       * <pre>
       * Vpub
       * </pre>
       *
       * <code>CAPITAL_VPUB = 6;</code>
       */
      public static final int CAPITAL_VPUB_VALUE = 6;
      /**
       * <pre>
       * Zpub
       * </pre>
       *
       * <code>CAPITAL_ZPUB = 7;</code>
       */
      public static final int CAPITAL_ZPUB_VALUE = 7;
      /**
       * <pre>
       * Upub
       * </pre>
       *
       * <code>CAPITAL_UPUB = 8;</code>
       */
      public static final int CAPITAL_UPUB_VALUE = 8;
      /**
       * <pre>
       * Ypub
       * </pre>
       *
       * <code>CAPITAL_YPUB = 9;</code>
       */
      public static final int CAPITAL_YPUB_VALUE = 9;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static XPubType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static XPubType forNumber(int value) {
        switch (value) {
          case 0: return TPUB;
          case 1: return XPUB;
          case 2: return YPUB;
          case 3: return ZPUB;
          case 4: return VPUB;
          case 5: return UPUB;
          case 6: return CAPITAL_VPUB;
          case 7: return CAPITAL_ZPUB;
          case 8: return CAPITAL_UPUB;
          case 9: return CAPITAL_YPUB;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<XPubType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          XPubType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<XPubType>() {
              public XPubType findValueByNumber(int number) {
                return XPubType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.getDescriptor().getEnumTypes().get(0);
      }

      private static final XPubType[] VALUES = values();

      public static XPubType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private XPubType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest.XPubType)
    }

    private int outputCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object output_;
    public enum OutputCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      XPUB_TYPE(3),
      SCRIPT_CONFIG(4),
      OUTPUT_NOT_SET(0);
      private final int value;
      private OutputCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OutputCase valueOf(int value) {
        return forNumber(value);
      }

      public static OutputCase forNumber(int value) {
        switch (value) {
          case 3: return XPUB_TYPE;
          case 4: return SCRIPT_CONFIG;
          case 0: return OUTPUT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public OutputCase
    getOutputCase() {
      return OutputCase.forNumber(
          outputCase_);
    }

    public static final int COIN_FIELD_NUMBER = 1;
    private int coin_ = 0;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
     * @return The enum numeric value on the wire for coin.
     */
    @java.lang.Override public int getCoinValue() {
      return coin_;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
     * @return The coin.
     */
    @java.lang.Override public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin getCoin() {
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.forNumber(coin_);
      return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.UNRECOGNIZED : result;
    }

    public static final int KEYPATH_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList keypath_ =
        emptyIntList();
    /**
     * <code>repeated uint32 keypath = 2;</code>
     * @return A list containing the keypath.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getKeypathList() {
      return keypath_;
    }
    /**
     * <code>repeated uint32 keypath = 2;</code>
     * @return The count of keypath.
     */
    public int getKeypathCount() {
      return keypath_.size();
    }
    /**
     * <code>repeated uint32 keypath = 2;</code>
     * @param index The index of the element to return.
     * @return The keypath at the given index.
     */
    public int getKeypath(int index) {
      return keypath_.getInt(index);
    }
    private int keypathMemoizedSerializedSize = -1;

    public static final int XPUB_TYPE_FIELD_NUMBER = 3;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest.XPubType xpub_type = 3;</code>
     * @return Whether the xpubType field is set.
     */
    public boolean hasXpubType() {
      return outputCase_ == 3;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest.XPubType xpub_type = 3;</code>
     * @return The enum numeric value on the wire for xpubType.
     */
    public int getXpubTypeValue() {
      if (outputCase_ == 3) {
        return (java.lang.Integer) output_;
      }
      return 0;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest.XPubType xpub_type = 3;</code>
     * @return The xpubType.
     */
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.XPubType getXpubType() {
      if (outputCase_ == 3) {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.XPubType result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.XPubType.forNumber(
            (java.lang.Integer) output_);
        return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.XPubType.UNRECOGNIZED : result;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.XPubType.TPUB;
    }

    public static final int SCRIPT_CONFIG_FIELD_NUMBER = 4;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 4;</code>
     * @return Whether the scriptConfig field is set.
     */
    @java.lang.Override
    public boolean hasScriptConfig() {
      return outputCase_ == 4;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 4;</code>
     * @return The scriptConfig.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig getScriptConfig() {
      if (outputCase_ == 4) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig) output_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance();
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 4;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder getScriptConfigOrBuilder() {
      if (outputCase_ == 4) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig) output_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance();
    }

    public static final int DISPLAY_FIELD_NUMBER = 5;
    private boolean display_ = false;
    /**
     * <code>bool display = 5;</code>
     * @return The display.
     */
    @java.lang.Override
    public boolean getDisplay() {
      return display_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (coin_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.BTC.getNumber()) {
        output.writeEnum(1, coin_);
      }
      if (getKeypathList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(keypathMemoizedSerializedSize);
      }
      for (int i = 0; i < keypath_.size(); i++) {
        output.writeUInt32NoTag(keypath_.getInt(i));
      }
      if (outputCase_ == 3) {
        output.writeEnum(3, ((java.lang.Integer) output_));
      }
      if (outputCase_ == 4) {
        output.writeMessage(4, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig) output_);
      }
      if (display_ != false) {
        output.writeBool(5, display_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (coin_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.BTC.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, coin_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < keypath_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(keypath_.getInt(i));
        }
        size += dataSize;
        if (!getKeypathList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        keypathMemoizedSerializedSize = dataSize;
      }
      if (outputCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, ((java.lang.Integer) output_));
      }
      if (outputCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig) output_);
      }
      if (display_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, display_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest) obj;

      if (coin_ != other.coin_) return false;
      if (!getKeypathList()
          .equals(other.getKeypathList())) return false;
      if (getDisplay()
          != other.getDisplay()) return false;
      if (!getOutputCase().equals(other.getOutputCase())) return false;
      switch (outputCase_) {
        case 3:
          if (getXpubTypeValue()
              != other.getXpubTypeValue()) return false;
          break;
        case 4:
          if (!getScriptConfig()
              .equals(other.getScriptConfig())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + COIN_FIELD_NUMBER;
      hash = (53 * hash) + coin_;
      if (getKeypathCount() > 0) {
        hash = (37 * hash) + KEYPATH_FIELD_NUMBER;
        hash = (53 * hash) + getKeypathList().hashCode();
      }
      hash = (37 * hash) + DISPLAY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDisplay());
      switch (outputCase_) {
        case 3:
          hash = (37 * hash) + XPUB_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getXpubTypeValue();
          break;
        case 4:
          hash = (37 * hash) + SCRIPT_CONFIG_FIELD_NUMBER;
          hash = (53 * hash) + getScriptConfig().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPubRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPubRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        coin_ = 0;
        keypath_ = emptyIntList();
        if (scriptConfigBuilder_ != null) {
          scriptConfigBuilder_.clear();
        }
        display_ = false;
        outputCase_ = 0;
        output_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPubRequest_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.coin_ = coin_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          keypath_.makeImmutable();
          result.keypath_ = keypath_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.display_ = display_;
        }
      }

      private void buildPartialOneofs(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest result) {
        result.outputCase_ = outputCase_;
        result.output_ = this.output_;
        if (outputCase_ == 4 &&
            scriptConfigBuilder_ != null) {
          result.output_ = scriptConfigBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.getDefaultInstance()) return this;
        if (other.coin_ != 0) {
          setCoinValue(other.getCoinValue());
        }
        if (!other.keypath_.isEmpty()) {
          if (keypath_.isEmpty()) {
            keypath_ = other.keypath_;
            keypath_.makeImmutable();
            bitField0_ |= 0x00000002;
          } else {
            ensureKeypathIsMutable();
            keypath_.addAll(other.keypath_);
          }
          onChanged();
        }
        if (other.getDisplay() != false) {
          setDisplay(other.getDisplay());
        }
        switch (other.getOutputCase()) {
          case XPUB_TYPE: {
            setXpubTypeValue(other.getXpubTypeValue());
            break;
          }
          case SCRIPT_CONFIG: {
            mergeScriptConfig(other.getScriptConfig());
            break;
          }
          case OUTPUT_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                coin_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                int v = input.readUInt32();
                ensureKeypathIsMutable();
                keypath_.addInt(v);
                break;
              } // case 16
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureKeypathIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  keypath_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 18
              case 24: {
                int rawValue = input.readEnum();
                outputCase_ = 3;
                output_ = rawValue;
                break;
              } // case 24
              case 34: {
                input.readMessage(
                    getScriptConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                outputCase_ = 4;
                break;
              } // case 34
              case 40: {
                display_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int outputCase_ = 0;
      private java.lang.Object output_;
      public OutputCase
          getOutputCase() {
        return OutputCase.forNumber(
            outputCase_);
      }

      public Builder clearOutput() {
        outputCase_ = 0;
        output_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private int coin_ = 0;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @return The enum numeric value on the wire for coin.
       */
      @java.lang.Override public int getCoinValue() {
        return coin_;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @param value The enum numeric value on the wire for coin to set.
       * @return This builder for chaining.
       */
      public Builder setCoinValue(int value) {
        coin_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @return The coin.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin getCoin() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.forNumber(coin_);
        return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.UNRECOGNIZED : result;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @param value The coin to set.
       * @return This builder for chaining.
       */
      public Builder setCoin(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        coin_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCoin() {
        bitField0_ = (bitField0_ & ~0x00000001);
        coin_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList keypath_ = emptyIntList();
      private void ensureKeypathIsMutable() {
        if (!keypath_.isModifiable()) {
          keypath_ = makeMutableCopy(keypath_);
        }
        bitField0_ |= 0x00000002;
      }
      /**
       * <code>repeated uint32 keypath = 2;</code>
       * @return A list containing the keypath.
       */
      public java.util.List<java.lang.Integer>
          getKeypathList() {
        keypath_.makeImmutable();
        return keypath_;
      }
      /**
       * <code>repeated uint32 keypath = 2;</code>
       * @return The count of keypath.
       */
      public int getKeypathCount() {
        return keypath_.size();
      }
      /**
       * <code>repeated uint32 keypath = 2;</code>
       * @param index The index of the element to return.
       * @return The keypath at the given index.
       */
      public int getKeypath(int index) {
        return keypath_.getInt(index);
      }
      /**
       * <code>repeated uint32 keypath = 2;</code>
       * @param index The index to set the value at.
       * @param value The keypath to set.
       * @return This builder for chaining.
       */
      public Builder setKeypath(
          int index, int value) {

        ensureKeypathIsMutable();
        keypath_.setInt(index, value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 keypath = 2;</code>
       * @param value The keypath to add.
       * @return This builder for chaining.
       */
      public Builder addKeypath(int value) {

        ensureKeypathIsMutable();
        keypath_.addInt(value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 keypath = 2;</code>
       * @param values The keypath to add.
       * @return This builder for chaining.
       */
      public Builder addAllKeypath(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureKeypathIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, keypath_);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 keypath = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearKeypath() {
        keypath_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest.XPubType xpub_type = 3;</code>
       * @return Whether the xpubType field is set.
       */
      @java.lang.Override
      public boolean hasXpubType() {
        return outputCase_ == 3;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest.XPubType xpub_type = 3;</code>
       * @return The enum numeric value on the wire for xpubType.
       */
      @java.lang.Override
      public int getXpubTypeValue() {
        if (outputCase_ == 3) {
          return ((java.lang.Integer) output_).intValue();
        }
        return 0;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest.XPubType xpub_type = 3;</code>
       * @param value The enum numeric value on the wire for xpubType to set.
       * @return This builder for chaining.
       */
      public Builder setXpubTypeValue(int value) {
        outputCase_ = 3;
        output_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest.XPubType xpub_type = 3;</code>
       * @return The xpubType.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.XPubType getXpubType() {
        if (outputCase_ == 3) {
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.XPubType result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.XPubType.forNumber(
              (java.lang.Integer) output_);
          return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.XPubType.UNRECOGNIZED : result;
        }
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.XPubType.TPUB;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest.XPubType xpub_type = 3;</code>
       * @param value The xpubType to set.
       * @return This builder for chaining.
       */
      public Builder setXpubType(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest.XPubType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        outputCase_ = 3;
        output_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest.XPubType xpub_type = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearXpubType() {
        if (outputCase_ == 3) {
          outputCase_ = 0;
          output_ = null;
          onChanged();
        }
        return this;
      }

      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder> scriptConfigBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 4;</code>
       * @return Whether the scriptConfig field is set.
       */
      @java.lang.Override
      public boolean hasScriptConfig() {
        return outputCase_ == 4;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 4;</code>
       * @return The scriptConfig.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig getScriptConfig() {
        if (scriptConfigBuilder_ == null) {
          if (outputCase_ == 4) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig) output_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance();
        } else {
          if (outputCase_ == 4) {
            return scriptConfigBuilder_.getMessage();
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 4;</code>
       */
      public Builder setScriptConfig(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig value) {
        if (scriptConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          output_ = value;
          onChanged();
        } else {
          scriptConfigBuilder_.setMessage(value);
        }
        outputCase_ = 4;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 4;</code>
       */
      public Builder setScriptConfig(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Builder builderForValue) {
        if (scriptConfigBuilder_ == null) {
          output_ = builderForValue.build();
          onChanged();
        } else {
          scriptConfigBuilder_.setMessage(builderForValue.build());
        }
        outputCase_ = 4;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 4;</code>
       */
      public Builder mergeScriptConfig(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig value) {
        if (scriptConfigBuilder_ == null) {
          if (outputCase_ == 4 &&
              output_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance()) {
            output_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.newBuilder((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig) output_)
                .mergeFrom(value).buildPartial();
          } else {
            output_ = value;
          }
          onChanged();
        } else {
          if (outputCase_ == 4) {
            scriptConfigBuilder_.mergeFrom(value);
          } else {
            scriptConfigBuilder_.setMessage(value);
          }
        }
        outputCase_ = 4;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 4;</code>
       */
      public Builder clearScriptConfig() {
        if (scriptConfigBuilder_ == null) {
          if (outputCase_ == 4) {
            outputCase_ = 0;
            output_ = null;
            onChanged();
          }
        } else {
          if (outputCase_ == 4) {
            outputCase_ = 0;
            output_ = null;
          }
          scriptConfigBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 4;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Builder getScriptConfigBuilder() {
        return getScriptConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 4;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder getScriptConfigOrBuilder() {
        if ((outputCase_ == 4) && (scriptConfigBuilder_ != null)) {
          return scriptConfigBuilder_.getMessageOrBuilder();
        } else {
          if (outputCase_ == 4) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig) output_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder> 
          getScriptConfigFieldBuilder() {
        if (scriptConfigBuilder_ == null) {
          if (!(outputCase_ == 4)) {
            output_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance();
          }
          scriptConfigBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder>(
                  (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig) output_,
                  getParentForChildren(),
                  isClean());
          output_ = null;
        }
        outputCase_ = 4;
        onChanged();
        return scriptConfigBuilder_;
      }

      private boolean display_ ;
      /**
       * <code>bool display = 5;</code>
       * @return The display.
       */
      @java.lang.Override
      public boolean getDisplay() {
        return display_;
      }
      /**
       * <code>bool display = 5;</code>
       * @param value The display to set.
       * @return This builder for chaining.
       */
      public Builder setDisplay(boolean value) {

        display_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>bool display = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearDisplay() {
        bitField0_ = (bitField0_ & ~0x00000010);
        display_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCPubRequest)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCPubRequest>
        PARSER = new com.google.protobuf.AbstractParser<BTCPubRequest>() {
      @java.lang.Override
      public BTCPubRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCPubRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCPubRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPubRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCScriptConfigWithKeypathOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
     * @return Whether the scriptConfig field is set.
     */
    boolean hasScriptConfig();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
     * @return The scriptConfig.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig getScriptConfig();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder getScriptConfigOrBuilder();

    /**
     * <code>repeated uint32 keypath = 3;</code>
     * @return A list containing the keypath.
     */
    java.util.List<java.lang.Integer> getKeypathList();
    /**
     * <code>repeated uint32 keypath = 3;</code>
     * @return The count of keypath.
     */
    int getKeypathCount();
    /**
     * <code>repeated uint32 keypath = 3;</code>
     * @param index The index of the element to return.
     * @return The keypath at the given index.
     */
    int getKeypath(int index);
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath}
   */
  public static final class BTCScriptConfigWithKeypath extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath)
      BTCScriptConfigWithKeypathOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCScriptConfigWithKeypath.class.getName());
    }
    // Use BTCScriptConfigWithKeypath.newBuilder() to construct.
    private BTCScriptConfigWithKeypath(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCScriptConfigWithKeypath() {
      keypath_ = emptyIntList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigWithKeypath_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigWithKeypath_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.Builder.class);
    }

    private int bitField0_;
    public static final int SCRIPT_CONFIG_FIELD_NUMBER = 2;
    private com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig scriptConfig_;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
     * @return Whether the scriptConfig field is set.
     */
    @java.lang.Override
    public boolean hasScriptConfig() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
     * @return The scriptConfig.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig getScriptConfig() {
      return scriptConfig_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance() : scriptConfig_;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder getScriptConfigOrBuilder() {
      return scriptConfig_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance() : scriptConfig_;
    }

    public static final int KEYPATH_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList keypath_ =
        emptyIntList();
    /**
     * <code>repeated uint32 keypath = 3;</code>
     * @return A list containing the keypath.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getKeypathList() {
      return keypath_;
    }
    /**
     * <code>repeated uint32 keypath = 3;</code>
     * @return The count of keypath.
     */
    public int getKeypathCount() {
      return keypath_.size();
    }
    /**
     * <code>repeated uint32 keypath = 3;</code>
     * @param index The index of the element to return.
     * @return The keypath at the given index.
     */
    public int getKeypath(int index) {
      return keypath_.getInt(index);
    }
    private int keypathMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(2, getScriptConfig());
      }
      if (getKeypathList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(keypathMemoizedSerializedSize);
      }
      for (int i = 0; i < keypath_.size(); i++) {
        output.writeUInt32NoTag(keypath_.getInt(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getScriptConfig());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < keypath_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(keypath_.getInt(i));
        }
        size += dataSize;
        if (!getKeypathList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        keypathMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath) obj;

      if (hasScriptConfig() != other.hasScriptConfig()) return false;
      if (hasScriptConfig()) {
        if (!getScriptConfig()
            .equals(other.getScriptConfig())) return false;
      }
      if (!getKeypathList()
          .equals(other.getKeypathList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasScriptConfig()) {
        hash = (37 * hash) + SCRIPT_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getScriptConfig().hashCode();
      }
      if (getKeypathCount() > 0) {
        hash = (37 * hash) + KEYPATH_FIELD_NUMBER;
        hash = (53 * hash) + getKeypathList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypathOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigWithKeypath_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigWithKeypath_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getScriptConfigFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        scriptConfig_ = null;
        if (scriptConfigBuilder_ != null) {
          scriptConfigBuilder_.dispose();
          scriptConfigBuilder_ = null;
        }
        keypath_ = emptyIntList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigWithKeypath_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.scriptConfig_ = scriptConfigBuilder_ == null
              ? scriptConfig_
              : scriptConfigBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          keypath_.makeImmutable();
          result.keypath_ = keypath_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.getDefaultInstance()) return this;
        if (other.hasScriptConfig()) {
          mergeScriptConfig(other.getScriptConfig());
        }
        if (!other.keypath_.isEmpty()) {
          if (keypath_.isEmpty()) {
            keypath_ = other.keypath_;
            keypath_.makeImmutable();
            bitField0_ |= 0x00000002;
          } else {
            ensureKeypathIsMutable();
            keypath_.addAll(other.keypath_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 18: {
                input.readMessage(
                    getScriptConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 18
              case 24: {
                int v = input.readUInt32();
                ensureKeypathIsMutable();
                keypath_.addInt(v);
                break;
              } // case 24
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureKeypathIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  keypath_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig scriptConfig_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder> scriptConfigBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       * @return Whether the scriptConfig field is set.
       */
      public boolean hasScriptConfig() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       * @return The scriptConfig.
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig getScriptConfig() {
        if (scriptConfigBuilder_ == null) {
          return scriptConfig_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance() : scriptConfig_;
        } else {
          return scriptConfigBuilder_.getMessage();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       */
      public Builder setScriptConfig(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig value) {
        if (scriptConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          scriptConfig_ = value;
        } else {
          scriptConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       */
      public Builder setScriptConfig(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Builder builderForValue) {
        if (scriptConfigBuilder_ == null) {
          scriptConfig_ = builderForValue.build();
        } else {
          scriptConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       */
      public Builder mergeScriptConfig(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig value) {
        if (scriptConfigBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            scriptConfig_ != null &&
            scriptConfig_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance()) {
            getScriptConfigBuilder().mergeFrom(value);
          } else {
            scriptConfig_ = value;
          }
        } else {
          scriptConfigBuilder_.mergeFrom(value);
        }
        if (scriptConfig_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       */
      public Builder clearScriptConfig() {
        bitField0_ = (bitField0_ & ~0x00000001);
        scriptConfig_ = null;
        if (scriptConfigBuilder_ != null) {
          scriptConfigBuilder_.dispose();
          scriptConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Builder getScriptConfigBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getScriptConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder getScriptConfigOrBuilder() {
        if (scriptConfigBuilder_ != null) {
          return scriptConfigBuilder_.getMessageOrBuilder();
        } else {
          return scriptConfig_ == null ?
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance() : scriptConfig_;
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder> 
          getScriptConfigFieldBuilder() {
        if (scriptConfigBuilder_ == null) {
          scriptConfigBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder>(
                  getScriptConfig(),
                  getParentForChildren(),
                  isClean());
          scriptConfig_ = null;
        }
        return scriptConfigBuilder_;
      }

      private com.google.protobuf.Internal.IntList keypath_ = emptyIntList();
      private void ensureKeypathIsMutable() {
        if (!keypath_.isModifiable()) {
          keypath_ = makeMutableCopy(keypath_);
        }
        bitField0_ |= 0x00000002;
      }
      /**
       * <code>repeated uint32 keypath = 3;</code>
       * @return A list containing the keypath.
       */
      public java.util.List<java.lang.Integer>
          getKeypathList() {
        keypath_.makeImmutable();
        return keypath_;
      }
      /**
       * <code>repeated uint32 keypath = 3;</code>
       * @return The count of keypath.
       */
      public int getKeypathCount() {
        return keypath_.size();
      }
      /**
       * <code>repeated uint32 keypath = 3;</code>
       * @param index The index of the element to return.
       * @return The keypath at the given index.
       */
      public int getKeypath(int index) {
        return keypath_.getInt(index);
      }
      /**
       * <code>repeated uint32 keypath = 3;</code>
       * @param index The index to set the value at.
       * @param value The keypath to set.
       * @return This builder for chaining.
       */
      public Builder setKeypath(
          int index, int value) {

        ensureKeypathIsMutable();
        keypath_.setInt(index, value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 keypath = 3;</code>
       * @param value The keypath to add.
       * @return This builder for chaining.
       */
      public Builder addKeypath(int value) {

        ensureKeypathIsMutable();
        keypath_.addInt(value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 keypath = 3;</code>
       * @param values The keypath to add.
       * @return This builder for chaining.
       */
      public Builder addAllKeypath(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureKeypathIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, keypath_);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 keypath = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearKeypath() {
        keypath_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCScriptConfigWithKeypath>
        PARSER = new com.google.protobuf.AbstractParser<BTCScriptConfigWithKeypath>() {
      @java.lang.Override
      public BTCScriptConfigWithKeypath parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCScriptConfigWithKeypath> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCScriptConfigWithKeypath> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCSignInitRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
     * @return The enum numeric value on the wire for coin.
     */
    int getCoinValue();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
     * @return The coin.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin getCoin();

    /**
     * <pre>
     * used script configs in inputs and changes
     * </pre>
     *
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
     */
    java.util.List<com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath> 
        getScriptConfigsList();
    /**
     * <pre>
     * used script configs in inputs and changes
     * </pre>
     *
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath getScriptConfigs(int index);
    /**
     * <pre>
     * used script configs in inputs and changes
     * </pre>
     *
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
     */
    int getScriptConfigsCount();
    /**
     * <pre>
     * used script configs in inputs and changes
     * </pre>
     *
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
     */
    java.util.List<? extends com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypathOrBuilder> 
        getScriptConfigsOrBuilderList();
    /**
     * <pre>
     * used script configs in inputs and changes
     * </pre>
     *
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypathOrBuilder getScriptConfigsOrBuilder(
        int index);

    /**
     * <pre>
     * must be 1 or 2
     * </pre>
     *
     * <code>uint32 version = 4;</code>
     * @return The version.
     */
    int getVersion();

    /**
     * <code>uint32 num_inputs = 5;</code>
     * @return The numInputs.
     */
    int getNumInputs();

    /**
     * <code>uint32 num_outputs = 6;</code>
     * @return The numOutputs.
     */
    int getNumOutputs();

    /**
     * <pre>
     * must be &lt;500000000
     * </pre>
     *
     * <code>uint32 locktime = 7;</code>
     * @return The locktime.
     */
    int getLocktime();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest.FormatUnit format_unit = 8;</code>
     * @return The enum numeric value on the wire for formatUnit.
     */
    int getFormatUnitValue();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest.FormatUnit format_unit = 8;</code>
     * @return The formatUnit.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.FormatUnit getFormatUnit();

    /**
     * <code>bool contains_silent_payment_outputs = 9;</code>
     * @return The containsSilentPaymentOutputs.
     */
    boolean getContainsSilentPaymentOutputs();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest}
   */
  public static final class BTCSignInitRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest)
      BTCSignInitRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCSignInitRequest.class.getName());
    }
    // Use BTCSignInitRequest.newBuilder() to construct.
    private BTCSignInitRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCSignInitRequest() {
      coin_ = 0;
      scriptConfigs_ = java.util.Collections.emptyList();
      formatUnit_ = 0;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInitRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInitRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.Builder.class);
    }

    /**
     * Protobuf enum {@code com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest.FormatUnit}
     */
    public enum FormatUnit
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * According to `coin` (BTC, LTC, etc.).
       * </pre>
       *
       * <code>DEFAULT = 0;</code>
       */
      DEFAULT(0),
      /**
       * <pre>
       * Only valid for BTC/TBTC, formats as "sat"/"tsat".
       * </pre>
       *
       * <code>SAT = 1;</code>
       */
      SAT(1),
      UNRECOGNIZED(-1),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          FormatUnit.class.getName());
      }
      /**
       * <pre>
       * According to `coin` (BTC, LTC, etc.).
       * </pre>
       *
       * <code>DEFAULT = 0;</code>
       */
      public static final int DEFAULT_VALUE = 0;
      /**
       * <pre>
       * Only valid for BTC/TBTC, formats as "sat"/"tsat".
       * </pre>
       *
       * <code>SAT = 1;</code>
       */
      public static final int SAT_VALUE = 1;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FormatUnit valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static FormatUnit forNumber(int value) {
        switch (value) {
          case 0: return DEFAULT;
          case 1: return SAT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FormatUnit>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          FormatUnit> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FormatUnit>() {
              public FormatUnit findValueByNumber(int number) {
                return FormatUnit.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.getDescriptor().getEnumTypes().get(0);
      }

      private static final FormatUnit[] VALUES = values();

      public static FormatUnit valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private FormatUnit(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest.FormatUnit)
    }

    public static final int COIN_FIELD_NUMBER = 1;
    private int coin_ = 0;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
     * @return The enum numeric value on the wire for coin.
     */
    @java.lang.Override public int getCoinValue() {
      return coin_;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
     * @return The coin.
     */
    @java.lang.Override public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin getCoin() {
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.forNumber(coin_);
      return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.UNRECOGNIZED : result;
    }

    public static final int SCRIPT_CONFIGS_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath> scriptConfigs_;
    /**
     * <pre>
     * used script configs in inputs and changes
     * </pre>
     *
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
     */
    @java.lang.Override
    public java.util.List<com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath> getScriptConfigsList() {
      return scriptConfigs_;
    }
    /**
     * <pre>
     * used script configs in inputs and changes
     * </pre>
     *
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypathOrBuilder> 
        getScriptConfigsOrBuilderList() {
      return scriptConfigs_;
    }
    /**
     * <pre>
     * used script configs in inputs and changes
     * </pre>
     *
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
     */
    @java.lang.Override
    public int getScriptConfigsCount() {
      return scriptConfigs_.size();
    }
    /**
     * <pre>
     * used script configs in inputs and changes
     * </pre>
     *
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath getScriptConfigs(int index) {
      return scriptConfigs_.get(index);
    }
    /**
     * <pre>
     * used script configs in inputs and changes
     * </pre>
     *
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypathOrBuilder getScriptConfigsOrBuilder(
        int index) {
      return scriptConfigs_.get(index);
    }

    public static final int VERSION_FIELD_NUMBER = 4;
    private int version_ = 0;
    /**
     * <pre>
     * must be 1 or 2
     * </pre>
     *
     * <code>uint32 version = 4;</code>
     * @return The version.
     */
    @java.lang.Override
    public int getVersion() {
      return version_;
    }

    public static final int NUM_INPUTS_FIELD_NUMBER = 5;
    private int numInputs_ = 0;
    /**
     * <code>uint32 num_inputs = 5;</code>
     * @return The numInputs.
     */
    @java.lang.Override
    public int getNumInputs() {
      return numInputs_;
    }

    public static final int NUM_OUTPUTS_FIELD_NUMBER = 6;
    private int numOutputs_ = 0;
    /**
     * <code>uint32 num_outputs = 6;</code>
     * @return The numOutputs.
     */
    @java.lang.Override
    public int getNumOutputs() {
      return numOutputs_;
    }

    public static final int LOCKTIME_FIELD_NUMBER = 7;
    private int locktime_ = 0;
    /**
     * <pre>
     * must be &lt;500000000
     * </pre>
     *
     * <code>uint32 locktime = 7;</code>
     * @return The locktime.
     */
    @java.lang.Override
    public int getLocktime() {
      return locktime_;
    }

    public static final int FORMAT_UNIT_FIELD_NUMBER = 8;
    private int formatUnit_ = 0;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest.FormatUnit format_unit = 8;</code>
     * @return The enum numeric value on the wire for formatUnit.
     */
    @java.lang.Override public int getFormatUnitValue() {
      return formatUnit_;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest.FormatUnit format_unit = 8;</code>
     * @return The formatUnit.
     */
    @java.lang.Override public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.FormatUnit getFormatUnit() {
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.FormatUnit result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.FormatUnit.forNumber(formatUnit_);
      return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.FormatUnit.UNRECOGNIZED : result;
    }

    public static final int CONTAINS_SILENT_PAYMENT_OUTPUTS_FIELD_NUMBER = 9;
    private boolean containsSilentPaymentOutputs_ = false;
    /**
     * <code>bool contains_silent_payment_outputs = 9;</code>
     * @return The containsSilentPaymentOutputs.
     */
    @java.lang.Override
    public boolean getContainsSilentPaymentOutputs() {
      return containsSilentPaymentOutputs_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (coin_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.BTC.getNumber()) {
        output.writeEnum(1, coin_);
      }
      for (int i = 0; i < scriptConfigs_.size(); i++) {
        output.writeMessage(2, scriptConfigs_.get(i));
      }
      if (version_ != 0) {
        output.writeUInt32(4, version_);
      }
      if (numInputs_ != 0) {
        output.writeUInt32(5, numInputs_);
      }
      if (numOutputs_ != 0) {
        output.writeUInt32(6, numOutputs_);
      }
      if (locktime_ != 0) {
        output.writeUInt32(7, locktime_);
      }
      if (formatUnit_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.FormatUnit.DEFAULT.getNumber()) {
        output.writeEnum(8, formatUnit_);
      }
      if (containsSilentPaymentOutputs_ != false) {
        output.writeBool(9, containsSilentPaymentOutputs_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (coin_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.BTC.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, coin_);
      }
      for (int i = 0; i < scriptConfigs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, scriptConfigs_.get(i));
      }
      if (version_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, version_);
      }
      if (numInputs_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, numInputs_);
      }
      if (numOutputs_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, numOutputs_);
      }
      if (locktime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, locktime_);
      }
      if (formatUnit_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.FormatUnit.DEFAULT.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, formatUnit_);
      }
      if (containsSilentPaymentOutputs_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, containsSilentPaymentOutputs_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest) obj;

      if (coin_ != other.coin_) return false;
      if (!getScriptConfigsList()
          .equals(other.getScriptConfigsList())) return false;
      if (getVersion()
          != other.getVersion()) return false;
      if (getNumInputs()
          != other.getNumInputs()) return false;
      if (getNumOutputs()
          != other.getNumOutputs()) return false;
      if (getLocktime()
          != other.getLocktime()) return false;
      if (formatUnit_ != other.formatUnit_) return false;
      if (getContainsSilentPaymentOutputs()
          != other.getContainsSilentPaymentOutputs()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + COIN_FIELD_NUMBER;
      hash = (53 * hash) + coin_;
      if (getScriptConfigsCount() > 0) {
        hash = (37 * hash) + SCRIPT_CONFIGS_FIELD_NUMBER;
        hash = (53 * hash) + getScriptConfigsList().hashCode();
      }
      hash = (37 * hash) + VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getVersion();
      hash = (37 * hash) + NUM_INPUTS_FIELD_NUMBER;
      hash = (53 * hash) + getNumInputs();
      hash = (37 * hash) + NUM_OUTPUTS_FIELD_NUMBER;
      hash = (53 * hash) + getNumOutputs();
      hash = (37 * hash) + LOCKTIME_FIELD_NUMBER;
      hash = (53 * hash) + getLocktime();
      hash = (37 * hash) + FORMAT_UNIT_FIELD_NUMBER;
      hash = (53 * hash) + formatUnit_;
      hash = (37 * hash) + CONTAINS_SILENT_PAYMENT_OUTPUTS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getContainsSilentPaymentOutputs());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInitRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInitRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        coin_ = 0;
        if (scriptConfigsBuilder_ == null) {
          scriptConfigs_ = java.util.Collections.emptyList();
        } else {
          scriptConfigs_ = null;
          scriptConfigsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        version_ = 0;
        numInputs_ = 0;
        numOutputs_ = 0;
        locktime_ = 0;
        formatUnit_ = 0;
        containsSilentPaymentOutputs_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInitRequest_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest result) {
        if (scriptConfigsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            scriptConfigs_ = java.util.Collections.unmodifiableList(scriptConfigs_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.scriptConfigs_ = scriptConfigs_;
        } else {
          result.scriptConfigs_ = scriptConfigsBuilder_.build();
        }
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.coin_ = coin_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.version_ = version_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.numInputs_ = numInputs_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.numOutputs_ = numOutputs_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.locktime_ = locktime_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.formatUnit_ = formatUnit_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.containsSilentPaymentOutputs_ = containsSilentPaymentOutputs_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.getDefaultInstance()) return this;
        if (other.coin_ != 0) {
          setCoinValue(other.getCoinValue());
        }
        if (scriptConfigsBuilder_ == null) {
          if (!other.scriptConfigs_.isEmpty()) {
            if (scriptConfigs_.isEmpty()) {
              scriptConfigs_ = other.scriptConfigs_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureScriptConfigsIsMutable();
              scriptConfigs_.addAll(other.scriptConfigs_);
            }
            onChanged();
          }
        } else {
          if (!other.scriptConfigs_.isEmpty()) {
            if (scriptConfigsBuilder_.isEmpty()) {
              scriptConfigsBuilder_.dispose();
              scriptConfigsBuilder_ = null;
              scriptConfigs_ = other.scriptConfigs_;
              bitField0_ = (bitField0_ & ~0x00000002);
              scriptConfigsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getScriptConfigsFieldBuilder() : null;
            } else {
              scriptConfigsBuilder_.addAllMessages(other.scriptConfigs_);
            }
          }
        }
        if (other.getVersion() != 0) {
          setVersion(other.getVersion());
        }
        if (other.getNumInputs() != 0) {
          setNumInputs(other.getNumInputs());
        }
        if (other.getNumOutputs() != 0) {
          setNumOutputs(other.getNumOutputs());
        }
        if (other.getLocktime() != 0) {
          setLocktime(other.getLocktime());
        }
        if (other.formatUnit_ != 0) {
          setFormatUnitValue(other.getFormatUnitValue());
        }
        if (other.getContainsSilentPaymentOutputs() != false) {
          setContainsSilentPaymentOutputs(other.getContainsSilentPaymentOutputs());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                coin_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath m =
                    input.readMessage(
                        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.parser(),
                        extensionRegistry);
                if (scriptConfigsBuilder_ == null) {
                  ensureScriptConfigsIsMutable();
                  scriptConfigs_.add(m);
                } else {
                  scriptConfigsBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 32: {
                version_ = input.readUInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 32
              case 40: {
                numInputs_ = input.readUInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 40
              case 48: {
                numOutputs_ = input.readUInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 48
              case 56: {
                locktime_ = input.readUInt32();
                bitField0_ |= 0x00000020;
                break;
              } // case 56
              case 64: {
                formatUnit_ = input.readEnum();
                bitField0_ |= 0x00000040;
                break;
              } // case 64
              case 72: {
                containsSilentPaymentOutputs_ = input.readBool();
                bitField0_ |= 0x00000080;
                break;
              } // case 72
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int coin_ = 0;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @return The enum numeric value on the wire for coin.
       */
      @java.lang.Override public int getCoinValue() {
        return coin_;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @param value The enum numeric value on the wire for coin to set.
       * @return This builder for chaining.
       */
      public Builder setCoinValue(int value) {
        coin_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @return The coin.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin getCoin() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.forNumber(coin_);
        return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.UNRECOGNIZED : result;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @param value The coin to set.
       * @return This builder for chaining.
       */
      public Builder setCoin(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        coin_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCoin() {
        bitField0_ = (bitField0_ & ~0x00000001);
        coin_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath> scriptConfigs_ =
        java.util.Collections.emptyList();
      private void ensureScriptConfigsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          scriptConfigs_ = new java.util.ArrayList<com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath>(scriptConfigs_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypathOrBuilder> scriptConfigsBuilder_;

      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public java.util.List<com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath> getScriptConfigsList() {
        if (scriptConfigsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(scriptConfigs_);
        } else {
          return scriptConfigsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public int getScriptConfigsCount() {
        if (scriptConfigsBuilder_ == null) {
          return scriptConfigs_.size();
        } else {
          return scriptConfigsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath getScriptConfigs(int index) {
        if (scriptConfigsBuilder_ == null) {
          return scriptConfigs_.get(index);
        } else {
          return scriptConfigsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public Builder setScriptConfigs(
          int index, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath value) {
        if (scriptConfigsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScriptConfigsIsMutable();
          scriptConfigs_.set(index, value);
          onChanged();
        } else {
          scriptConfigsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public Builder setScriptConfigs(
          int index, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.Builder builderForValue) {
        if (scriptConfigsBuilder_ == null) {
          ensureScriptConfigsIsMutable();
          scriptConfigs_.set(index, builderForValue.build());
          onChanged();
        } else {
          scriptConfigsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public Builder addScriptConfigs(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath value) {
        if (scriptConfigsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScriptConfigsIsMutable();
          scriptConfigs_.add(value);
          onChanged();
        } else {
          scriptConfigsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public Builder addScriptConfigs(
          int index, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath value) {
        if (scriptConfigsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScriptConfigsIsMutable();
          scriptConfigs_.add(index, value);
          onChanged();
        } else {
          scriptConfigsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public Builder addScriptConfigs(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.Builder builderForValue) {
        if (scriptConfigsBuilder_ == null) {
          ensureScriptConfigsIsMutable();
          scriptConfigs_.add(builderForValue.build());
          onChanged();
        } else {
          scriptConfigsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public Builder addScriptConfigs(
          int index, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.Builder builderForValue) {
        if (scriptConfigsBuilder_ == null) {
          ensureScriptConfigsIsMutable();
          scriptConfigs_.add(index, builderForValue.build());
          onChanged();
        } else {
          scriptConfigsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public Builder addAllScriptConfigs(
          java.lang.Iterable<? extends com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath> values) {
        if (scriptConfigsBuilder_ == null) {
          ensureScriptConfigsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, scriptConfigs_);
          onChanged();
        } else {
          scriptConfigsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public Builder clearScriptConfigs() {
        if (scriptConfigsBuilder_ == null) {
          scriptConfigs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          scriptConfigsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public Builder removeScriptConfigs(int index) {
        if (scriptConfigsBuilder_ == null) {
          ensureScriptConfigsIsMutable();
          scriptConfigs_.remove(index);
          onChanged();
        } else {
          scriptConfigsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.Builder getScriptConfigsBuilder(
          int index) {
        return getScriptConfigsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypathOrBuilder getScriptConfigsOrBuilder(
          int index) {
        if (scriptConfigsBuilder_ == null) {
          return scriptConfigs_.get(index);  } else {
          return scriptConfigsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public java.util.List<? extends com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypathOrBuilder> 
           getScriptConfigsOrBuilderList() {
        if (scriptConfigsBuilder_ != null) {
          return scriptConfigsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(scriptConfigs_);
        }
      }
      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.Builder addScriptConfigsBuilder() {
        return getScriptConfigsFieldBuilder().addBuilder(
            com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.getDefaultInstance());
      }
      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.Builder addScriptConfigsBuilder(
          int index) {
        return getScriptConfigsFieldBuilder().addBuilder(
            index, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.getDefaultInstance());
      }
      /**
       * <pre>
       * used script configs in inputs and changes
       * </pre>
       *
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_configs = 2;</code>
       */
      public java.util.List<com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.Builder> 
           getScriptConfigsBuilderList() {
        return getScriptConfigsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypathOrBuilder> 
          getScriptConfigsFieldBuilder() {
        if (scriptConfigsBuilder_ == null) {
          scriptConfigsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypathOrBuilder>(
                  scriptConfigs_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          scriptConfigs_ = null;
        }
        return scriptConfigsBuilder_;
      }

      private int version_ ;
      /**
       * <pre>
       * must be 1 or 2
       * </pre>
       *
       * <code>uint32 version = 4;</code>
       * @return The version.
       */
      @java.lang.Override
      public int getVersion() {
        return version_;
      }
      /**
       * <pre>
       * must be 1 or 2
       * </pre>
       *
       * <code>uint32 version = 4;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(int value) {

        version_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * must be 1 or 2
       * </pre>
       *
       * <code>uint32 version = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000004);
        version_ = 0;
        onChanged();
        return this;
      }

      private int numInputs_ ;
      /**
       * <code>uint32 num_inputs = 5;</code>
       * @return The numInputs.
       */
      @java.lang.Override
      public int getNumInputs() {
        return numInputs_;
      }
      /**
       * <code>uint32 num_inputs = 5;</code>
       * @param value The numInputs to set.
       * @return This builder for chaining.
       */
      public Builder setNumInputs(int value) {

        numInputs_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 num_inputs = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearNumInputs() {
        bitField0_ = (bitField0_ & ~0x00000008);
        numInputs_ = 0;
        onChanged();
        return this;
      }

      private int numOutputs_ ;
      /**
       * <code>uint32 num_outputs = 6;</code>
       * @return The numOutputs.
       */
      @java.lang.Override
      public int getNumOutputs() {
        return numOutputs_;
      }
      /**
       * <code>uint32 num_outputs = 6;</code>
       * @param value The numOutputs to set.
       * @return This builder for chaining.
       */
      public Builder setNumOutputs(int value) {

        numOutputs_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 num_outputs = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearNumOutputs() {
        bitField0_ = (bitField0_ & ~0x00000010);
        numOutputs_ = 0;
        onChanged();
        return this;
      }

      private int locktime_ ;
      /**
       * <pre>
       * must be &lt;500000000
       * </pre>
       *
       * <code>uint32 locktime = 7;</code>
       * @return The locktime.
       */
      @java.lang.Override
      public int getLocktime() {
        return locktime_;
      }
      /**
       * <pre>
       * must be &lt;500000000
       * </pre>
       *
       * <code>uint32 locktime = 7;</code>
       * @param value The locktime to set.
       * @return This builder for chaining.
       */
      public Builder setLocktime(int value) {

        locktime_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * must be &lt;500000000
       * </pre>
       *
       * <code>uint32 locktime = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearLocktime() {
        bitField0_ = (bitField0_ & ~0x00000020);
        locktime_ = 0;
        onChanged();
        return this;
      }

      private int formatUnit_ = 0;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest.FormatUnit format_unit = 8;</code>
       * @return The enum numeric value on the wire for formatUnit.
       */
      @java.lang.Override public int getFormatUnitValue() {
        return formatUnit_;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest.FormatUnit format_unit = 8;</code>
       * @param value The enum numeric value on the wire for formatUnit to set.
       * @return This builder for chaining.
       */
      public Builder setFormatUnitValue(int value) {
        formatUnit_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest.FormatUnit format_unit = 8;</code>
       * @return The formatUnit.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.FormatUnit getFormatUnit() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.FormatUnit result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.FormatUnit.forNumber(formatUnit_);
        return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.FormatUnit.UNRECOGNIZED : result;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest.FormatUnit format_unit = 8;</code>
       * @param value The formatUnit to set.
       * @return This builder for chaining.
       */
      public Builder setFormatUnit(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest.FormatUnit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        formatUnit_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest.FormatUnit format_unit = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearFormatUnit() {
        bitField0_ = (bitField0_ & ~0x00000040);
        formatUnit_ = 0;
        onChanged();
        return this;
      }

      private boolean containsSilentPaymentOutputs_ ;
      /**
       * <code>bool contains_silent_payment_outputs = 9;</code>
       * @return The containsSilentPaymentOutputs.
       */
      @java.lang.Override
      public boolean getContainsSilentPaymentOutputs() {
        return containsSilentPaymentOutputs_;
      }
      /**
       * <code>bool contains_silent_payment_outputs = 9;</code>
       * @param value The containsSilentPaymentOutputs to set.
       * @return This builder for chaining.
       */
      public Builder setContainsSilentPaymentOutputs(boolean value) {

        containsSilentPaymentOutputs_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>bool contains_silent_payment_outputs = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearContainsSilentPaymentOutputs() {
        bitField0_ = (bitField0_ & ~0x00000080);
        containsSilentPaymentOutputs_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSignInitRequest)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCSignInitRequest>
        PARSER = new com.google.protobuf.AbstractParser<BTCSignInitRequest>() {
      @java.lang.Override
      public BTCSignInitRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCSignInitRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCSignInitRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInitRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCSignNextResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse.Type type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse.Type type = 1;</code>
     * @return The type.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Type getType();

    /**
     * <pre>
     * index of the current input or output
     * </pre>
     *
     * <code>uint32 index = 2;</code>
     * @return The index.
     */
    int getIndex();

    /**
     * <pre>
     * only as a response to BTCSignInputRequest
     * </pre>
     *
     * <code>bool has_signature = 3;</code>
     * @return The hasSignature.
     */
    boolean getHasSignature();

    /**
     * <pre>
     * 64 bytes (32 bytes big endian R, 32 bytes big endian S). Only if has_signature is true.
     * </pre>
     *
     * <code>bytes signature = 4;</code>
     * @return The signature.
     */
    com.google.protobuf.ByteString getSignature();

    /**
     * <pre>
     * Previous tx's input/output index in case of PREV_INPUT or PREV_OUTPUT, for the input at `index`.
     * </pre>
     *
     * <code>uint32 prev_index = 5;</code>
     * @return The prevIndex.
     */
    int getPrevIndex();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;</code>
     * @return Whether the antiKleptoSignerCommitment field is set.
     */
    boolean hasAntiKleptoSignerCommitment();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;</code>
     * @return The antiKleptoSignerCommitment.
     */
    com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment getAntiKleptoSignerCommitment();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitmentOrBuilder getAntiKleptoSignerCommitmentOrBuilder();

    /**
     * <pre>
     * Generated output. The host *must* verify its correctness using `silent_payment_dleq_proof`.
     * </pre>
     *
     * <code>bytes generated_output_pkscript = 7;</code>
     * @return The generatedOutputPkscript.
     */
    com.google.protobuf.ByteString getGeneratedOutputPkscript();

    /**
     * <code>bytes silent_payment_dleq_proof = 8;</code>
     * @return The silentPaymentDleqProof.
     */
    com.google.protobuf.ByteString getSilentPaymentDleqProof();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse}
   */
  public static final class BTCSignNextResponse extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse)
      BTCSignNextResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCSignNextResponse.class.getName());
    }
    // Use BTCSignNextResponse.newBuilder() to construct.
    private BTCSignNextResponse(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCSignNextResponse() {
      type_ = 0;
      signature_ = com.google.protobuf.ByteString.EMPTY;
      generatedOutputPkscript_ = com.google.protobuf.ByteString.EMPTY;
      silentPaymentDleqProof_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignNextResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignNextResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Builder.class);
    }

    /**
     * Protobuf enum {@code com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>INPUT = 0;</code>
       */
      INPUT(0),
      /**
       * <code>OUTPUT = 1;</code>
       */
      OUTPUT(1),
      /**
       * <code>DONE = 2;</code>
       */
      DONE(2),
      /**
       * <pre>
       * For the previous transaction at input `index`.
       * </pre>
       *
       * <code>PREVTX_INIT = 3;</code>
       */
      PREVTX_INIT(3),
      /**
       * <code>PREVTX_INPUT = 4;</code>
       */
      PREVTX_INPUT(4),
      /**
       * <code>PREVTX_OUTPUT = 5;</code>
       */
      PREVTX_OUTPUT(5),
      /**
       * <code>HOST_NONCE = 6;</code>
       */
      HOST_NONCE(6),
      /**
       * <code>PAYMENT_REQUEST = 7;</code>
       */
      PAYMENT_REQUEST(7),
      UNRECOGNIZED(-1),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          Type.class.getName());
      }
      /**
       * <code>INPUT = 0;</code>
       */
      public static final int INPUT_VALUE = 0;
      /**
       * <code>OUTPUT = 1;</code>
       */
      public static final int OUTPUT_VALUE = 1;
      /**
       * <code>DONE = 2;</code>
       */
      public static final int DONE_VALUE = 2;
      /**
       * <pre>
       * For the previous transaction at input `index`.
       * </pre>
       *
       * <code>PREVTX_INIT = 3;</code>
       */
      public static final int PREVTX_INIT_VALUE = 3;
      /**
       * <code>PREVTX_INPUT = 4;</code>
       */
      public static final int PREVTX_INPUT_VALUE = 4;
      /**
       * <code>PREVTX_OUTPUT = 5;</code>
       */
      public static final int PREVTX_OUTPUT_VALUE = 5;
      /**
       * <code>HOST_NONCE = 6;</code>
       */
      public static final int HOST_NONCE_VALUE = 6;
      /**
       * <code>PAYMENT_REQUEST = 7;</code>
       */
      public static final int PAYMENT_REQUEST_VALUE = 7;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 0: return INPUT;
          case 1: return OUTPUT;
          case 2: return DONE;
          case 3: return PREVTX_INIT;
          case 4: return PREVTX_INPUT;
          case 5: return PREVTX_OUTPUT;
          case 6: return HOST_NONCE;
          case 7: return PAYMENT_REQUEST;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse.Type)
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_ = 0;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse.Type type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse.Type type = 1;</code>
     * @return The type.
     */
    @java.lang.Override public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Type getType() {
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Type result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Type.forNumber(type_);
      return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Type.UNRECOGNIZED : result;
    }

    public static final int INDEX_FIELD_NUMBER = 2;
    private int index_ = 0;
    /**
     * <pre>
     * index of the current input or output
     * </pre>
     *
     * <code>uint32 index = 2;</code>
     * @return The index.
     */
    @java.lang.Override
    public int getIndex() {
      return index_;
    }

    public static final int HAS_SIGNATURE_FIELD_NUMBER = 3;
    private boolean hasSignature_ = false;
    /**
     * <pre>
     * only as a response to BTCSignInputRequest
     * </pre>
     *
     * <code>bool has_signature = 3;</code>
     * @return The hasSignature.
     */
    @java.lang.Override
    public boolean getHasSignature() {
      return hasSignature_;
    }

    public static final int SIGNATURE_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * 64 bytes (32 bytes big endian R, 32 bytes big endian S). Only if has_signature is true.
     * </pre>
     *
     * <code>bytes signature = 4;</code>
     * @return The signature.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSignature() {
      return signature_;
    }

    public static final int PREV_INDEX_FIELD_NUMBER = 5;
    private int prevIndex_ = 0;
    /**
     * <pre>
     * Previous tx's input/output index in case of PREV_INPUT or PREV_OUTPUT, for the input at `index`.
     * </pre>
     *
     * <code>uint32 prev_index = 5;</code>
     * @return The prevIndex.
     */
    @java.lang.Override
    public int getPrevIndex() {
      return prevIndex_;
    }

    public static final int ANTI_KLEPTO_SIGNER_COMMITMENT_FIELD_NUMBER = 6;
    private com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment antiKleptoSignerCommitment_;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;</code>
     * @return Whether the antiKleptoSignerCommitment field is set.
     */
    @java.lang.Override
    public boolean hasAntiKleptoSignerCommitment() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;</code>
     * @return The antiKleptoSignerCommitment.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment getAntiKleptoSignerCommitment() {
      return antiKleptoSignerCommitment_ == null ? com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.getDefaultInstance() : antiKleptoSignerCommitment_;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitmentOrBuilder getAntiKleptoSignerCommitmentOrBuilder() {
      return antiKleptoSignerCommitment_ == null ? com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.getDefaultInstance() : antiKleptoSignerCommitment_;
    }

    public static final int GENERATED_OUTPUT_PKSCRIPT_FIELD_NUMBER = 7;
    private com.google.protobuf.ByteString generatedOutputPkscript_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Generated output. The host *must* verify its correctness using `silent_payment_dleq_proof`.
     * </pre>
     *
     * <code>bytes generated_output_pkscript = 7;</code>
     * @return The generatedOutputPkscript.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getGeneratedOutputPkscript() {
      return generatedOutputPkscript_;
    }

    public static final int SILENT_PAYMENT_DLEQ_PROOF_FIELD_NUMBER = 8;
    private com.google.protobuf.ByteString silentPaymentDleqProof_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes silent_payment_dleq_proof = 8;</code>
     * @return The silentPaymentDleqProof.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSilentPaymentDleqProof() {
      return silentPaymentDleqProof_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Type.INPUT.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (index_ != 0) {
        output.writeUInt32(2, index_);
      }
      if (hasSignature_ != false) {
        output.writeBool(3, hasSignature_);
      }
      if (!signature_.isEmpty()) {
        output.writeBytes(4, signature_);
      }
      if (prevIndex_ != 0) {
        output.writeUInt32(5, prevIndex_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(6, getAntiKleptoSignerCommitment());
      }
      if (!generatedOutputPkscript_.isEmpty()) {
        output.writeBytes(7, generatedOutputPkscript_);
      }
      if (!silentPaymentDleqProof_.isEmpty()) {
        output.writeBytes(8, silentPaymentDleqProof_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Type.INPUT.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (index_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, index_);
      }
      if (hasSignature_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, hasSignature_);
      }
      if (!signature_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, signature_);
      }
      if (prevIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, prevIndex_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getAntiKleptoSignerCommitment());
      }
      if (!generatedOutputPkscript_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, generatedOutputPkscript_);
      }
      if (!silentPaymentDleqProof_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, silentPaymentDleqProof_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse) obj;

      if (type_ != other.type_) return false;
      if (getIndex()
          != other.getIndex()) return false;
      if (getHasSignature()
          != other.getHasSignature()) return false;
      if (!getSignature()
          .equals(other.getSignature())) return false;
      if (getPrevIndex()
          != other.getPrevIndex()) return false;
      if (hasAntiKleptoSignerCommitment() != other.hasAntiKleptoSignerCommitment()) return false;
      if (hasAntiKleptoSignerCommitment()) {
        if (!getAntiKleptoSignerCommitment()
            .equals(other.getAntiKleptoSignerCommitment())) return false;
      }
      if (!getGeneratedOutputPkscript()
          .equals(other.getGeneratedOutputPkscript())) return false;
      if (!getSilentPaymentDleqProof()
          .equals(other.getSilentPaymentDleqProof())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + INDEX_FIELD_NUMBER;
      hash = (53 * hash) + getIndex();
      hash = (37 * hash) + HAS_SIGNATURE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getHasSignature());
      hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
      hash = (53 * hash) + getSignature().hashCode();
      hash = (37 * hash) + PREV_INDEX_FIELD_NUMBER;
      hash = (53 * hash) + getPrevIndex();
      if (hasAntiKleptoSignerCommitment()) {
        hash = (37 * hash) + ANTI_KLEPTO_SIGNER_COMMITMENT_FIELD_NUMBER;
        hash = (53 * hash) + getAntiKleptoSignerCommitment().hashCode();
      }
      hash = (37 * hash) + GENERATED_OUTPUT_PKSCRIPT_FIELD_NUMBER;
      hash = (53 * hash) + getGeneratedOutputPkscript().hashCode();
      hash = (37 * hash) + SILENT_PAYMENT_DLEQ_PROOF_FIELD_NUMBER;
      hash = (53 * hash) + getSilentPaymentDleqProof().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignNextResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignNextResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getAntiKleptoSignerCommitmentFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = 0;
        index_ = 0;
        hasSignature_ = false;
        signature_ = com.google.protobuf.ByteString.EMPTY;
        prevIndex_ = 0;
        antiKleptoSignerCommitment_ = null;
        if (antiKleptoSignerCommitmentBuilder_ != null) {
          antiKleptoSignerCommitmentBuilder_.dispose();
          antiKleptoSignerCommitmentBuilder_ = null;
        }
        generatedOutputPkscript_ = com.google.protobuf.ByteString.EMPTY;
        silentPaymentDleqProof_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignNextResponse_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.index_ = index_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.hasSignature_ = hasSignature_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.signature_ = signature_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.prevIndex_ = prevIndex_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.antiKleptoSignerCommitment_ = antiKleptoSignerCommitmentBuilder_ == null
              ? antiKleptoSignerCommitment_
              : antiKleptoSignerCommitmentBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.generatedOutputPkscript_ = generatedOutputPkscript_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.silentPaymentDleqProof_ = silentPaymentDleqProof_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.getIndex() != 0) {
          setIndex(other.getIndex());
        }
        if (other.getHasSignature() != false) {
          setHasSignature(other.getHasSignature());
        }
        if (other.getSignature() != com.google.protobuf.ByteString.EMPTY) {
          setSignature(other.getSignature());
        }
        if (other.getPrevIndex() != 0) {
          setPrevIndex(other.getPrevIndex());
        }
        if (other.hasAntiKleptoSignerCommitment()) {
          mergeAntiKleptoSignerCommitment(other.getAntiKleptoSignerCommitment());
        }
        if (other.getGeneratedOutputPkscript() != com.google.protobuf.ByteString.EMPTY) {
          setGeneratedOutputPkscript(other.getGeneratedOutputPkscript());
        }
        if (other.getSilentPaymentDleqProof() != com.google.protobuf.ByteString.EMPTY) {
          setSilentPaymentDleqProof(other.getSilentPaymentDleqProof());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                type_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                index_ = input.readUInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                hasSignature_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                signature_ = input.readBytes();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 40: {
                prevIndex_ = input.readUInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 50: {
                input.readMessage(
                    getAntiKleptoSignerCommitmentFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              case 58: {
                generatedOutputPkscript_ = input.readBytes();
                bitField0_ |= 0x00000040;
                break;
              } // case 58
              case 66: {
                silentPaymentDleqProof_ = input.readBytes();
                bitField0_ |= 0x00000080;
                break;
              } // case 66
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int type_ = 0;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse.Type type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse.Type type = 1;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse.Type type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Type getType() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Type result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Type.forNumber(type_);
        return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Type.UNRECOGNIZED : result;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse.Type type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse.Type type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      private int index_ ;
      /**
       * <pre>
       * index of the current input or output
       * </pre>
       *
       * <code>uint32 index = 2;</code>
       * @return The index.
       */
      @java.lang.Override
      public int getIndex() {
        return index_;
      }
      /**
       * <pre>
       * index of the current input or output
       * </pre>
       *
       * <code>uint32 index = 2;</code>
       * @param value The index to set.
       * @return This builder for chaining.
       */
      public Builder setIndex(int value) {

        index_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * index of the current input or output
       * </pre>
       *
       * <code>uint32 index = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        index_ = 0;
        onChanged();
        return this;
      }

      private boolean hasSignature_ ;
      /**
       * <pre>
       * only as a response to BTCSignInputRequest
       * </pre>
       *
       * <code>bool has_signature = 3;</code>
       * @return The hasSignature.
       */
      @java.lang.Override
      public boolean getHasSignature() {
        return hasSignature_;
      }
      /**
       * <pre>
       * only as a response to BTCSignInputRequest
       * </pre>
       *
       * <code>bool has_signature = 3;</code>
       * @param value The hasSignature to set.
       * @return This builder for chaining.
       */
      public Builder setHasSignature(boolean value) {

        hasSignature_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * only as a response to BTCSignInputRequest
       * </pre>
       *
       * <code>bool has_signature = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearHasSignature() {
        bitField0_ = (bitField0_ & ~0x00000004);
        hasSignature_ = false;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * 64 bytes (32 bytes big endian R, 32 bytes big endian S). Only if has_signature is true.
       * </pre>
       *
       * <code>bytes signature = 4;</code>
       * @return The signature.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSignature() {
        return signature_;
      }
      /**
       * <pre>
       * 64 bytes (32 bytes big endian R, 32 bytes big endian S). Only if has_signature is true.
       * </pre>
       *
       * <code>bytes signature = 4;</code>
       * @param value The signature to set.
       * @return This builder for chaining.
       */
      public Builder setSignature(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        signature_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 64 bytes (32 bytes big endian R, 32 bytes big endian S). Only if has_signature is true.
       * </pre>
       *
       * <code>bytes signature = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSignature() {
        bitField0_ = (bitField0_ & ~0x00000008);
        signature_ = getDefaultInstance().getSignature();
        onChanged();
        return this;
      }

      private int prevIndex_ ;
      /**
       * <pre>
       * Previous tx's input/output index in case of PREV_INPUT or PREV_OUTPUT, for the input at `index`.
       * </pre>
       *
       * <code>uint32 prev_index = 5;</code>
       * @return The prevIndex.
       */
      @java.lang.Override
      public int getPrevIndex() {
        return prevIndex_;
      }
      /**
       * <pre>
       * Previous tx's input/output index in case of PREV_INPUT or PREV_OUTPUT, for the input at `index`.
       * </pre>
       *
       * <code>uint32 prev_index = 5;</code>
       * @param value The prevIndex to set.
       * @return This builder for chaining.
       */
      public Builder setPrevIndex(int value) {

        prevIndex_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Previous tx's input/output index in case of PREV_INPUT or PREV_OUTPUT, for the input at `index`.
       * </pre>
       *
       * <code>uint32 prev_index = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrevIndex() {
        bitField0_ = (bitField0_ & ~0x00000010);
        prevIndex_ = 0;
        onChanged();
        return this;
      }

      private com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment antiKleptoSignerCommitment_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.Builder, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitmentOrBuilder> antiKleptoSignerCommitmentBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;</code>
       * @return Whether the antiKleptoSignerCommitment field is set.
       */
      public boolean hasAntiKleptoSignerCommitment() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;</code>
       * @return The antiKleptoSignerCommitment.
       */
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment getAntiKleptoSignerCommitment() {
        if (antiKleptoSignerCommitmentBuilder_ == null) {
          return antiKleptoSignerCommitment_ == null ? com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.getDefaultInstance() : antiKleptoSignerCommitment_;
        } else {
          return antiKleptoSignerCommitmentBuilder_.getMessage();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;</code>
       */
      public Builder setAntiKleptoSignerCommitment(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment value) {
        if (antiKleptoSignerCommitmentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          antiKleptoSignerCommitment_ = value;
        } else {
          antiKleptoSignerCommitmentBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;</code>
       */
      public Builder setAntiKleptoSignerCommitment(
          com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.Builder builderForValue) {
        if (antiKleptoSignerCommitmentBuilder_ == null) {
          antiKleptoSignerCommitment_ = builderForValue.build();
        } else {
          antiKleptoSignerCommitmentBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;</code>
       */
      public Builder mergeAntiKleptoSignerCommitment(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment value) {
        if (antiKleptoSignerCommitmentBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0) &&
            antiKleptoSignerCommitment_ != null &&
            antiKleptoSignerCommitment_ != com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.getDefaultInstance()) {
            getAntiKleptoSignerCommitmentBuilder().mergeFrom(value);
          } else {
            antiKleptoSignerCommitment_ = value;
          }
        } else {
          antiKleptoSignerCommitmentBuilder_.mergeFrom(value);
        }
        if (antiKleptoSignerCommitment_ != null) {
          bitField0_ |= 0x00000020;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;</code>
       */
      public Builder clearAntiKleptoSignerCommitment() {
        bitField0_ = (bitField0_ & ~0x00000020);
        antiKleptoSignerCommitment_ = null;
        if (antiKleptoSignerCommitmentBuilder_ != null) {
          antiKleptoSignerCommitmentBuilder_.dispose();
          antiKleptoSignerCommitmentBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.Builder getAntiKleptoSignerCommitmentBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getAntiKleptoSignerCommitmentFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitmentOrBuilder getAntiKleptoSignerCommitmentOrBuilder() {
        if (antiKleptoSignerCommitmentBuilder_ != null) {
          return antiKleptoSignerCommitmentBuilder_.getMessageOrBuilder();
        } else {
          return antiKleptoSignerCommitment_ == null ?
              com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.getDefaultInstance() : antiKleptoSignerCommitment_;
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.Builder, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitmentOrBuilder> 
          getAntiKleptoSignerCommitmentFieldBuilder() {
        if (antiKleptoSignerCommitmentBuilder_ == null) {
          antiKleptoSignerCommitmentBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.Builder, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitmentOrBuilder>(
                  getAntiKleptoSignerCommitment(),
                  getParentForChildren(),
                  isClean());
          antiKleptoSignerCommitment_ = null;
        }
        return antiKleptoSignerCommitmentBuilder_;
      }

      private com.google.protobuf.ByteString generatedOutputPkscript_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * Generated output. The host *must* verify its correctness using `silent_payment_dleq_proof`.
       * </pre>
       *
       * <code>bytes generated_output_pkscript = 7;</code>
       * @return The generatedOutputPkscript.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getGeneratedOutputPkscript() {
        return generatedOutputPkscript_;
      }
      /**
       * <pre>
       * Generated output. The host *must* verify its correctness using `silent_payment_dleq_proof`.
       * </pre>
       *
       * <code>bytes generated_output_pkscript = 7;</code>
       * @param value The generatedOutputPkscript to set.
       * @return This builder for chaining.
       */
      public Builder setGeneratedOutputPkscript(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        generatedOutputPkscript_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Generated output. The host *must* verify its correctness using `silent_payment_dleq_proof`.
       * </pre>
       *
       * <code>bytes generated_output_pkscript = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearGeneratedOutputPkscript() {
        bitField0_ = (bitField0_ & ~0x00000040);
        generatedOutputPkscript_ = getDefaultInstance().getGeneratedOutputPkscript();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString silentPaymentDleqProof_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes silent_payment_dleq_proof = 8;</code>
       * @return The silentPaymentDleqProof.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSilentPaymentDleqProof() {
        return silentPaymentDleqProof_;
      }
      /**
       * <code>bytes silent_payment_dleq_proof = 8;</code>
       * @param value The silentPaymentDleqProof to set.
       * @return This builder for chaining.
       */
      public Builder setSilentPaymentDleqProof(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        silentPaymentDleqProof_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>bytes silent_payment_dleq_proof = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearSilentPaymentDleqProof() {
        bitField0_ = (bitField0_ & ~0x00000080);
        silentPaymentDleqProof_ = getDefaultInstance().getSilentPaymentDleqProof();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCSignNextResponse>
        PARSER = new com.google.protobuf.AbstractParser<BTCSignNextResponse>() {
      @java.lang.Override
      public BTCSignNextResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCSignNextResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCSignNextResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCSignInputRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCSignInputRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bytes prevOutHash = 1;</code>
     * @return The prevOutHash.
     */
    com.google.protobuf.ByteString getPrevOutHash();

    /**
     * <code>uint32 prevOutIndex = 2;</code>
     * @return The prevOutIndex.
     */
    int getPrevOutIndex();

    /**
     * <code>uint64 prevOutValue = 3;</code>
     * @return The prevOutValue.
     */
    long getPrevOutValue();

    /**
     * <pre>
     * must be 0xffffffff-2, 0xffffffff-1 or 0xffffffff
     * </pre>
     *
     * <code>uint32 sequence = 4;</code>
     * @return The sequence.
     */
    int getSequence();

    /**
     * <pre>
     * all inputs must be ours.
     * </pre>
     *
     * <code>repeated uint32 keypath = 6;</code>
     * @return A list containing the keypath.
     */
    java.util.List<java.lang.Integer> getKeypathList();
    /**
     * <pre>
     * all inputs must be ours.
     * </pre>
     *
     * <code>repeated uint32 keypath = 6;</code>
     * @return The count of keypath.
     */
    int getKeypathCount();
    /**
     * <pre>
     * all inputs must be ours.
     * </pre>
     *
     * <code>repeated uint32 keypath = 6;</code>
     * @param index The index of the element to return.
     * @return The keypath at the given index.
     */
    int getKeypath(int index);

    /**
     * <pre>
     * References a script config from BTCSignInitRequest
     * </pre>
     *
     * <code>uint32 script_config_index = 7;</code>
     * @return The scriptConfigIndex.
     */
    int getScriptConfigIndex();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 8;</code>
     * @return Whether the hostNonceCommitment field is set.
     */
    boolean hasHostNonceCommitment();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 8;</code>
     * @return The hostNonceCommitment.
     */
    com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment getHostNonceCommitment();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 8;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitmentOrBuilder getHostNonceCommitmentOrBuilder();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCSignInputRequest}
   */
  public static final class BTCSignInputRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCSignInputRequest)
      BTCSignInputRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCSignInputRequest.class.getName());
    }
    // Use BTCSignInputRequest.newBuilder() to construct.
    private BTCSignInputRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCSignInputRequest() {
      prevOutHash_ = com.google.protobuf.ByteString.EMPTY;
      keypath_ = emptyIntList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInputRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInputRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest.Builder.class);
    }

    private int bitField0_;
    public static final int PREVOUTHASH_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString prevOutHash_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes prevOutHash = 1;</code>
     * @return The prevOutHash.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPrevOutHash() {
      return prevOutHash_;
    }

    public static final int PREVOUTINDEX_FIELD_NUMBER = 2;
    private int prevOutIndex_ = 0;
    /**
     * <code>uint32 prevOutIndex = 2;</code>
     * @return The prevOutIndex.
     */
    @java.lang.Override
    public int getPrevOutIndex() {
      return prevOutIndex_;
    }

    public static final int PREVOUTVALUE_FIELD_NUMBER = 3;
    private long prevOutValue_ = 0L;
    /**
     * <code>uint64 prevOutValue = 3;</code>
     * @return The prevOutValue.
     */
    @java.lang.Override
    public long getPrevOutValue() {
      return prevOutValue_;
    }

    public static final int SEQUENCE_FIELD_NUMBER = 4;
    private int sequence_ = 0;
    /**
     * <pre>
     * must be 0xffffffff-2, 0xffffffff-1 or 0xffffffff
     * </pre>
     *
     * <code>uint32 sequence = 4;</code>
     * @return The sequence.
     */
    @java.lang.Override
    public int getSequence() {
      return sequence_;
    }

    public static final int KEYPATH_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList keypath_ =
        emptyIntList();
    /**
     * <pre>
     * all inputs must be ours.
     * </pre>
     *
     * <code>repeated uint32 keypath = 6;</code>
     * @return A list containing the keypath.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getKeypathList() {
      return keypath_;
    }
    /**
     * <pre>
     * all inputs must be ours.
     * </pre>
     *
     * <code>repeated uint32 keypath = 6;</code>
     * @return The count of keypath.
     */
    public int getKeypathCount() {
      return keypath_.size();
    }
    /**
     * <pre>
     * all inputs must be ours.
     * </pre>
     *
     * <code>repeated uint32 keypath = 6;</code>
     * @param index The index of the element to return.
     * @return The keypath at the given index.
     */
    public int getKeypath(int index) {
      return keypath_.getInt(index);
    }
    private int keypathMemoizedSerializedSize = -1;

    public static final int SCRIPT_CONFIG_INDEX_FIELD_NUMBER = 7;
    private int scriptConfigIndex_ = 0;
    /**
     * <pre>
     * References a script config from BTCSignInitRequest
     * </pre>
     *
     * <code>uint32 script_config_index = 7;</code>
     * @return The scriptConfigIndex.
     */
    @java.lang.Override
    public int getScriptConfigIndex() {
      return scriptConfigIndex_;
    }

    public static final int HOST_NONCE_COMMITMENT_FIELD_NUMBER = 8;
    private com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment hostNonceCommitment_;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 8;</code>
     * @return Whether the hostNonceCommitment field is set.
     */
    @java.lang.Override
    public boolean hasHostNonceCommitment() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 8;</code>
     * @return The hostNonceCommitment.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment getHostNonceCommitment() {
      return hostNonceCommitment_ == null ? com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.getDefaultInstance() : hostNonceCommitment_;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 8;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitmentOrBuilder getHostNonceCommitmentOrBuilder() {
      return hostNonceCommitment_ == null ? com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.getDefaultInstance() : hostNonceCommitment_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (!prevOutHash_.isEmpty()) {
        output.writeBytes(1, prevOutHash_);
      }
      if (prevOutIndex_ != 0) {
        output.writeUInt32(2, prevOutIndex_);
      }
      if (prevOutValue_ != 0L) {
        output.writeUInt64(3, prevOutValue_);
      }
      if (sequence_ != 0) {
        output.writeUInt32(4, sequence_);
      }
      if (getKeypathList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(keypathMemoizedSerializedSize);
      }
      for (int i = 0; i < keypath_.size(); i++) {
        output.writeUInt32NoTag(keypath_.getInt(i));
      }
      if (scriptConfigIndex_ != 0) {
        output.writeUInt32(7, scriptConfigIndex_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(8, getHostNonceCommitment());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!prevOutHash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, prevOutHash_);
      }
      if (prevOutIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, prevOutIndex_);
      }
      if (prevOutValue_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, prevOutValue_);
      }
      if (sequence_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, sequence_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < keypath_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(keypath_.getInt(i));
        }
        size += dataSize;
        if (!getKeypathList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        keypathMemoizedSerializedSize = dataSize;
      }
      if (scriptConfigIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, scriptConfigIndex_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getHostNonceCommitment());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest) obj;

      if (!getPrevOutHash()
          .equals(other.getPrevOutHash())) return false;
      if (getPrevOutIndex()
          != other.getPrevOutIndex()) return false;
      if (getPrevOutValue()
          != other.getPrevOutValue()) return false;
      if (getSequence()
          != other.getSequence()) return false;
      if (!getKeypathList()
          .equals(other.getKeypathList())) return false;
      if (getScriptConfigIndex()
          != other.getScriptConfigIndex()) return false;
      if (hasHostNonceCommitment() != other.hasHostNonceCommitment()) return false;
      if (hasHostNonceCommitment()) {
        if (!getHostNonceCommitment()
            .equals(other.getHostNonceCommitment())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PREVOUTHASH_FIELD_NUMBER;
      hash = (53 * hash) + getPrevOutHash().hashCode();
      hash = (37 * hash) + PREVOUTINDEX_FIELD_NUMBER;
      hash = (53 * hash) + getPrevOutIndex();
      hash = (37 * hash) + PREVOUTVALUE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getPrevOutValue());
      hash = (37 * hash) + SEQUENCE_FIELD_NUMBER;
      hash = (53 * hash) + getSequence();
      if (getKeypathCount() > 0) {
        hash = (37 * hash) + KEYPATH_FIELD_NUMBER;
        hash = (53 * hash) + getKeypathList().hashCode();
      }
      hash = (37 * hash) + SCRIPT_CONFIG_INDEX_FIELD_NUMBER;
      hash = (53 * hash) + getScriptConfigIndex();
      if (hasHostNonceCommitment()) {
        hash = (37 * hash) + HOST_NONCE_COMMITMENT_FIELD_NUMBER;
        hash = (53 * hash) + getHostNonceCommitment().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCSignInputRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCSignInputRequest)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInputRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInputRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getHostNonceCommitmentFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        prevOutHash_ = com.google.protobuf.ByteString.EMPTY;
        prevOutIndex_ = 0;
        prevOutValue_ = 0L;
        sequence_ = 0;
        keypath_ = emptyIntList();
        scriptConfigIndex_ = 0;
        hostNonceCommitment_ = null;
        if (hostNonceCommitmentBuilder_ != null) {
          hostNonceCommitmentBuilder_.dispose();
          hostNonceCommitmentBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInputRequest_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.prevOutHash_ = prevOutHash_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.prevOutIndex_ = prevOutIndex_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.prevOutValue_ = prevOutValue_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.sequence_ = sequence_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          keypath_.makeImmutable();
          result.keypath_ = keypath_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.scriptConfigIndex_ = scriptConfigIndex_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.hostNonceCommitment_ = hostNonceCommitmentBuilder_ == null
              ? hostNonceCommitment_
              : hostNonceCommitmentBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest.getDefaultInstance()) return this;
        if (other.getPrevOutHash() != com.google.protobuf.ByteString.EMPTY) {
          setPrevOutHash(other.getPrevOutHash());
        }
        if (other.getPrevOutIndex() != 0) {
          setPrevOutIndex(other.getPrevOutIndex());
        }
        if (other.getPrevOutValue() != 0L) {
          setPrevOutValue(other.getPrevOutValue());
        }
        if (other.getSequence() != 0) {
          setSequence(other.getSequence());
        }
        if (!other.keypath_.isEmpty()) {
          if (keypath_.isEmpty()) {
            keypath_ = other.keypath_;
            keypath_.makeImmutable();
            bitField0_ |= 0x00000010;
          } else {
            ensureKeypathIsMutable();
            keypath_.addAll(other.keypath_);
          }
          onChanged();
        }
        if (other.getScriptConfigIndex() != 0) {
          setScriptConfigIndex(other.getScriptConfigIndex());
        }
        if (other.hasHostNonceCommitment()) {
          mergeHostNonceCommitment(other.getHostNonceCommitment());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                prevOutHash_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                prevOutIndex_ = input.readUInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                prevOutValue_ = input.readUInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                sequence_ = input.readUInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 48: {
                int v = input.readUInt32();
                ensureKeypathIsMutable();
                keypath_.addInt(v);
                break;
              } // case 48
              case 50: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureKeypathIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  keypath_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 50
              case 56: {
                scriptConfigIndex_ = input.readUInt32();
                bitField0_ |= 0x00000020;
                break;
              } // case 56
              case 66: {
                input.readMessage(
                    getHostNonceCommitmentFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000040;
                break;
              } // case 66
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString prevOutHash_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes prevOutHash = 1;</code>
       * @return The prevOutHash.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPrevOutHash() {
        return prevOutHash_;
      }
      /**
       * <code>bytes prevOutHash = 1;</code>
       * @param value The prevOutHash to set.
       * @return This builder for chaining.
       */
      public Builder setPrevOutHash(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        prevOutHash_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>bytes prevOutHash = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrevOutHash() {
        bitField0_ = (bitField0_ & ~0x00000001);
        prevOutHash_ = getDefaultInstance().getPrevOutHash();
        onChanged();
        return this;
      }

      private int prevOutIndex_ ;
      /**
       * <code>uint32 prevOutIndex = 2;</code>
       * @return The prevOutIndex.
       */
      @java.lang.Override
      public int getPrevOutIndex() {
        return prevOutIndex_;
      }
      /**
       * <code>uint32 prevOutIndex = 2;</code>
       * @param value The prevOutIndex to set.
       * @return This builder for chaining.
       */
      public Builder setPrevOutIndex(int value) {

        prevOutIndex_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 prevOutIndex = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrevOutIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        prevOutIndex_ = 0;
        onChanged();
        return this;
      }

      private long prevOutValue_ ;
      /**
       * <code>uint64 prevOutValue = 3;</code>
       * @return The prevOutValue.
       */
      @java.lang.Override
      public long getPrevOutValue() {
        return prevOutValue_;
      }
      /**
       * <code>uint64 prevOutValue = 3;</code>
       * @param value The prevOutValue to set.
       * @return This builder for chaining.
       */
      public Builder setPrevOutValue(long value) {

        prevOutValue_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 prevOutValue = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrevOutValue() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prevOutValue_ = 0L;
        onChanged();
        return this;
      }

      private int sequence_ ;
      /**
       * <pre>
       * must be 0xffffffff-2, 0xffffffff-1 or 0xffffffff
       * </pre>
       *
       * <code>uint32 sequence = 4;</code>
       * @return The sequence.
       */
      @java.lang.Override
      public int getSequence() {
        return sequence_;
      }
      /**
       * <pre>
       * must be 0xffffffff-2, 0xffffffff-1 or 0xffffffff
       * </pre>
       *
       * <code>uint32 sequence = 4;</code>
       * @param value The sequence to set.
       * @return This builder for chaining.
       */
      public Builder setSequence(int value) {

        sequence_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * must be 0xffffffff-2, 0xffffffff-1 or 0xffffffff
       * </pre>
       *
       * <code>uint32 sequence = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSequence() {
        bitField0_ = (bitField0_ & ~0x00000008);
        sequence_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList keypath_ = emptyIntList();
      private void ensureKeypathIsMutable() {
        if (!keypath_.isModifiable()) {
          keypath_ = makeMutableCopy(keypath_);
        }
        bitField0_ |= 0x00000010;
      }
      /**
       * <pre>
       * all inputs must be ours.
       * </pre>
       *
       * <code>repeated uint32 keypath = 6;</code>
       * @return A list containing the keypath.
       */
      public java.util.List<java.lang.Integer>
          getKeypathList() {
        keypath_.makeImmutable();
        return keypath_;
      }
      /**
       * <pre>
       * all inputs must be ours.
       * </pre>
       *
       * <code>repeated uint32 keypath = 6;</code>
       * @return The count of keypath.
       */
      public int getKeypathCount() {
        return keypath_.size();
      }
      /**
       * <pre>
       * all inputs must be ours.
       * </pre>
       *
       * <code>repeated uint32 keypath = 6;</code>
       * @param index The index of the element to return.
       * @return The keypath at the given index.
       */
      public int getKeypath(int index) {
        return keypath_.getInt(index);
      }
      /**
       * <pre>
       * all inputs must be ours.
       * </pre>
       *
       * <code>repeated uint32 keypath = 6;</code>
       * @param index The index to set the value at.
       * @param value The keypath to set.
       * @return This builder for chaining.
       */
      public Builder setKeypath(
          int index, int value) {

        ensureKeypathIsMutable();
        keypath_.setInt(index, value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * all inputs must be ours.
       * </pre>
       *
       * <code>repeated uint32 keypath = 6;</code>
       * @param value The keypath to add.
       * @return This builder for chaining.
       */
      public Builder addKeypath(int value) {

        ensureKeypathIsMutable();
        keypath_.addInt(value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * all inputs must be ours.
       * </pre>
       *
       * <code>repeated uint32 keypath = 6;</code>
       * @param values The keypath to add.
       * @return This builder for chaining.
       */
      public Builder addAllKeypath(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureKeypathIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, keypath_);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * all inputs must be ours.
       * </pre>
       *
       * <code>repeated uint32 keypath = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearKeypath() {
        keypath_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private int scriptConfigIndex_ ;
      /**
       * <pre>
       * References a script config from BTCSignInitRequest
       * </pre>
       *
       * <code>uint32 script_config_index = 7;</code>
       * @return The scriptConfigIndex.
       */
      @java.lang.Override
      public int getScriptConfigIndex() {
        return scriptConfigIndex_;
      }
      /**
       * <pre>
       * References a script config from BTCSignInitRequest
       * </pre>
       *
       * <code>uint32 script_config_index = 7;</code>
       * @param value The scriptConfigIndex to set.
       * @return This builder for chaining.
       */
      public Builder setScriptConfigIndex(int value) {

        scriptConfigIndex_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * References a script config from BTCSignInitRequest
       * </pre>
       *
       * <code>uint32 script_config_index = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearScriptConfigIndex() {
        bitField0_ = (bitField0_ & ~0x00000020);
        scriptConfigIndex_ = 0;
        onChanged();
        return this;
      }

      private com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment hostNonceCommitment_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.Builder, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitmentOrBuilder> hostNonceCommitmentBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 8;</code>
       * @return Whether the hostNonceCommitment field is set.
       */
      public boolean hasHostNonceCommitment() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 8;</code>
       * @return The hostNonceCommitment.
       */
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment getHostNonceCommitment() {
        if (hostNonceCommitmentBuilder_ == null) {
          return hostNonceCommitment_ == null ? com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.getDefaultInstance() : hostNonceCommitment_;
        } else {
          return hostNonceCommitmentBuilder_.getMessage();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 8;</code>
       */
      public Builder setHostNonceCommitment(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment value) {
        if (hostNonceCommitmentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hostNonceCommitment_ = value;
        } else {
          hostNonceCommitmentBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 8;</code>
       */
      public Builder setHostNonceCommitment(
          com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.Builder builderForValue) {
        if (hostNonceCommitmentBuilder_ == null) {
          hostNonceCommitment_ = builderForValue.build();
        } else {
          hostNonceCommitmentBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 8;</code>
       */
      public Builder mergeHostNonceCommitment(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment value) {
        if (hostNonceCommitmentBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0) &&
            hostNonceCommitment_ != null &&
            hostNonceCommitment_ != com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.getDefaultInstance()) {
            getHostNonceCommitmentBuilder().mergeFrom(value);
          } else {
            hostNonceCommitment_ = value;
          }
        } else {
          hostNonceCommitmentBuilder_.mergeFrom(value);
        }
        if (hostNonceCommitment_ != null) {
          bitField0_ |= 0x00000040;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 8;</code>
       */
      public Builder clearHostNonceCommitment() {
        bitField0_ = (bitField0_ & ~0x00000040);
        hostNonceCommitment_ = null;
        if (hostNonceCommitmentBuilder_ != null) {
          hostNonceCommitmentBuilder_.dispose();
          hostNonceCommitmentBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 8;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.Builder getHostNonceCommitmentBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getHostNonceCommitmentFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 8;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitmentOrBuilder getHostNonceCommitmentOrBuilder() {
        if (hostNonceCommitmentBuilder_ != null) {
          return hostNonceCommitmentBuilder_.getMessageOrBuilder();
        } else {
          return hostNonceCommitment_ == null ?
              com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.getDefaultInstance() : hostNonceCommitment_;
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.Builder, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitmentOrBuilder> 
          getHostNonceCommitmentFieldBuilder() {
        if (hostNonceCommitmentBuilder_ == null) {
          hostNonceCommitmentBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.Builder, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitmentOrBuilder>(
                  getHostNonceCommitment(),
                  getParentForChildren(),
                  isClean());
          hostNonceCommitment_ = null;
        }
        return hostNonceCommitmentBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSignInputRequest)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSignInputRequest)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCSignInputRequest>
        PARSER = new com.google.protobuf.AbstractParser<BTCSignInputRequest>() {
      @java.lang.Override
      public BTCSignInputRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCSignInputRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCSignInputRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignInputRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCSignOutputRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bool ours = 1;</code>
     * @return The ours.
     */
    boolean getOurs();

    /**
     * <pre>
     * if ours is false
     * </pre>
     *
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCOutputType type = 2;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * if ours is false
     * </pre>
     *
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCOutputType type = 2;</code>
     * @return The type.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCOutputType getType();

    /**
     * <pre>
     * 20 bytes for p2pkh, p2sh, pw2wpkh. 32 bytes for p2wsh.
     * </pre>
     *
     * <code>uint64 value = 3;</code>
     * @return The value.
     */
    long getValue();

    /**
     * <pre>
     * if ours is false. Renamed from `hash`.
     * </pre>
     *
     * <code>bytes payload = 4;</code>
     * @return The payload.
     */
    com.google.protobuf.ByteString getPayload();

    /**
     * <pre>
     * if ours is true
     * </pre>
     *
     * <code>repeated uint32 keypath = 5;</code>
     * @return A list containing the keypath.
     */
    java.util.List<java.lang.Integer> getKeypathList();
    /**
     * <pre>
     * if ours is true
     * </pre>
     *
     * <code>repeated uint32 keypath = 5;</code>
     * @return The count of keypath.
     */
    int getKeypathCount();
    /**
     * <pre>
     * if ours is true
     * </pre>
     *
     * <code>repeated uint32 keypath = 5;</code>
     * @param index The index of the element to return.
     * @return The keypath at the given index.
     */
    int getKeypath(int index);

    /**
     * <pre>
     * If ours is true. References a script config from BTCSignInitRequest
     * </pre>
     *
     * <code>uint32 script_config_index = 6;</code>
     * @return The scriptConfigIndex.
     */
    int getScriptConfigIndex();

    /**
     * <code>optional uint32 payment_request_index = 7;</code>
     * @return Whether the paymentRequestIndex field is set.
     */
    boolean hasPaymentRequestIndex();
    /**
     * <code>optional uint32 payment_request_index = 7;</code>
     * @return The paymentRequestIndex.
     */
    int getPaymentRequestIndex();

    /**
     * <pre>
     * If provided, `type` and `payload` is ignored. The generated output pkScript is returned in
     * BTCSignNextResponse. `contains_silent_payment_outputs` in the init request must be true.
     * </pre>
     *
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment silent_payment = 8;</code>
     * @return Whether the silentPayment field is set.
     */
    boolean hasSilentPayment();
    /**
     * <pre>
     * If provided, `type` and `payload` is ignored. The generated output pkScript is returned in
     * BTCSignNextResponse. `contains_silent_payment_outputs` in the init request must be true.
     * </pre>
     *
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment silent_payment = 8;</code>
     * @return The silentPayment.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment getSilentPayment();
    /**
     * <pre>
     * If provided, `type` and `payload` is ignored. The generated output pkScript is returned in
     * BTCSignNextResponse. `contains_silent_payment_outputs` in the init request must be true.
     * </pre>
     *
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment silent_payment = 8;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPaymentOrBuilder getSilentPaymentOrBuilder();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest}
   */
  public static final class BTCSignOutputRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest)
      BTCSignOutputRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCSignOutputRequest.class.getName());
    }
    // Use BTCSignOutputRequest.newBuilder() to construct.
    private BTCSignOutputRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCSignOutputRequest() {
      type_ = 0;
      payload_ = com.google.protobuf.ByteString.EMPTY;
      keypath_ = emptyIntList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.Builder.class);
    }

    public interface SilentPaymentOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string address = 1;</code>
       * @return The address.
       */
      java.lang.String getAddress();
      /**
       * <code>string address = 1;</code>
       * @return The bytes for address.
       */
      com.google.protobuf.ByteString
          getAddressBytes();
    }
    /**
     * <pre>
     * https://github.com/bitcoin/bips/blob/master/bip-0352.mediawiki
     * </pre>
     *
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment}
     */
    public static final class SilentPayment extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment)
        SilentPaymentOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          SilentPayment.class.getName());
      }
      // Use SilentPayment.newBuilder() to construct.
      private SilentPayment(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private SilentPayment() {
        address_ = "";
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_SilentPayment_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_SilentPayment_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment.Builder.class);
      }

      public static final int ADDRESS_FIELD_NUMBER = 1;
      @SuppressWarnings("serial")
      private volatile java.lang.Object address_ = "";
      /**
       * <code>string address = 1;</code>
       * @return The address.
       */
      @java.lang.Override
      public java.lang.String getAddress() {
        java.lang.Object ref = address_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          address_ = s;
          return s;
        }
      }
      /**
       * <code>string address = 1;</code>
       * @return The bytes for address.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getAddressBytes() {
        java.lang.Object ref = address_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          address_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessage.isStringEmpty(address_)) {
          com.google.protobuf.GeneratedMessage.writeString(output, 1, address_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessage.isStringEmpty(address_)) {
          size += com.google.protobuf.GeneratedMessage.computeStringSize(1, address_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment) obj;

        if (!getAddress()
            .equals(other.getAddress())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ADDRESS_FIELD_NUMBER;
        hash = (53 * hash) + getAddress().hashCode();
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * https://github.com/bitcoin/bips/blob/master/bip-0352.mediawiki
       * </pre>
       *
       * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment)
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPaymentOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_SilentPayment_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_SilentPayment_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          address_ = "";
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_SilentPayment_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment getDefaultInstanceForType() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment build() {
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment buildPartial() {
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment result) {
          int from_bitField0_ = bitField0_;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.address_ = address_;
          }
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment) {
            return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment other) {
          if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment.getDefaultInstance()) return this;
          if (!other.getAddress().isEmpty()) {
            address_ = other.address_;
            bitField0_ |= 0x00000001;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  address_ = input.readStringRequireUtf8();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private java.lang.Object address_ = "";
        /**
         * <code>string address = 1;</code>
         * @return The address.
         */
        public java.lang.String getAddress() {
          java.lang.Object ref = address_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            address_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string address = 1;</code>
         * @return The bytes for address.
         */
        public com.google.protobuf.ByteString
            getAddressBytes() {
          java.lang.Object ref = address_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            address_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string address = 1;</code>
         * @param value The address to set.
         * @return This builder for chaining.
         */
        public Builder setAddress(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          address_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>string address = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearAddress() {
          address_ = getDefaultInstance().getAddress();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }
        /**
         * <code>string address = 1;</code>
         * @param value The bytes for address to set.
         * @return This builder for chaining.
         */
        public Builder setAddressBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          checkByteStringIsUtf8(value);
          address_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment)
      }

      // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment)
      private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment();
      }

      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<SilentPayment>
          PARSER = new com.google.protobuf.AbstractParser<SilentPayment>() {
        @java.lang.Override
        public SilentPayment parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<SilentPayment> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<SilentPayment> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int OURS_FIELD_NUMBER = 1;
    private boolean ours_ = false;
    /**
     * <code>bool ours = 1;</code>
     * @return The ours.
     */
    @java.lang.Override
    public boolean getOurs() {
      return ours_;
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private int type_ = 0;
    /**
     * <pre>
     * if ours is false
     * </pre>
     *
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCOutputType type = 2;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * if ours is false
     * </pre>
     *
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCOutputType type = 2;</code>
     * @return The type.
     */
    @java.lang.Override public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCOutputType getType() {
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCOutputType result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCOutputType.forNumber(type_);
      return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCOutputType.UNRECOGNIZED : result;
    }

    public static final int VALUE_FIELD_NUMBER = 3;
    private long value_ = 0L;
    /**
     * <pre>
     * 20 bytes for p2pkh, p2sh, pw2wpkh. 32 bytes for p2wsh.
     * </pre>
     *
     * <code>uint64 value = 3;</code>
     * @return The value.
     */
    @java.lang.Override
    public long getValue() {
      return value_;
    }

    public static final int PAYLOAD_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * if ours is false. Renamed from `hash`.
     * </pre>
     *
     * <code>bytes payload = 4;</code>
     * @return The payload.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPayload() {
      return payload_;
    }

    public static final int KEYPATH_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList keypath_ =
        emptyIntList();
    /**
     * <pre>
     * if ours is true
     * </pre>
     *
     * <code>repeated uint32 keypath = 5;</code>
     * @return A list containing the keypath.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getKeypathList() {
      return keypath_;
    }
    /**
     * <pre>
     * if ours is true
     * </pre>
     *
     * <code>repeated uint32 keypath = 5;</code>
     * @return The count of keypath.
     */
    public int getKeypathCount() {
      return keypath_.size();
    }
    /**
     * <pre>
     * if ours is true
     * </pre>
     *
     * <code>repeated uint32 keypath = 5;</code>
     * @param index The index of the element to return.
     * @return The keypath at the given index.
     */
    public int getKeypath(int index) {
      return keypath_.getInt(index);
    }
    private int keypathMemoizedSerializedSize = -1;

    public static final int SCRIPT_CONFIG_INDEX_FIELD_NUMBER = 6;
    private int scriptConfigIndex_ = 0;
    /**
     * <pre>
     * If ours is true. References a script config from BTCSignInitRequest
     * </pre>
     *
     * <code>uint32 script_config_index = 6;</code>
     * @return The scriptConfigIndex.
     */
    @java.lang.Override
    public int getScriptConfigIndex() {
      return scriptConfigIndex_;
    }

    public static final int PAYMENT_REQUEST_INDEX_FIELD_NUMBER = 7;
    private int paymentRequestIndex_ = 0;
    /**
     * <code>optional uint32 payment_request_index = 7;</code>
     * @return Whether the paymentRequestIndex field is set.
     */
    @java.lang.Override
    public boolean hasPaymentRequestIndex() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional uint32 payment_request_index = 7;</code>
     * @return The paymentRequestIndex.
     */
    @java.lang.Override
    public int getPaymentRequestIndex() {
      return paymentRequestIndex_;
    }

    public static final int SILENT_PAYMENT_FIELD_NUMBER = 8;
    private com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment silentPayment_;
    /**
     * <pre>
     * If provided, `type` and `payload` is ignored. The generated output pkScript is returned in
     * BTCSignNextResponse. `contains_silent_payment_outputs` in the init request must be true.
     * </pre>
     *
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment silent_payment = 8;</code>
     * @return Whether the silentPayment field is set.
     */
    @java.lang.Override
    public boolean hasSilentPayment() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * If provided, `type` and `payload` is ignored. The generated output pkScript is returned in
     * BTCSignNextResponse. `contains_silent_payment_outputs` in the init request must be true.
     * </pre>
     *
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment silent_payment = 8;</code>
     * @return The silentPayment.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment getSilentPayment() {
      return silentPayment_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment.getDefaultInstance() : silentPayment_;
    }
    /**
     * <pre>
     * If provided, `type` and `payload` is ignored. The generated output pkScript is returned in
     * BTCSignNextResponse. `contains_silent_payment_outputs` in the init request must be true.
     * </pre>
     *
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment silent_payment = 8;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPaymentOrBuilder getSilentPaymentOrBuilder() {
      return silentPayment_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment.getDefaultInstance() : silentPayment_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (ours_ != false) {
        output.writeBool(1, ours_);
      }
      if (type_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCOutputType.UNKNOWN.getNumber()) {
        output.writeEnum(2, type_);
      }
      if (value_ != 0L) {
        output.writeUInt64(3, value_);
      }
      if (!payload_.isEmpty()) {
        output.writeBytes(4, payload_);
      }
      if (getKeypathList().size() > 0) {
        output.writeUInt32NoTag(42);
        output.writeUInt32NoTag(keypathMemoizedSerializedSize);
      }
      for (int i = 0; i < keypath_.size(); i++) {
        output.writeUInt32NoTag(keypath_.getInt(i));
      }
      if (scriptConfigIndex_ != 0) {
        output.writeUInt32(6, scriptConfigIndex_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(7, paymentRequestIndex_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(8, getSilentPayment());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (ours_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, ours_);
      }
      if (type_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCOutputType.UNKNOWN.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_);
      }
      if (value_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, value_);
      }
      if (!payload_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, payload_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < keypath_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(keypath_.getInt(i));
        }
        size += dataSize;
        if (!getKeypathList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        keypathMemoizedSerializedSize = dataSize;
      }
      if (scriptConfigIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, scriptConfigIndex_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, paymentRequestIndex_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getSilentPayment());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest) obj;

      if (getOurs()
          != other.getOurs()) return false;
      if (type_ != other.type_) return false;
      if (getValue()
          != other.getValue()) return false;
      if (!getPayload()
          .equals(other.getPayload())) return false;
      if (!getKeypathList()
          .equals(other.getKeypathList())) return false;
      if (getScriptConfigIndex()
          != other.getScriptConfigIndex()) return false;
      if (hasPaymentRequestIndex() != other.hasPaymentRequestIndex()) return false;
      if (hasPaymentRequestIndex()) {
        if (getPaymentRequestIndex()
            != other.getPaymentRequestIndex()) return false;
      }
      if (hasSilentPayment() != other.hasSilentPayment()) return false;
      if (hasSilentPayment()) {
        if (!getSilentPayment()
            .equals(other.getSilentPayment())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + OURS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getOurs());
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getValue());
      hash = (37 * hash) + PAYLOAD_FIELD_NUMBER;
      hash = (53 * hash) + getPayload().hashCode();
      if (getKeypathCount() > 0) {
        hash = (37 * hash) + KEYPATH_FIELD_NUMBER;
        hash = (53 * hash) + getKeypathList().hashCode();
      }
      hash = (37 * hash) + SCRIPT_CONFIG_INDEX_FIELD_NUMBER;
      hash = (53 * hash) + getScriptConfigIndex();
      if (hasPaymentRequestIndex()) {
        hash = (37 * hash) + PAYMENT_REQUEST_INDEX_FIELD_NUMBER;
        hash = (53 * hash) + getPaymentRequestIndex();
      }
      if (hasSilentPayment()) {
        hash = (37 * hash) + SILENT_PAYMENT_FIELD_NUMBER;
        hash = (53 * hash) + getSilentPayment().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getSilentPaymentFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        ours_ = false;
        type_ = 0;
        value_ = 0L;
        payload_ = com.google.protobuf.ByteString.EMPTY;
        keypath_ = emptyIntList();
        scriptConfigIndex_ = 0;
        paymentRequestIndex_ = 0;
        silentPayment_ = null;
        if (silentPaymentBuilder_ != null) {
          silentPaymentBuilder_.dispose();
          silentPaymentBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.ours_ = ours_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.type_ = type_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.value_ = value_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.payload_ = payload_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          keypath_.makeImmutable();
          result.keypath_ = keypath_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.scriptConfigIndex_ = scriptConfigIndex_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.paymentRequestIndex_ = paymentRequestIndex_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.silentPayment_ = silentPaymentBuilder_ == null
              ? silentPayment_
              : silentPaymentBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.getDefaultInstance()) return this;
        if (other.getOurs() != false) {
          setOurs(other.getOurs());
        }
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.getValue() != 0L) {
          setValue(other.getValue());
        }
        if (other.getPayload() != com.google.protobuf.ByteString.EMPTY) {
          setPayload(other.getPayload());
        }
        if (!other.keypath_.isEmpty()) {
          if (keypath_.isEmpty()) {
            keypath_ = other.keypath_;
            keypath_.makeImmutable();
            bitField0_ |= 0x00000010;
          } else {
            ensureKeypathIsMutable();
            keypath_.addAll(other.keypath_);
          }
          onChanged();
        }
        if (other.getScriptConfigIndex() != 0) {
          setScriptConfigIndex(other.getScriptConfigIndex());
        }
        if (other.hasPaymentRequestIndex()) {
          setPaymentRequestIndex(other.getPaymentRequestIndex());
        }
        if (other.hasSilentPayment()) {
          mergeSilentPayment(other.getSilentPayment());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                ours_ = input.readBool();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                type_ = input.readEnum();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                value_ = input.readUInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                payload_ = input.readBytes();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 40: {
                int v = input.readUInt32();
                ensureKeypathIsMutable();
                keypath_.addInt(v);
                break;
              } // case 40
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureKeypathIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  keypath_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 42
              case 48: {
                scriptConfigIndex_ = input.readUInt32();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 56: {
                paymentRequestIndex_ = input.readUInt32();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 66: {
                input.readMessage(
                    getSilentPaymentFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000080;
                break;
              } // case 66
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private boolean ours_ ;
      /**
       * <code>bool ours = 1;</code>
       * @return The ours.
       */
      @java.lang.Override
      public boolean getOurs() {
        return ours_;
      }
      /**
       * <code>bool ours = 1;</code>
       * @param value The ours to set.
       * @return This builder for chaining.
       */
      public Builder setOurs(boolean value) {

        ours_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>bool ours = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearOurs() {
        bitField0_ = (bitField0_ & ~0x00000001);
        ours_ = false;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <pre>
       * if ours is false
       * </pre>
       *
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCOutputType type = 2;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * if ours is false
       * </pre>
       *
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCOutputType type = 2;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if ours is false
       * </pre>
       *
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCOutputType type = 2;</code>
       * @return The type.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCOutputType getType() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCOutputType result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCOutputType.forNumber(type_);
        return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCOutputType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * if ours is false
       * </pre>
       *
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCOutputType type = 2;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCOutputType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if ours is false
       * </pre>
       *
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCOutputType type = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = 0;
        onChanged();
        return this;
      }

      private long value_ ;
      /**
       * <pre>
       * 20 bytes for p2pkh, p2sh, pw2wpkh. 32 bytes for p2wsh.
       * </pre>
       *
       * <code>uint64 value = 3;</code>
       * @return The value.
       */
      @java.lang.Override
      public long getValue() {
        return value_;
      }
      /**
       * <pre>
       * 20 bytes for p2pkh, p2sh, pw2wpkh. 32 bytes for p2wsh.
       * </pre>
       *
       * <code>uint64 value = 3;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(long value) {

        value_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 20 bytes for p2pkh, p2sh, pw2wpkh. 32 bytes for p2wsh.
       * </pre>
       *
       * <code>uint64 value = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000004);
        value_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * if ours is false. Renamed from `hash`.
       * </pre>
       *
       * <code>bytes payload = 4;</code>
       * @return The payload.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPayload() {
        return payload_;
      }
      /**
       * <pre>
       * if ours is false. Renamed from `hash`.
       * </pre>
       *
       * <code>bytes payload = 4;</code>
       * @param value The payload to set.
       * @return This builder for chaining.
       */
      public Builder setPayload(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        payload_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if ours is false. Renamed from `hash`.
       * </pre>
       *
       * <code>bytes payload = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearPayload() {
        bitField0_ = (bitField0_ & ~0x00000008);
        payload_ = getDefaultInstance().getPayload();
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList keypath_ = emptyIntList();
      private void ensureKeypathIsMutable() {
        if (!keypath_.isModifiable()) {
          keypath_ = makeMutableCopy(keypath_);
        }
        bitField0_ |= 0x00000010;
      }
      /**
       * <pre>
       * if ours is true
       * </pre>
       *
       * <code>repeated uint32 keypath = 5;</code>
       * @return A list containing the keypath.
       */
      public java.util.List<java.lang.Integer>
          getKeypathList() {
        keypath_.makeImmutable();
        return keypath_;
      }
      /**
       * <pre>
       * if ours is true
       * </pre>
       *
       * <code>repeated uint32 keypath = 5;</code>
       * @return The count of keypath.
       */
      public int getKeypathCount() {
        return keypath_.size();
      }
      /**
       * <pre>
       * if ours is true
       * </pre>
       *
       * <code>repeated uint32 keypath = 5;</code>
       * @param index The index of the element to return.
       * @return The keypath at the given index.
       */
      public int getKeypath(int index) {
        return keypath_.getInt(index);
      }
      /**
       * <pre>
       * if ours is true
       * </pre>
       *
       * <code>repeated uint32 keypath = 5;</code>
       * @param index The index to set the value at.
       * @param value The keypath to set.
       * @return This builder for chaining.
       */
      public Builder setKeypath(
          int index, int value) {

        ensureKeypathIsMutable();
        keypath_.setInt(index, value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if ours is true
       * </pre>
       *
       * <code>repeated uint32 keypath = 5;</code>
       * @param value The keypath to add.
       * @return This builder for chaining.
       */
      public Builder addKeypath(int value) {

        ensureKeypathIsMutable();
        keypath_.addInt(value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if ours is true
       * </pre>
       *
       * <code>repeated uint32 keypath = 5;</code>
       * @param values The keypath to add.
       * @return This builder for chaining.
       */
      public Builder addAllKeypath(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureKeypathIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, keypath_);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if ours is true
       * </pre>
       *
       * <code>repeated uint32 keypath = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearKeypath() {
        keypath_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private int scriptConfigIndex_ ;
      /**
       * <pre>
       * If ours is true. References a script config from BTCSignInitRequest
       * </pre>
       *
       * <code>uint32 script_config_index = 6;</code>
       * @return The scriptConfigIndex.
       */
      @java.lang.Override
      public int getScriptConfigIndex() {
        return scriptConfigIndex_;
      }
      /**
       * <pre>
       * If ours is true. References a script config from BTCSignInitRequest
       * </pre>
       *
       * <code>uint32 script_config_index = 6;</code>
       * @param value The scriptConfigIndex to set.
       * @return This builder for chaining.
       */
      public Builder setScriptConfigIndex(int value) {

        scriptConfigIndex_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If ours is true. References a script config from BTCSignInitRequest
       * </pre>
       *
       * <code>uint32 script_config_index = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearScriptConfigIndex() {
        bitField0_ = (bitField0_ & ~0x00000020);
        scriptConfigIndex_ = 0;
        onChanged();
        return this;
      }

      private int paymentRequestIndex_ ;
      /**
       * <code>optional uint32 payment_request_index = 7;</code>
       * @return Whether the paymentRequestIndex field is set.
       */
      @java.lang.Override
      public boolean hasPaymentRequestIndex() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional uint32 payment_request_index = 7;</code>
       * @return The paymentRequestIndex.
       */
      @java.lang.Override
      public int getPaymentRequestIndex() {
        return paymentRequestIndex_;
      }
      /**
       * <code>optional uint32 payment_request_index = 7;</code>
       * @param value The paymentRequestIndex to set.
       * @return This builder for chaining.
       */
      public Builder setPaymentRequestIndex(int value) {

        paymentRequestIndex_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 payment_request_index = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearPaymentRequestIndex() {
        bitField0_ = (bitField0_ & ~0x00000040);
        paymentRequestIndex_ = 0;
        onChanged();
        return this;
      }

      private com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment silentPayment_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPaymentOrBuilder> silentPaymentBuilder_;
      /**
       * <pre>
       * If provided, `type` and `payload` is ignored. The generated output pkScript is returned in
       * BTCSignNextResponse. `contains_silent_payment_outputs` in the init request must be true.
       * </pre>
       *
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment silent_payment = 8;</code>
       * @return Whether the silentPayment field is set.
       */
      public boolean hasSilentPayment() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * If provided, `type` and `payload` is ignored. The generated output pkScript is returned in
       * BTCSignNextResponse. `contains_silent_payment_outputs` in the init request must be true.
       * </pre>
       *
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment silent_payment = 8;</code>
       * @return The silentPayment.
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment getSilentPayment() {
        if (silentPaymentBuilder_ == null) {
          return silentPayment_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment.getDefaultInstance() : silentPayment_;
        } else {
          return silentPaymentBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * If provided, `type` and `payload` is ignored. The generated output pkScript is returned in
       * BTCSignNextResponse. `contains_silent_payment_outputs` in the init request must be true.
       * </pre>
       *
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment silent_payment = 8;</code>
       */
      public Builder setSilentPayment(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment value) {
        if (silentPaymentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          silentPayment_ = value;
        } else {
          silentPaymentBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If provided, `type` and `payload` is ignored. The generated output pkScript is returned in
       * BTCSignNextResponse. `contains_silent_payment_outputs` in the init request must be true.
       * </pre>
       *
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment silent_payment = 8;</code>
       */
      public Builder setSilentPayment(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment.Builder builderForValue) {
        if (silentPaymentBuilder_ == null) {
          silentPayment_ = builderForValue.build();
        } else {
          silentPaymentBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If provided, `type` and `payload` is ignored. The generated output pkScript is returned in
       * BTCSignNextResponse. `contains_silent_payment_outputs` in the init request must be true.
       * </pre>
       *
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment silent_payment = 8;</code>
       */
      public Builder mergeSilentPayment(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment value) {
        if (silentPaymentBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0) &&
            silentPayment_ != null &&
            silentPayment_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment.getDefaultInstance()) {
            getSilentPaymentBuilder().mergeFrom(value);
          } else {
            silentPayment_ = value;
          }
        } else {
          silentPaymentBuilder_.mergeFrom(value);
        }
        if (silentPayment_ != null) {
          bitField0_ |= 0x00000080;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * If provided, `type` and `payload` is ignored. The generated output pkScript is returned in
       * BTCSignNextResponse. `contains_silent_payment_outputs` in the init request must be true.
       * </pre>
       *
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment silent_payment = 8;</code>
       */
      public Builder clearSilentPayment() {
        bitField0_ = (bitField0_ & ~0x00000080);
        silentPayment_ = null;
        if (silentPaymentBuilder_ != null) {
          silentPaymentBuilder_.dispose();
          silentPaymentBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If provided, `type` and `payload` is ignored. The generated output pkScript is returned in
       * BTCSignNextResponse. `contains_silent_payment_outputs` in the init request must be true.
       * </pre>
       *
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment silent_payment = 8;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment.Builder getSilentPaymentBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getSilentPaymentFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * If provided, `type` and `payload` is ignored. The generated output pkScript is returned in
       * BTCSignNextResponse. `contains_silent_payment_outputs` in the init request must be true.
       * </pre>
       *
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment silent_payment = 8;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPaymentOrBuilder getSilentPaymentOrBuilder() {
        if (silentPaymentBuilder_ != null) {
          return silentPaymentBuilder_.getMessageOrBuilder();
        } else {
          return silentPayment_ == null ?
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment.getDefaultInstance() : silentPayment_;
        }
      }
      /**
       * <pre>
       * If provided, `type` and `payload` is ignored. The generated output pkScript is returned in
       * BTCSignNextResponse. `contains_silent_payment_outputs` in the init request must be true.
       * </pre>
       *
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest.SilentPayment silent_payment = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPaymentOrBuilder> 
          getSilentPaymentFieldBuilder() {
        if (silentPaymentBuilder_ == null) {
          silentPaymentBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPayment.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest.SilentPaymentOrBuilder>(
                  getSilentPayment(),
                  getParentForChildren(),
                  isClean());
          silentPayment_ = null;
        }
        return silentPaymentBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSignOutputRequest)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCSignOutputRequest>
        PARSER = new com.google.protobuf.AbstractParser<BTCSignOutputRequest>() {
      @java.lang.Override
      public BTCSignOutputRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCSignOutputRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCSignOutputRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignOutputRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCScriptConfigRegistrationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
     * @return The enum numeric value on the wire for coin.
     */
    int getCoinValue();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
     * @return The coin.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin getCoin();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
     * @return Whether the scriptConfig field is set.
     */
    boolean hasScriptConfig();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
     * @return The scriptConfig.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig getScriptConfig();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder getScriptConfigOrBuilder();

    /**
     * <pre>
     * Unused for policy registrations.
     * </pre>
     *
     * <code>repeated uint32 keypath = 3;</code>
     * @return A list containing the keypath.
     */
    java.util.List<java.lang.Integer> getKeypathList();
    /**
     * <pre>
     * Unused for policy registrations.
     * </pre>
     *
     * <code>repeated uint32 keypath = 3;</code>
     * @return The count of keypath.
     */
    int getKeypathCount();
    /**
     * <pre>
     * Unused for policy registrations.
     * </pre>
     *
     * <code>repeated uint32 keypath = 3;</code>
     * @param index The index of the element to return.
     * @return The keypath at the given index.
     */
    int getKeypath(int index);
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration}
   */
  public static final class BTCScriptConfigRegistration extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration)
      BTCScriptConfigRegistrationOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCScriptConfigRegistration.class.getName());
    }
    // Use BTCScriptConfigRegistration.newBuilder() to construct.
    private BTCScriptConfigRegistration(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCScriptConfigRegistration() {
      coin_ = 0;
      keypath_ = emptyIntList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigRegistration_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigRegistration_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.Builder.class);
    }

    private int bitField0_;
    public static final int COIN_FIELD_NUMBER = 1;
    private int coin_ = 0;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
     * @return The enum numeric value on the wire for coin.
     */
    @java.lang.Override public int getCoinValue() {
      return coin_;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
     * @return The coin.
     */
    @java.lang.Override public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin getCoin() {
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.forNumber(coin_);
      return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.UNRECOGNIZED : result;
    }

    public static final int SCRIPT_CONFIG_FIELD_NUMBER = 2;
    private com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig scriptConfig_;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
     * @return Whether the scriptConfig field is set.
     */
    @java.lang.Override
    public boolean hasScriptConfig() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
     * @return The scriptConfig.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig getScriptConfig() {
      return scriptConfig_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance() : scriptConfig_;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder getScriptConfigOrBuilder() {
      return scriptConfig_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance() : scriptConfig_;
    }

    public static final int KEYPATH_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList keypath_ =
        emptyIntList();
    /**
     * <pre>
     * Unused for policy registrations.
     * </pre>
     *
     * <code>repeated uint32 keypath = 3;</code>
     * @return A list containing the keypath.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getKeypathList() {
      return keypath_;
    }
    /**
     * <pre>
     * Unused for policy registrations.
     * </pre>
     *
     * <code>repeated uint32 keypath = 3;</code>
     * @return The count of keypath.
     */
    public int getKeypathCount() {
      return keypath_.size();
    }
    /**
     * <pre>
     * Unused for policy registrations.
     * </pre>
     *
     * <code>repeated uint32 keypath = 3;</code>
     * @param index The index of the element to return.
     * @return The keypath at the given index.
     */
    public int getKeypath(int index) {
      return keypath_.getInt(index);
    }
    private int keypathMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (coin_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.BTC.getNumber()) {
        output.writeEnum(1, coin_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(2, getScriptConfig());
      }
      if (getKeypathList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(keypathMemoizedSerializedSize);
      }
      for (int i = 0; i < keypath_.size(); i++) {
        output.writeUInt32NoTag(keypath_.getInt(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (coin_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.BTC.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, coin_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getScriptConfig());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < keypath_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(keypath_.getInt(i));
        }
        size += dataSize;
        if (!getKeypathList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        keypathMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration) obj;

      if (coin_ != other.coin_) return false;
      if (hasScriptConfig() != other.hasScriptConfig()) return false;
      if (hasScriptConfig()) {
        if (!getScriptConfig()
            .equals(other.getScriptConfig())) return false;
      }
      if (!getKeypathList()
          .equals(other.getKeypathList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + COIN_FIELD_NUMBER;
      hash = (53 * hash) + coin_;
      if (hasScriptConfig()) {
        hash = (37 * hash) + SCRIPT_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getScriptConfig().hashCode();
      }
      if (getKeypathCount() > 0) {
        hash = (37 * hash) + KEYPATH_FIELD_NUMBER;
        hash = (53 * hash) + getKeypathList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistrationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigRegistration_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigRegistration_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getScriptConfigFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        coin_ = 0;
        scriptConfig_ = null;
        if (scriptConfigBuilder_ != null) {
          scriptConfigBuilder_.dispose();
          scriptConfigBuilder_ = null;
        }
        keypath_ = emptyIntList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigRegistration_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.coin_ = coin_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.scriptConfig_ = scriptConfigBuilder_ == null
              ? scriptConfig_
              : scriptConfigBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          keypath_.makeImmutable();
          result.keypath_ = keypath_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.getDefaultInstance()) return this;
        if (other.coin_ != 0) {
          setCoinValue(other.getCoinValue());
        }
        if (other.hasScriptConfig()) {
          mergeScriptConfig(other.getScriptConfig());
        }
        if (!other.keypath_.isEmpty()) {
          if (keypath_.isEmpty()) {
            keypath_ = other.keypath_;
            keypath_.makeImmutable();
            bitField0_ |= 0x00000004;
          } else {
            ensureKeypathIsMutable();
            keypath_.addAll(other.keypath_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                coin_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getScriptConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                int v = input.readUInt32();
                ensureKeypathIsMutable();
                keypath_.addInt(v);
                break;
              } // case 24
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureKeypathIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  keypath_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int coin_ = 0;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @return The enum numeric value on the wire for coin.
       */
      @java.lang.Override public int getCoinValue() {
        return coin_;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @param value The enum numeric value on the wire for coin to set.
       * @return This builder for chaining.
       */
      public Builder setCoinValue(int value) {
        coin_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @return The coin.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin getCoin() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.forNumber(coin_);
        return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.UNRECOGNIZED : result;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @param value The coin to set.
       * @return This builder for chaining.
       */
      public Builder setCoin(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        coin_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCoin() {
        bitField0_ = (bitField0_ & ~0x00000001);
        coin_ = 0;
        onChanged();
        return this;
      }

      private com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig scriptConfig_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder> scriptConfigBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       * @return Whether the scriptConfig field is set.
       */
      public boolean hasScriptConfig() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       * @return The scriptConfig.
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig getScriptConfig() {
        if (scriptConfigBuilder_ == null) {
          return scriptConfig_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance() : scriptConfig_;
        } else {
          return scriptConfigBuilder_.getMessage();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       */
      public Builder setScriptConfig(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig value) {
        if (scriptConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          scriptConfig_ = value;
        } else {
          scriptConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       */
      public Builder setScriptConfig(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Builder builderForValue) {
        if (scriptConfigBuilder_ == null) {
          scriptConfig_ = builderForValue.build();
        } else {
          scriptConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       */
      public Builder mergeScriptConfig(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig value) {
        if (scriptConfigBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            scriptConfig_ != null &&
            scriptConfig_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance()) {
            getScriptConfigBuilder().mergeFrom(value);
          } else {
            scriptConfig_ = value;
          }
        } else {
          scriptConfigBuilder_.mergeFrom(value);
        }
        if (scriptConfig_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       */
      public Builder clearScriptConfig() {
        bitField0_ = (bitField0_ & ~0x00000002);
        scriptConfig_ = null;
        if (scriptConfigBuilder_ != null) {
          scriptConfigBuilder_.dispose();
          scriptConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Builder getScriptConfigBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getScriptConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder getScriptConfigOrBuilder() {
        if (scriptConfigBuilder_ != null) {
          return scriptConfigBuilder_.getMessageOrBuilder();
        } else {
          return scriptConfig_ == null ?
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.getDefaultInstance() : scriptConfig_;
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfig script_config = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder> 
          getScriptConfigFieldBuilder() {
        if (scriptConfigBuilder_ == null) {
          scriptConfigBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfig.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigOrBuilder>(
                  getScriptConfig(),
                  getParentForChildren(),
                  isClean());
          scriptConfig_ = null;
        }
        return scriptConfigBuilder_;
      }

      private com.google.protobuf.Internal.IntList keypath_ = emptyIntList();
      private void ensureKeypathIsMutable() {
        if (!keypath_.isModifiable()) {
          keypath_ = makeMutableCopy(keypath_);
        }
        bitField0_ |= 0x00000004;
      }
      /**
       * <pre>
       * Unused for policy registrations.
       * </pre>
       *
       * <code>repeated uint32 keypath = 3;</code>
       * @return A list containing the keypath.
       */
      public java.util.List<java.lang.Integer>
          getKeypathList() {
        keypath_.makeImmutable();
        return keypath_;
      }
      /**
       * <pre>
       * Unused for policy registrations.
       * </pre>
       *
       * <code>repeated uint32 keypath = 3;</code>
       * @return The count of keypath.
       */
      public int getKeypathCount() {
        return keypath_.size();
      }
      /**
       * <pre>
       * Unused for policy registrations.
       * </pre>
       *
       * <code>repeated uint32 keypath = 3;</code>
       * @param index The index of the element to return.
       * @return The keypath at the given index.
       */
      public int getKeypath(int index) {
        return keypath_.getInt(index);
      }
      /**
       * <pre>
       * Unused for policy registrations.
       * </pre>
       *
       * <code>repeated uint32 keypath = 3;</code>
       * @param index The index to set the value at.
       * @param value The keypath to set.
       * @return This builder for chaining.
       */
      public Builder setKeypath(
          int index, int value) {

        ensureKeypathIsMutable();
        keypath_.setInt(index, value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unused for policy registrations.
       * </pre>
       *
       * <code>repeated uint32 keypath = 3;</code>
       * @param value The keypath to add.
       * @return This builder for chaining.
       */
      public Builder addKeypath(int value) {

        ensureKeypathIsMutable();
        keypath_.addInt(value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unused for policy registrations.
       * </pre>
       *
       * <code>repeated uint32 keypath = 3;</code>
       * @param values The keypath to add.
       * @return This builder for chaining.
       */
      public Builder addAllKeypath(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureKeypathIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, keypath_);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unused for policy registrations.
       * </pre>
       *
       * <code>repeated uint32 keypath = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearKeypath() {
        keypath_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCScriptConfigRegistration>
        PARSER = new com.google.protobuf.AbstractParser<BTCScriptConfigRegistration>() {
      @java.lang.Override
      public BTCScriptConfigRegistration parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCScriptConfigRegistration> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCScriptConfigRegistration> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCSuccessOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCSuccess)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCSuccess}
   */
  public static final class BTCSuccess extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCSuccess)
      BTCSuccessOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCSuccess.class.getName());
    }
    // Use BTCSuccess.newBuilder() to construct.
    private BTCSuccess(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCSuccess() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSuccess_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSuccess_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCSuccess}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCSuccess)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccessOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSuccess_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSuccess_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSuccess_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSuccess)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSuccess)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCSuccess>
        PARSER = new com.google.protobuf.AbstractParser<BTCSuccess>() {
      @java.lang.Override
      public BTCSuccess parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCSuccess> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCSuccess> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCIsScriptConfigRegisteredRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
     * @return Whether the registration field is set.
     */
    boolean hasRegistration();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
     * @return The registration.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration getRegistration();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistrationOrBuilder getRegistrationOrBuilder();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest}
   */
  public static final class BTCIsScriptConfigRegisteredRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest)
      BTCIsScriptConfigRegisteredRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCIsScriptConfigRegisteredRequest.class.getName());
    }
    // Use BTCIsScriptConfigRegisteredRequest.newBuilder() to construct.
    private BTCIsScriptConfigRegisteredRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCIsScriptConfigRegisteredRequest() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.Builder.class);
    }

    private int bitField0_;
    public static final int REGISTRATION_FIELD_NUMBER = 1;
    private com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration registration_;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
     * @return Whether the registration field is set.
     */
    @java.lang.Override
    public boolean hasRegistration() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
     * @return The registration.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration getRegistration() {
      return registration_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.getDefaultInstance() : registration_;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistrationOrBuilder getRegistrationOrBuilder() {
      return registration_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.getDefaultInstance() : registration_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getRegistration());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getRegistration());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest) obj;

      if (hasRegistration() != other.hasRegistration()) return false;
      if (hasRegistration()) {
        if (!getRegistration()
            .equals(other.getRegistration())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasRegistration()) {
        hash = (37 * hash) + REGISTRATION_FIELD_NUMBER;
        hash = (53 * hash) + getRegistration().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getRegistrationFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        registration_ = null;
        if (registrationBuilder_ != null) {
          registrationBuilder_.dispose();
          registrationBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredRequest_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.registration_ = registrationBuilder_ == null
              ? registration_
              : registrationBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.getDefaultInstance()) return this;
        if (other.hasRegistration()) {
          mergeRegistration(other.getRegistration());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getRegistrationFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration registration_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistrationOrBuilder> registrationBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       * @return Whether the registration field is set.
       */
      public boolean hasRegistration() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       * @return The registration.
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration getRegistration() {
        if (registrationBuilder_ == null) {
          return registration_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.getDefaultInstance() : registration_;
        } else {
          return registrationBuilder_.getMessage();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       */
      public Builder setRegistration(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration value) {
        if (registrationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          registration_ = value;
        } else {
          registrationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       */
      public Builder setRegistration(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.Builder builderForValue) {
        if (registrationBuilder_ == null) {
          registration_ = builderForValue.build();
        } else {
          registrationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       */
      public Builder mergeRegistration(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration value) {
        if (registrationBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            registration_ != null &&
            registration_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.getDefaultInstance()) {
            getRegistrationBuilder().mergeFrom(value);
          } else {
            registration_ = value;
          }
        } else {
          registrationBuilder_.mergeFrom(value);
        }
        if (registration_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       */
      public Builder clearRegistration() {
        bitField0_ = (bitField0_ & ~0x00000001);
        registration_ = null;
        if (registrationBuilder_ != null) {
          registrationBuilder_.dispose();
          registrationBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.Builder getRegistrationBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRegistrationFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistrationOrBuilder getRegistrationOrBuilder() {
        if (registrationBuilder_ != null) {
          return registrationBuilder_.getMessageOrBuilder();
        } else {
          return registration_ == null ?
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.getDefaultInstance() : registration_;
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistrationOrBuilder> 
          getRegistrationFieldBuilder() {
        if (registrationBuilder_ == null) {
          registrationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistrationOrBuilder>(
                  getRegistration(),
                  getParentForChildren(),
                  isClean());
          registration_ = null;
        }
        return registrationBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCIsScriptConfigRegisteredRequest>
        PARSER = new com.google.protobuf.AbstractParser<BTCIsScriptConfigRegisteredRequest>() {
      @java.lang.Override
      public BTCIsScriptConfigRegisteredRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCIsScriptConfigRegisteredRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCIsScriptConfigRegisteredRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCIsScriptConfigRegisteredResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bool is_registered = 1;</code>
     * @return The isRegistered.
     */
    boolean getIsRegistered();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse}
   */
  public static final class BTCIsScriptConfigRegisteredResponse extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse)
      BTCIsScriptConfigRegisteredResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCIsScriptConfigRegisteredResponse.class.getName());
    }
    // Use BTCIsScriptConfigRegisteredResponse.newBuilder() to construct.
    private BTCIsScriptConfigRegisteredResponse(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCIsScriptConfigRegisteredResponse() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.Builder.class);
    }

    public static final int IS_REGISTERED_FIELD_NUMBER = 1;
    private boolean isRegistered_ = false;
    /**
     * <code>bool is_registered = 1;</code>
     * @return The isRegistered.
     */
    @java.lang.Override
    public boolean getIsRegistered() {
      return isRegistered_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (isRegistered_ != false) {
        output.writeBool(1, isRegistered_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (isRegistered_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isRegistered_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse) obj;

      if (getIsRegistered()
          != other.getIsRegistered()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + IS_REGISTERED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsRegistered());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        isRegistered_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredResponse_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.isRegistered_ = isRegistered_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.getDefaultInstance()) return this;
        if (other.getIsRegistered() != false) {
          setIsRegistered(other.getIsRegistered());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                isRegistered_ = input.readBool();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private boolean isRegistered_ ;
      /**
       * <code>bool is_registered = 1;</code>
       * @return The isRegistered.
       */
      @java.lang.Override
      public boolean getIsRegistered() {
        return isRegistered_;
      }
      /**
       * <code>bool is_registered = 1;</code>
       * @param value The isRegistered to set.
       * @return This builder for chaining.
       */
      public Builder setIsRegistered(boolean value) {

        isRegistered_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>bool is_registered = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsRegistered() {
        bitField0_ = (bitField0_ & ~0x00000001);
        isRegistered_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCIsScriptConfigRegisteredResponse>
        PARSER = new com.google.protobuf.AbstractParser<BTCIsScriptConfigRegisteredResponse>() {
      @java.lang.Override
      public BTCIsScriptConfigRegisteredResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCIsScriptConfigRegisteredResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCIsScriptConfigRegisteredResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCRegisterScriptConfigRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
     * @return Whether the registration field is set.
     */
    boolean hasRegistration();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
     * @return The registration.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration getRegistration();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistrationOrBuilder getRegistrationOrBuilder();

    /**
     * <pre>
     * If empty, the name is entered on the device instead.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * If empty, the name is entered on the device instead.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest.XPubType xpub_type = 3;</code>
     * @return The enum numeric value on the wire for xpubType.
     */
    int getXpubTypeValue();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest.XPubType xpub_type = 3;</code>
     * @return The xpubType.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.XPubType getXpubType();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest}
   */
  public static final class BTCRegisterScriptConfigRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest)
      BTCRegisterScriptConfigRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCRegisterScriptConfigRequest.class.getName());
    }
    // Use BTCRegisterScriptConfigRequest.newBuilder() to construct.
    private BTCRegisterScriptConfigRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCRegisterScriptConfigRequest() {
      name_ = "";
      xpubType_ = 0;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRegisterScriptConfigRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRegisterScriptConfigRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.Builder.class);
    }

    /**
     * Protobuf enum {@code com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest.XPubType}
     */
    public enum XPubType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Automatically choose to match Electrum's xpub format (e.g. Zpub/Vpub for p2wsh multisig mainnet/testnet).
       * </pre>
       *
       * <code>AUTO_ELECTRUM = 0;</code>
       */
      AUTO_ELECTRUM(0),
      /**
       * <pre>
       * Always xpub for mainnets, tpub for testnets.
       * </pre>
       *
       * <code>AUTO_XPUB_TPUB = 1;</code>
       */
      AUTO_XPUB_TPUB(1),
      UNRECOGNIZED(-1),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          XPubType.class.getName());
      }
      /**
       * <pre>
       * Automatically choose to match Electrum's xpub format (e.g. Zpub/Vpub for p2wsh multisig mainnet/testnet).
       * </pre>
       *
       * <code>AUTO_ELECTRUM = 0;</code>
       */
      public static final int AUTO_ELECTRUM_VALUE = 0;
      /**
       * <pre>
       * Always xpub for mainnets, tpub for testnets.
       * </pre>
       *
       * <code>AUTO_XPUB_TPUB = 1;</code>
       */
      public static final int AUTO_XPUB_TPUB_VALUE = 1;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static XPubType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static XPubType forNumber(int value) {
        switch (value) {
          case 0: return AUTO_ELECTRUM;
          case 1: return AUTO_XPUB_TPUB;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<XPubType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          XPubType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<XPubType>() {
              public XPubType findValueByNumber(int number) {
                return XPubType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.getDescriptor().getEnumTypes().get(0);
      }

      private static final XPubType[] VALUES = values();

      public static XPubType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private XPubType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest.XPubType)
    }

    private int bitField0_;
    public static final int REGISTRATION_FIELD_NUMBER = 1;
    private com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration registration_;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
     * @return Whether the registration field is set.
     */
    @java.lang.Override
    public boolean hasRegistration() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
     * @return The registration.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration getRegistration() {
      return registration_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.getDefaultInstance() : registration_;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistrationOrBuilder getRegistrationOrBuilder() {
      return registration_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.getDefaultInstance() : registration_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * If empty, the name is entered on the device instead.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * If empty, the name is entered on the device instead.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int XPUB_TYPE_FIELD_NUMBER = 3;
    private int xpubType_ = 0;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest.XPubType xpub_type = 3;</code>
     * @return The enum numeric value on the wire for xpubType.
     */
    @java.lang.Override public int getXpubTypeValue() {
      return xpubType_;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest.XPubType xpub_type = 3;</code>
     * @return The xpubType.
     */
    @java.lang.Override public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.XPubType getXpubType() {
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.XPubType result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.XPubType.forNumber(xpubType_);
      return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.XPubType.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getRegistration());
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, name_);
      }
      if (xpubType_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.XPubType.AUTO_ELECTRUM.getNumber()) {
        output.writeEnum(3, xpubType_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getRegistration());
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, name_);
      }
      if (xpubType_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.XPubType.AUTO_ELECTRUM.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, xpubType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest) obj;

      if (hasRegistration() != other.hasRegistration()) return false;
      if (hasRegistration()) {
        if (!getRegistration()
            .equals(other.getRegistration())) return false;
      }
      if (!getName()
          .equals(other.getName())) return false;
      if (xpubType_ != other.xpubType_) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasRegistration()) {
        hash = (37 * hash) + REGISTRATION_FIELD_NUMBER;
        hash = (53 * hash) + getRegistration().hashCode();
      }
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + XPUB_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + xpubType_;
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRegisterScriptConfigRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRegisterScriptConfigRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getRegistrationFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        registration_ = null;
        if (registrationBuilder_ != null) {
          registrationBuilder_.dispose();
          registrationBuilder_ = null;
        }
        name_ = "";
        xpubType_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRegisterScriptConfigRequest_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.registration_ = registrationBuilder_ == null
              ? registration_
              : registrationBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.name_ = name_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.xpubType_ = xpubType_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.getDefaultInstance()) return this;
        if (other.hasRegistration()) {
          mergeRegistration(other.getRegistration());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.xpubType_ != 0) {
          setXpubTypeValue(other.getXpubTypeValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getRegistrationFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                xpubType_ = input.readEnum();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration registration_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistrationOrBuilder> registrationBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       * @return Whether the registration field is set.
       */
      public boolean hasRegistration() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       * @return The registration.
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration getRegistration() {
        if (registrationBuilder_ == null) {
          return registration_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.getDefaultInstance() : registration_;
        } else {
          return registrationBuilder_.getMessage();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       */
      public Builder setRegistration(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration value) {
        if (registrationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          registration_ = value;
        } else {
          registrationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       */
      public Builder setRegistration(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.Builder builderForValue) {
        if (registrationBuilder_ == null) {
          registration_ = builderForValue.build();
        } else {
          registrationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       */
      public Builder mergeRegistration(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration value) {
        if (registrationBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            registration_ != null &&
            registration_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.getDefaultInstance()) {
            getRegistrationBuilder().mergeFrom(value);
          } else {
            registration_ = value;
          }
        } else {
          registrationBuilder_.mergeFrom(value);
        }
        if (registration_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       */
      public Builder clearRegistration() {
        bitField0_ = (bitField0_ & ~0x00000001);
        registration_ = null;
        if (registrationBuilder_ != null) {
          registrationBuilder_.dispose();
          registrationBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.Builder getRegistrationBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRegistrationFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistrationOrBuilder getRegistrationOrBuilder() {
        if (registrationBuilder_ != null) {
          return registrationBuilder_.getMessageOrBuilder();
        } else {
          return registration_ == null ?
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.getDefaultInstance() : registration_;
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigRegistration registration = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistrationOrBuilder> 
          getRegistrationFieldBuilder() {
        if (registrationBuilder_ == null) {
          registrationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistration.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigRegistrationOrBuilder>(
                  getRegistration(),
                  getParentForChildren(),
                  isClean());
          registration_ = null;
        }
        return registrationBuilder_;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * If empty, the name is entered on the device instead.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * If empty, the name is entered on the device instead.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * If empty, the name is entered on the device instead.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If empty, the name is entered on the device instead.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If empty, the name is entered on the device instead.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private int xpubType_ = 0;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest.XPubType xpub_type = 3;</code>
       * @return The enum numeric value on the wire for xpubType.
       */
      @java.lang.Override public int getXpubTypeValue() {
        return xpubType_;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest.XPubType xpub_type = 3;</code>
       * @param value The enum numeric value on the wire for xpubType to set.
       * @return This builder for chaining.
       */
      public Builder setXpubTypeValue(int value) {
        xpubType_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest.XPubType xpub_type = 3;</code>
       * @return The xpubType.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.XPubType getXpubType() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.XPubType result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.XPubType.forNumber(xpubType_);
        return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.XPubType.UNRECOGNIZED : result;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest.XPubType xpub_type = 3;</code>
       * @param value The xpubType to set.
       * @return This builder for chaining.
       */
      public Builder setXpubType(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.XPubType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        xpubType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest.XPubType xpub_type = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearXpubType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        xpubType_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCRegisterScriptConfigRequest>
        PARSER = new com.google.protobuf.AbstractParser<BTCRegisterScriptConfigRequest>() {
      @java.lang.Override
      public BTCRegisterScriptConfigRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCRegisterScriptConfigRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCRegisterScriptConfigRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCPrevTxInitRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint32 version = 1;</code>
     * @return The version.
     */
    int getVersion();

    /**
     * <code>uint32 num_inputs = 2;</code>
     * @return The numInputs.
     */
    int getNumInputs();

    /**
     * <code>uint32 num_outputs = 3;</code>
     * @return The numOutputs.
     */
    int getNumOutputs();

    /**
     * <code>uint32 locktime = 4;</code>
     * @return The locktime.
     */
    int getLocktime();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest}
   */
  public static final class BTCPrevTxInitRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest)
      BTCPrevTxInitRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCPrevTxInitRequest.class.getName());
    }
    // Use BTCPrevTxInitRequest.newBuilder() to construct.
    private BTCPrevTxInitRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCPrevTxInitRequest() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInitRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInitRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.Builder.class);
    }

    public static final int VERSION_FIELD_NUMBER = 1;
    private int version_ = 0;
    /**
     * <code>uint32 version = 1;</code>
     * @return The version.
     */
    @java.lang.Override
    public int getVersion() {
      return version_;
    }

    public static final int NUM_INPUTS_FIELD_NUMBER = 2;
    private int numInputs_ = 0;
    /**
     * <code>uint32 num_inputs = 2;</code>
     * @return The numInputs.
     */
    @java.lang.Override
    public int getNumInputs() {
      return numInputs_;
    }

    public static final int NUM_OUTPUTS_FIELD_NUMBER = 3;
    private int numOutputs_ = 0;
    /**
     * <code>uint32 num_outputs = 3;</code>
     * @return The numOutputs.
     */
    @java.lang.Override
    public int getNumOutputs() {
      return numOutputs_;
    }

    public static final int LOCKTIME_FIELD_NUMBER = 4;
    private int locktime_ = 0;
    /**
     * <code>uint32 locktime = 4;</code>
     * @return The locktime.
     */
    @java.lang.Override
    public int getLocktime() {
      return locktime_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (version_ != 0) {
        output.writeUInt32(1, version_);
      }
      if (numInputs_ != 0) {
        output.writeUInt32(2, numInputs_);
      }
      if (numOutputs_ != 0) {
        output.writeUInt32(3, numOutputs_);
      }
      if (locktime_ != 0) {
        output.writeUInt32(4, locktime_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (version_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, version_);
      }
      if (numInputs_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, numInputs_);
      }
      if (numOutputs_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, numOutputs_);
      }
      if (locktime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, locktime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest) obj;

      if (getVersion()
          != other.getVersion()) return false;
      if (getNumInputs()
          != other.getNumInputs()) return false;
      if (getNumOutputs()
          != other.getNumOutputs()) return false;
      if (getLocktime()
          != other.getLocktime()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getVersion();
      hash = (37 * hash) + NUM_INPUTS_FIELD_NUMBER;
      hash = (53 * hash) + getNumInputs();
      hash = (37 * hash) + NUM_OUTPUTS_FIELD_NUMBER;
      hash = (53 * hash) + getNumOutputs();
      hash = (37 * hash) + LOCKTIME_FIELD_NUMBER;
      hash = (53 * hash) + getLocktime();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInitRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInitRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        version_ = 0;
        numInputs_ = 0;
        numOutputs_ = 0;
        locktime_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInitRequest_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.version_ = version_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.numInputs_ = numInputs_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.numOutputs_ = numOutputs_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.locktime_ = locktime_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.getDefaultInstance()) return this;
        if (other.getVersion() != 0) {
          setVersion(other.getVersion());
        }
        if (other.getNumInputs() != 0) {
          setNumInputs(other.getNumInputs());
        }
        if (other.getNumOutputs() != 0) {
          setNumOutputs(other.getNumOutputs());
        }
        if (other.getLocktime() != 0) {
          setLocktime(other.getLocktime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                version_ = input.readUInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                numInputs_ = input.readUInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                numOutputs_ = input.readUInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                locktime_ = input.readUInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int version_ ;
      /**
       * <code>uint32 version = 1;</code>
       * @return The version.
       */
      @java.lang.Override
      public int getVersion() {
        return version_;
      }
      /**
       * <code>uint32 version = 1;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(int value) {

        version_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 version = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = 0;
        onChanged();
        return this;
      }

      private int numInputs_ ;
      /**
       * <code>uint32 num_inputs = 2;</code>
       * @return The numInputs.
       */
      @java.lang.Override
      public int getNumInputs() {
        return numInputs_;
      }
      /**
       * <code>uint32 num_inputs = 2;</code>
       * @param value The numInputs to set.
       * @return This builder for chaining.
       */
      public Builder setNumInputs(int value) {

        numInputs_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 num_inputs = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearNumInputs() {
        bitField0_ = (bitField0_ & ~0x00000002);
        numInputs_ = 0;
        onChanged();
        return this;
      }

      private int numOutputs_ ;
      /**
       * <code>uint32 num_outputs = 3;</code>
       * @return The numOutputs.
       */
      @java.lang.Override
      public int getNumOutputs() {
        return numOutputs_;
      }
      /**
       * <code>uint32 num_outputs = 3;</code>
       * @param value The numOutputs to set.
       * @return This builder for chaining.
       */
      public Builder setNumOutputs(int value) {

        numOutputs_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 num_outputs = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearNumOutputs() {
        bitField0_ = (bitField0_ & ~0x00000004);
        numOutputs_ = 0;
        onChanged();
        return this;
      }

      private int locktime_ ;
      /**
       * <code>uint32 locktime = 4;</code>
       * @return The locktime.
       */
      @java.lang.Override
      public int getLocktime() {
        return locktime_;
      }
      /**
       * <code>uint32 locktime = 4;</code>
       * @param value The locktime to set.
       * @return This builder for chaining.
       */
      public Builder setLocktime(int value) {

        locktime_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 locktime = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearLocktime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        locktime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCPrevTxInitRequest>
        PARSER = new com.google.protobuf.AbstractParser<BTCPrevTxInitRequest>() {
      @java.lang.Override
      public BTCPrevTxInitRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCPrevTxInitRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCPrevTxInitRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCPrevTxInputRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bytes prev_out_hash = 1;</code>
     * @return The prevOutHash.
     */
    com.google.protobuf.ByteString getPrevOutHash();

    /**
     * <code>uint32 prev_out_index = 2;</code>
     * @return The prevOutIndex.
     */
    int getPrevOutIndex();

    /**
     * <code>bytes signature_script = 3;</code>
     * @return The signatureScript.
     */
    com.google.protobuf.ByteString getSignatureScript();

    /**
     * <code>uint32 sequence = 4;</code>
     * @return The sequence.
     */
    int getSequence();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest}
   */
  public static final class BTCPrevTxInputRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest)
      BTCPrevTxInputRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCPrevTxInputRequest.class.getName());
    }
    // Use BTCPrevTxInputRequest.newBuilder() to construct.
    private BTCPrevTxInputRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCPrevTxInputRequest() {
      prevOutHash_ = com.google.protobuf.ByteString.EMPTY;
      signatureScript_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInputRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInputRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.Builder.class);
    }

    public static final int PREV_OUT_HASH_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString prevOutHash_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes prev_out_hash = 1;</code>
     * @return The prevOutHash.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPrevOutHash() {
      return prevOutHash_;
    }

    public static final int PREV_OUT_INDEX_FIELD_NUMBER = 2;
    private int prevOutIndex_ = 0;
    /**
     * <code>uint32 prev_out_index = 2;</code>
     * @return The prevOutIndex.
     */
    @java.lang.Override
    public int getPrevOutIndex() {
      return prevOutIndex_;
    }

    public static final int SIGNATURE_SCRIPT_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString signatureScript_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes signature_script = 3;</code>
     * @return The signatureScript.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSignatureScript() {
      return signatureScript_;
    }

    public static final int SEQUENCE_FIELD_NUMBER = 4;
    private int sequence_ = 0;
    /**
     * <code>uint32 sequence = 4;</code>
     * @return The sequence.
     */
    @java.lang.Override
    public int getSequence() {
      return sequence_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!prevOutHash_.isEmpty()) {
        output.writeBytes(1, prevOutHash_);
      }
      if (prevOutIndex_ != 0) {
        output.writeUInt32(2, prevOutIndex_);
      }
      if (!signatureScript_.isEmpty()) {
        output.writeBytes(3, signatureScript_);
      }
      if (sequence_ != 0) {
        output.writeUInt32(4, sequence_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!prevOutHash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, prevOutHash_);
      }
      if (prevOutIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, prevOutIndex_);
      }
      if (!signatureScript_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, signatureScript_);
      }
      if (sequence_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, sequence_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest) obj;

      if (!getPrevOutHash()
          .equals(other.getPrevOutHash())) return false;
      if (getPrevOutIndex()
          != other.getPrevOutIndex()) return false;
      if (!getSignatureScript()
          .equals(other.getSignatureScript())) return false;
      if (getSequence()
          != other.getSequence()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PREV_OUT_HASH_FIELD_NUMBER;
      hash = (53 * hash) + getPrevOutHash().hashCode();
      hash = (37 * hash) + PREV_OUT_INDEX_FIELD_NUMBER;
      hash = (53 * hash) + getPrevOutIndex();
      hash = (37 * hash) + SIGNATURE_SCRIPT_FIELD_NUMBER;
      hash = (53 * hash) + getSignatureScript().hashCode();
      hash = (37 * hash) + SEQUENCE_FIELD_NUMBER;
      hash = (53 * hash) + getSequence();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInputRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInputRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        prevOutHash_ = com.google.protobuf.ByteString.EMPTY;
        prevOutIndex_ = 0;
        signatureScript_ = com.google.protobuf.ByteString.EMPTY;
        sequence_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInputRequest_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.prevOutHash_ = prevOutHash_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.prevOutIndex_ = prevOutIndex_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.signatureScript_ = signatureScript_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.sequence_ = sequence_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.getDefaultInstance()) return this;
        if (other.getPrevOutHash() != com.google.protobuf.ByteString.EMPTY) {
          setPrevOutHash(other.getPrevOutHash());
        }
        if (other.getPrevOutIndex() != 0) {
          setPrevOutIndex(other.getPrevOutIndex());
        }
        if (other.getSignatureScript() != com.google.protobuf.ByteString.EMPTY) {
          setSignatureScript(other.getSignatureScript());
        }
        if (other.getSequence() != 0) {
          setSequence(other.getSequence());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                prevOutHash_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                prevOutIndex_ = input.readUInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                signatureScript_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 32: {
                sequence_ = input.readUInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString prevOutHash_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes prev_out_hash = 1;</code>
       * @return The prevOutHash.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPrevOutHash() {
        return prevOutHash_;
      }
      /**
       * <code>bytes prev_out_hash = 1;</code>
       * @param value The prevOutHash to set.
       * @return This builder for chaining.
       */
      public Builder setPrevOutHash(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        prevOutHash_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>bytes prev_out_hash = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrevOutHash() {
        bitField0_ = (bitField0_ & ~0x00000001);
        prevOutHash_ = getDefaultInstance().getPrevOutHash();
        onChanged();
        return this;
      }

      private int prevOutIndex_ ;
      /**
       * <code>uint32 prev_out_index = 2;</code>
       * @return The prevOutIndex.
       */
      @java.lang.Override
      public int getPrevOutIndex() {
        return prevOutIndex_;
      }
      /**
       * <code>uint32 prev_out_index = 2;</code>
       * @param value The prevOutIndex to set.
       * @return This builder for chaining.
       */
      public Builder setPrevOutIndex(int value) {

        prevOutIndex_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 prev_out_index = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrevOutIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        prevOutIndex_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString signatureScript_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes signature_script = 3;</code>
       * @return The signatureScript.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSignatureScript() {
        return signatureScript_;
      }
      /**
       * <code>bytes signature_script = 3;</code>
       * @param value The signatureScript to set.
       * @return This builder for chaining.
       */
      public Builder setSignatureScript(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        signatureScript_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>bytes signature_script = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSignatureScript() {
        bitField0_ = (bitField0_ & ~0x00000004);
        signatureScript_ = getDefaultInstance().getSignatureScript();
        onChanged();
        return this;
      }

      private int sequence_ ;
      /**
       * <code>uint32 sequence = 4;</code>
       * @return The sequence.
       */
      @java.lang.Override
      public int getSequence() {
        return sequence_;
      }
      /**
       * <code>uint32 sequence = 4;</code>
       * @param value The sequence to set.
       * @return This builder for chaining.
       */
      public Builder setSequence(int value) {

        sequence_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 sequence = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSequence() {
        bitField0_ = (bitField0_ & ~0x00000008);
        sequence_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCPrevTxInputRequest>
        PARSER = new com.google.protobuf.AbstractParser<BTCPrevTxInputRequest>() {
      @java.lang.Override
      public BTCPrevTxInputRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCPrevTxInputRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCPrevTxInputRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCPrevTxOutputRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint64 value = 1;</code>
     * @return The value.
     */
    long getValue();

    /**
     * <code>bytes pubkey_script = 2;</code>
     * @return The pubkeyScript.
     */
    com.google.protobuf.ByteString getPubkeyScript();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest}
   */
  public static final class BTCPrevTxOutputRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest)
      BTCPrevTxOutputRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCPrevTxOutputRequest.class.getName());
    }
    // Use BTCPrevTxOutputRequest.newBuilder() to construct.
    private BTCPrevTxOutputRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCPrevTxOutputRequest() {
      pubkeyScript_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxOutputRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxOutputRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.Builder.class);
    }

    public static final int VALUE_FIELD_NUMBER = 1;
    private long value_ = 0L;
    /**
     * <code>uint64 value = 1;</code>
     * @return The value.
     */
    @java.lang.Override
    public long getValue() {
      return value_;
    }

    public static final int PUBKEY_SCRIPT_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString pubkeyScript_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes pubkey_script = 2;</code>
     * @return The pubkeyScript.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPubkeyScript() {
      return pubkeyScript_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (value_ != 0L) {
        output.writeUInt64(1, value_);
      }
      if (!pubkeyScript_.isEmpty()) {
        output.writeBytes(2, pubkeyScript_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (value_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, value_);
      }
      if (!pubkeyScript_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, pubkeyScript_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest) obj;

      if (getValue()
          != other.getValue()) return false;
      if (!getPubkeyScript()
          .equals(other.getPubkeyScript())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getValue());
      hash = (37 * hash) + PUBKEY_SCRIPT_FIELD_NUMBER;
      hash = (53 * hash) + getPubkeyScript().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxOutputRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxOutputRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        value_ = 0L;
        pubkeyScript_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxOutputRequest_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.value_ = value_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.pubkeyScript_ = pubkeyScript_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.getDefaultInstance()) return this;
        if (other.getValue() != 0L) {
          setValue(other.getValue());
        }
        if (other.getPubkeyScript() != com.google.protobuf.ByteString.EMPTY) {
          setPubkeyScript(other.getPubkeyScript());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                value_ = input.readUInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                pubkeyScript_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long value_ ;
      /**
       * <code>uint64 value = 1;</code>
       * @return The value.
       */
      @java.lang.Override
      public long getValue() {
        return value_;
      }
      /**
       * <code>uint64 value = 1;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(long value) {

        value_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 value = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString pubkeyScript_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes pubkey_script = 2;</code>
       * @return The pubkeyScript.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPubkeyScript() {
        return pubkeyScript_;
      }
      /**
       * <code>bytes pubkey_script = 2;</code>
       * @param value The pubkeyScript to set.
       * @return This builder for chaining.
       */
      public Builder setPubkeyScript(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        pubkeyScript_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>bytes pubkey_script = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPubkeyScript() {
        bitField0_ = (bitField0_ & ~0x00000002);
        pubkeyScript_ = getDefaultInstance().getPubkeyScript();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCPrevTxOutputRequest>
        PARSER = new com.google.protobuf.AbstractParser<BTCPrevTxOutputRequest>() {
      @java.lang.Override
      public BTCPrevTxOutputRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCPrevTxOutputRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCPrevTxOutputRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCPaymentRequestRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string recipient_name = 1;</code>
     * @return The recipientName.
     */
    java.lang.String getRecipientName();
    /**
     * <code>string recipient_name = 1;</code>
     * @return The bytes for recipientName.
     */
    com.google.protobuf.ByteString
        getRecipientNameBytes();

    /**
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
     */
    java.util.List<com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo> 
        getMemosList();
    /**
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo getMemos(int index);
    /**
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
     */
    int getMemosCount();
    /**
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
     */
    java.util.List<? extends com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.MemoOrBuilder> 
        getMemosOrBuilderList();
    /**
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.MemoOrBuilder getMemosOrBuilder(
        int index);

    /**
     * <code>bytes nonce = 3;</code>
     * @return The nonce.
     */
    com.google.protobuf.ByteString getNonce();

    /**
     * <code>uint64 total_amount = 4;</code>
     * @return The totalAmount.
     */
    long getTotalAmount();

    /**
     * <code>bytes signature = 5;</code>
     * @return The signature.
     */
    com.google.protobuf.ByteString getSignature();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest}
   */
  public static final class BTCPaymentRequestRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest)
      BTCPaymentRequestRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCPaymentRequestRequest.class.getName());
    }
    // Use BTCPaymentRequestRequest.newBuilder() to construct.
    private BTCPaymentRequestRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCPaymentRequestRequest() {
      recipientName_ = "";
      memos_ = java.util.Collections.emptyList();
      nonce_ = com.google.protobuf.ByteString.EMPTY;
      signature_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Builder.class);
    }

    public interface MemoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo text_memo = 1;</code>
       * @return Whether the textMemo field is set.
       */
      boolean hasTextMemo();
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo text_memo = 1;</code>
       * @return The textMemo.
       */
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo getTextMemo();
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo text_memo = 1;</code>
       */
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemoOrBuilder getTextMemoOrBuilder();

      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.MemoCase getMemoCase();
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo}
     */
    public static final class Memo extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo)
        MemoOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 3,
          /* suffix= */ "",
          Memo.class.getName());
      }
      // Use Memo.newBuilder() to construct.
      private Memo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private Memo() {
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.Builder.class);
      }

      public interface TextMemoOrBuilder extends
          // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <code>string note = 1;</code>
         * @return The note.
         */
        java.lang.String getNote();
        /**
         * <code>string note = 1;</code>
         * @return The bytes for note.
         */
        com.google.protobuf.ByteString
            getNoteBytes();
      }
      /**
       * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo}
       */
      public static final class TextMemo extends
          com.google.protobuf.GeneratedMessage implements
          // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo)
          TextMemoOrBuilder {
      private static final long serialVersionUID = 0L;
        static {
          com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
            com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
            /* major= */ 4,
            /* minor= */ 28,
            /* patch= */ 3,
            /* suffix= */ "",
            TextMemo.class.getName());
        }
        // Use TextMemo.newBuilder() to construct.
        private TextMemo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
          super(builder);
        }
        private TextMemo() {
          note_ = "";
        }

        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_TextMemo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_TextMemo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.Builder.class);
        }

        public static final int NOTE_FIELD_NUMBER = 1;
        @SuppressWarnings("serial")
        private volatile java.lang.Object note_ = "";
        /**
         * <code>string note = 1;</code>
         * @return The note.
         */
        @java.lang.Override
        public java.lang.String getNote() {
          java.lang.Object ref = note_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            note_ = s;
            return s;
          }
        }
        /**
         * <code>string note = 1;</code>
         * @return The bytes for note.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getNoteBytes() {
          java.lang.Object ref = note_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            note_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (!com.google.protobuf.GeneratedMessage.isStringEmpty(note_)) {
            com.google.protobuf.GeneratedMessage.writeString(output, 1, note_);
          }
          getUnknownFields().writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (!com.google.protobuf.GeneratedMessage.isStringEmpty(note_)) {
            size += com.google.protobuf.GeneratedMessage.computeStringSize(1, note_);
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo)) {
            return super.equals(obj);
          }
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo) obj;

          if (!getNote()
              .equals(other.getNote())) return false;
          if (!getUnknownFields().equals(other.getUnknownFields())) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          hash = (37 * hash) + NOTE_FIELD_NUMBER;
          hash = (53 * hash) + getNote().hashCode();
          hash = (29 * hash) + getUnknownFields().hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input);
        }
        public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseDelimitedWithIOException(PARSER, input);
        }

        public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input);
        }
        public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessage.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo)
            com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemoOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_TextMemo_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_TextMemo_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.Builder.class);
          }

          // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.newBuilder()
          private Builder() {

          }

          private Builder(
              com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            super(parent);

          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            bitField0_ = 0;
            note_ = "";
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_TextMemo_descriptor;
          }

          @java.lang.Override
          public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo getDefaultInstanceForType() {
            return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.getDefaultInstance();
          }

          @java.lang.Override
          public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo build() {
            com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo buildPartial() {
            com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo(this);
            if (bitField0_ != 0) { buildPartial0(result); }
            onBuilt();
            return result;
          }

          private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo result) {
            int from_bitField0_ = bitField0_;
            if (((from_bitField0_ & 0x00000001) != 0)) {
              result.note_ = note_;
            }
          }

          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo) {
              return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo other) {
            if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.getDefaultInstance()) return this;
            if (!other.getNote().isEmpty()) {
              note_ = other.note_;
              bitField0_ |= 0x00000001;
              onChanged();
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 10: {
                    note_ = input.readStringRequireUtf8();
                    bitField0_ |= 0x00000001;
                    break;
                  } // case 10
                  default: {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
                } // switch (tag)
              } // while (!done)
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.unwrapIOException();
            } finally {
              onChanged();
            } // finally
            return this;
          }
          private int bitField0_;

          private java.lang.Object note_ = "";
          /**
           * <code>string note = 1;</code>
           * @return The note.
           */
          public java.lang.String getNote() {
            java.lang.Object ref = note_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              note_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <code>string note = 1;</code>
           * @return The bytes for note.
           */
          public com.google.protobuf.ByteString
              getNoteBytes() {
            java.lang.Object ref = note_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              note_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <code>string note = 1;</code>
           * @param value The note to set.
           * @return This builder for chaining.
           */
          public Builder setNote(
              java.lang.String value) {
            if (value == null) { throw new NullPointerException(); }
            note_ = value;
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }
          /**
           * <code>string note = 1;</code>
           * @return This builder for chaining.
           */
          public Builder clearNote() {
            note_ = getDefaultInstance().getNote();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
            return this;
          }
          /**
           * <code>string note = 1;</code>
           * @param value The bytes for note to set.
           * @return This builder for chaining.
           */
          public Builder setNoteBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            checkByteStringIsUtf8(value);
            note_ = value;
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }

          // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo)
        }

        // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo)
        private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo();
        }

        public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<TextMemo>
            PARSER = new com.google.protobuf.AbstractParser<TextMemo>() {
          @java.lang.Override
          public TextMemo parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

        public static com.google.protobuf.Parser<TextMemo> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<TextMemo> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      private int memoCase_ = 0;
      @SuppressWarnings("serial")
      private java.lang.Object memo_;
      public enum MemoCase
          implements com.google.protobuf.Internal.EnumLite,
              com.google.protobuf.AbstractMessage.InternalOneOfEnum {
        TEXT_MEMO(1),
        MEMO_NOT_SET(0);
        private final int value;
        private MemoCase(int value) {
          this.value = value;
        }
        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static MemoCase valueOf(int value) {
          return forNumber(value);
        }

        public static MemoCase forNumber(int value) {
          switch (value) {
            case 1: return TEXT_MEMO;
            case 0: return MEMO_NOT_SET;
            default: return null;
          }
        }
        public int getNumber() {
          return this.value;
        }
      };

      public MemoCase
      getMemoCase() {
        return MemoCase.forNumber(
            memoCase_);
      }

      public static final int TEXT_MEMO_FIELD_NUMBER = 1;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo text_memo = 1;</code>
       * @return Whether the textMemo field is set.
       */
      @java.lang.Override
      public boolean hasTextMemo() {
        return memoCase_ == 1;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo text_memo = 1;</code>
       * @return The textMemo.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo getTextMemo() {
        if (memoCase_ == 1) {
           return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo) memo_;
        }
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.getDefaultInstance();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo text_memo = 1;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemoOrBuilder getTextMemoOrBuilder() {
        if (memoCase_ == 1) {
           return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo) memo_;
        }
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.getDefaultInstance();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (memoCase_ == 1) {
          output.writeMessage(1, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo) memo_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (memoCase_ == 1) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo) memo_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo)) {
          return super.equals(obj);
        }
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo) obj;

        if (!getMemoCase().equals(other.getMemoCase())) return false;
        switch (memoCase_) {
          case 1:
            if (!getTextMemo()
                .equals(other.getTextMemo())) return false;
            break;
          case 0:
          default:
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        switch (memoCase_) {
          case 1:
            hash = (37 * hash) + TEXT_MEMO_FIELD_NUMBER;
            hash = (53 * hash) + getTextMemo().hashCode();
            break;
          case 0:
          default:
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo)
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.MemoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.Builder.class);
        }

        // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          if (textMemoBuilder_ != null) {
            textMemoBuilder_.clear();
          }
          memoCase_ = 0;
          memo_ = null;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_descriptor;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo getDefaultInstanceForType() {
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.getDefaultInstance();
        }

        @java.lang.Override
        public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo build() {
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo buildPartial() {
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          buildPartialOneofs(result);
          onBuilt();
          return result;
        }

        private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo result) {
          int from_bitField0_ = bitField0_;
        }

        private void buildPartialOneofs(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo result) {
          result.memoCase_ = memoCase_;
          result.memo_ = this.memo_;
          if (memoCase_ == 1 &&
              textMemoBuilder_ != null) {
            result.memo_ = textMemoBuilder_.build();
          }
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo) {
            return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo other) {
          if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.getDefaultInstance()) return this;
          switch (other.getMemoCase()) {
            case TEXT_MEMO: {
              mergeTextMemo(other.getTextMemo());
              break;
            }
            case MEMO_NOT_SET: {
              break;
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getTextMemoFieldBuilder().getBuilder(),
                      extensionRegistry);
                  memoCase_ = 1;
                  break;
                } // case 10
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int memoCase_ = 0;
        private java.lang.Object memo_;
        public MemoCase
            getMemoCase() {
          return MemoCase.forNumber(
              memoCase_);
        }

        public Builder clearMemo() {
          memoCase_ = 0;
          memo_ = null;
          onChanged();
          return this;
        }

        private int bitField0_;

        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemoOrBuilder> textMemoBuilder_;
        /**
         * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo text_memo = 1;</code>
         * @return Whether the textMemo field is set.
         */
        @java.lang.Override
        public boolean hasTextMemo() {
          return memoCase_ == 1;
        }
        /**
         * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo text_memo = 1;</code>
         * @return The textMemo.
         */
        @java.lang.Override
        public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo getTextMemo() {
          if (textMemoBuilder_ == null) {
            if (memoCase_ == 1) {
              return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo) memo_;
            }
            return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.getDefaultInstance();
          } else {
            if (memoCase_ == 1) {
              return textMemoBuilder_.getMessage();
            }
            return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.getDefaultInstance();
          }
        }
        /**
         * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo text_memo = 1;</code>
         */
        public Builder setTextMemo(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo value) {
          if (textMemoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            memo_ = value;
            onChanged();
          } else {
            textMemoBuilder_.setMessage(value);
          }
          memoCase_ = 1;
          return this;
        }
        /**
         * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo text_memo = 1;</code>
         */
        public Builder setTextMemo(
            com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.Builder builderForValue) {
          if (textMemoBuilder_ == null) {
            memo_ = builderForValue.build();
            onChanged();
          } else {
            textMemoBuilder_.setMessage(builderForValue.build());
          }
          memoCase_ = 1;
          return this;
        }
        /**
         * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo text_memo = 1;</code>
         */
        public Builder mergeTextMemo(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo value) {
          if (textMemoBuilder_ == null) {
            if (memoCase_ == 1 &&
                memo_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.getDefaultInstance()) {
              memo_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.newBuilder((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo) memo_)
                  .mergeFrom(value).buildPartial();
            } else {
              memo_ = value;
            }
            onChanged();
          } else {
            if (memoCase_ == 1) {
              textMemoBuilder_.mergeFrom(value);
            } else {
              textMemoBuilder_.setMessage(value);
            }
          }
          memoCase_ = 1;
          return this;
        }
        /**
         * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo text_memo = 1;</code>
         */
        public Builder clearTextMemo() {
          if (textMemoBuilder_ == null) {
            if (memoCase_ == 1) {
              memoCase_ = 0;
              memo_ = null;
              onChanged();
            }
          } else {
            if (memoCase_ == 1) {
              memoCase_ = 0;
              memo_ = null;
            }
            textMemoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo text_memo = 1;</code>
         */
        public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.Builder getTextMemoBuilder() {
          return getTextMemoFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo text_memo = 1;</code>
         */
        @java.lang.Override
        public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemoOrBuilder getTextMemoOrBuilder() {
          if ((memoCase_ == 1) && (textMemoBuilder_ != null)) {
            return textMemoBuilder_.getMessageOrBuilder();
          } else {
            if (memoCase_ == 1) {
              return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo) memo_;
            }
            return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.getDefaultInstance();
          }
        }
        /**
         * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo.TextMemo text_memo = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemoOrBuilder> 
            getTextMemoFieldBuilder() {
          if (textMemoBuilder_ == null) {
            if (!(memoCase_ == 1)) {
              memo_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.getDefaultInstance();
            }
            textMemoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemoOrBuilder>(
                    (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.TextMemo) memo_,
                    getParentForChildren(),
                    isClean());
            memo_ = null;
          }
          memoCase_ = 1;
          onChanged();
          return textMemoBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo)
      }

      // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo)
      private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo();
      }

      public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Memo>
          PARSER = new com.google.protobuf.AbstractParser<Memo>() {
        @java.lang.Override
        public Memo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Memo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Memo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int RECIPIENT_NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object recipientName_ = "";
    /**
     * <code>string recipient_name = 1;</code>
     * @return The recipientName.
     */
    @java.lang.Override
    public java.lang.String getRecipientName() {
      java.lang.Object ref = recipientName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        recipientName_ = s;
        return s;
      }
    }
    /**
     * <code>string recipient_name = 1;</code>
     * @return The bytes for recipientName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRecipientNameBytes() {
      java.lang.Object ref = recipientName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        recipientName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MEMOS_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo> memos_;
    /**
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
     */
    @java.lang.Override
    public java.util.List<com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo> getMemosList() {
      return memos_;
    }
    /**
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.MemoOrBuilder> 
        getMemosOrBuilderList() {
      return memos_;
    }
    /**
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
     */
    @java.lang.Override
    public int getMemosCount() {
      return memos_.size();
    }
    /**
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo getMemos(int index) {
      return memos_.get(index);
    }
    /**
     * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.MemoOrBuilder getMemosOrBuilder(
        int index) {
      return memos_.get(index);
    }

    public static final int NONCE_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString nonce_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes nonce = 3;</code>
     * @return The nonce.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getNonce() {
      return nonce_;
    }

    public static final int TOTAL_AMOUNT_FIELD_NUMBER = 4;
    private long totalAmount_ = 0L;
    /**
     * <code>uint64 total_amount = 4;</code>
     * @return The totalAmount.
     */
    @java.lang.Override
    public long getTotalAmount() {
      return totalAmount_;
    }

    public static final int SIGNATURE_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes signature = 5;</code>
     * @return The signature.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSignature() {
      return signature_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(recipientName_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, recipientName_);
      }
      for (int i = 0; i < memos_.size(); i++) {
        output.writeMessage(2, memos_.get(i));
      }
      if (!nonce_.isEmpty()) {
        output.writeBytes(3, nonce_);
      }
      if (totalAmount_ != 0L) {
        output.writeUInt64(4, totalAmount_);
      }
      if (!signature_.isEmpty()) {
        output.writeBytes(5, signature_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(recipientName_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, recipientName_);
      }
      for (int i = 0; i < memos_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, memos_.get(i));
      }
      if (!nonce_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, nonce_);
      }
      if (totalAmount_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, totalAmount_);
      }
      if (!signature_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, signature_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest) obj;

      if (!getRecipientName()
          .equals(other.getRecipientName())) return false;
      if (!getMemosList()
          .equals(other.getMemosList())) return false;
      if (!getNonce()
          .equals(other.getNonce())) return false;
      if (getTotalAmount()
          != other.getTotalAmount()) return false;
      if (!getSignature()
          .equals(other.getSignature())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + RECIPIENT_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getRecipientName().hashCode();
      if (getMemosCount() > 0) {
        hash = (37 * hash) + MEMOS_FIELD_NUMBER;
        hash = (53 * hash) + getMemosList().hashCode();
      }
      hash = (37 * hash) + NONCE_FIELD_NUMBER;
      hash = (53 * hash) + getNonce().hashCode();
      hash = (37 * hash) + TOTAL_AMOUNT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTotalAmount());
      hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
      hash = (53 * hash) + getSignature().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        recipientName_ = "";
        if (memosBuilder_ == null) {
          memos_ = java.util.Collections.emptyList();
        } else {
          memos_ = null;
          memosBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        nonce_ = com.google.protobuf.ByteString.EMPTY;
        totalAmount_ = 0L;
        signature_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest result) {
        if (memosBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            memos_ = java.util.Collections.unmodifiableList(memos_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.memos_ = memos_;
        } else {
          result.memos_ = memosBuilder_.build();
        }
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.recipientName_ = recipientName_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.nonce_ = nonce_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.totalAmount_ = totalAmount_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.signature_ = signature_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.getDefaultInstance()) return this;
        if (!other.getRecipientName().isEmpty()) {
          recipientName_ = other.recipientName_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (memosBuilder_ == null) {
          if (!other.memos_.isEmpty()) {
            if (memos_.isEmpty()) {
              memos_ = other.memos_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureMemosIsMutable();
              memos_.addAll(other.memos_);
            }
            onChanged();
          }
        } else {
          if (!other.memos_.isEmpty()) {
            if (memosBuilder_.isEmpty()) {
              memosBuilder_.dispose();
              memosBuilder_ = null;
              memos_ = other.memos_;
              bitField0_ = (bitField0_ & ~0x00000002);
              memosBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMemosFieldBuilder() : null;
            } else {
              memosBuilder_.addAllMessages(other.memos_);
            }
          }
        }
        if (other.getNonce() != com.google.protobuf.ByteString.EMPTY) {
          setNonce(other.getNonce());
        }
        if (other.getTotalAmount() != 0L) {
          setTotalAmount(other.getTotalAmount());
        }
        if (other.getSignature() != com.google.protobuf.ByteString.EMPTY) {
          setSignature(other.getSignature());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                recipientName_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo m =
                    input.readMessage(
                        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.parser(),
                        extensionRegistry);
                if (memosBuilder_ == null) {
                  ensureMemosIsMutable();
                  memos_.add(m);
                } else {
                  memosBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 26: {
                nonce_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 32: {
                totalAmount_ = input.readUInt64();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 42: {
                signature_ = input.readBytes();
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object recipientName_ = "";
      /**
       * <code>string recipient_name = 1;</code>
       * @return The recipientName.
       */
      public java.lang.String getRecipientName() {
        java.lang.Object ref = recipientName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          recipientName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string recipient_name = 1;</code>
       * @return The bytes for recipientName.
       */
      public com.google.protobuf.ByteString
          getRecipientNameBytes() {
        java.lang.Object ref = recipientName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          recipientName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string recipient_name = 1;</code>
       * @param value The recipientName to set.
       * @return This builder for chaining.
       */
      public Builder setRecipientName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        recipientName_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>string recipient_name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearRecipientName() {
        recipientName_ = getDefaultInstance().getRecipientName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>string recipient_name = 1;</code>
       * @param value The bytes for recipientName to set.
       * @return This builder for chaining.
       */
      public Builder setRecipientNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        recipientName_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.util.List<com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo> memos_ =
        java.util.Collections.emptyList();
      private void ensureMemosIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          memos_ = new java.util.ArrayList<com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo>(memos_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.MemoOrBuilder> memosBuilder_;

      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public java.util.List<com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo> getMemosList() {
        if (memosBuilder_ == null) {
          return java.util.Collections.unmodifiableList(memos_);
        } else {
          return memosBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public int getMemosCount() {
        if (memosBuilder_ == null) {
          return memos_.size();
        } else {
          return memosBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo getMemos(int index) {
        if (memosBuilder_ == null) {
          return memos_.get(index);
        } else {
          return memosBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public Builder setMemos(
          int index, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo value) {
        if (memosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMemosIsMutable();
          memos_.set(index, value);
          onChanged();
        } else {
          memosBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public Builder setMemos(
          int index, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.Builder builderForValue) {
        if (memosBuilder_ == null) {
          ensureMemosIsMutable();
          memos_.set(index, builderForValue.build());
          onChanged();
        } else {
          memosBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public Builder addMemos(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo value) {
        if (memosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMemosIsMutable();
          memos_.add(value);
          onChanged();
        } else {
          memosBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public Builder addMemos(
          int index, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo value) {
        if (memosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMemosIsMutable();
          memos_.add(index, value);
          onChanged();
        } else {
          memosBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public Builder addMemos(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.Builder builderForValue) {
        if (memosBuilder_ == null) {
          ensureMemosIsMutable();
          memos_.add(builderForValue.build());
          onChanged();
        } else {
          memosBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public Builder addMemos(
          int index, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.Builder builderForValue) {
        if (memosBuilder_ == null) {
          ensureMemosIsMutable();
          memos_.add(index, builderForValue.build());
          onChanged();
        } else {
          memosBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public Builder addAllMemos(
          java.lang.Iterable<? extends com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo> values) {
        if (memosBuilder_ == null) {
          ensureMemosIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, memos_);
          onChanged();
        } else {
          memosBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public Builder clearMemos() {
        if (memosBuilder_ == null) {
          memos_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          memosBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public Builder removeMemos(int index) {
        if (memosBuilder_ == null) {
          ensureMemosIsMutable();
          memos_.remove(index);
          onChanged();
        } else {
          memosBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.Builder getMemosBuilder(
          int index) {
        return getMemosFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.MemoOrBuilder getMemosOrBuilder(
          int index) {
        if (memosBuilder_ == null) {
          return memos_.get(index);  } else {
          return memosBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public java.util.List<? extends com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.MemoOrBuilder> 
           getMemosOrBuilderList() {
        if (memosBuilder_ != null) {
          return memosBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(memos_);
        }
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.Builder addMemosBuilder() {
        return getMemosFieldBuilder().addBuilder(
            com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.getDefaultInstance());
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.Builder addMemosBuilder(
          int index) {
        return getMemosFieldBuilder().addBuilder(
            index, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.getDefaultInstance());
      }
      /**
       * <code>repeated .com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest.Memo memos = 2;</code>
       */
      public java.util.List<com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.Builder> 
           getMemosBuilderList() {
        return getMemosFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.MemoOrBuilder> 
          getMemosFieldBuilder() {
        if (memosBuilder_ == null) {
          memosBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Memo.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.MemoOrBuilder>(
                  memos_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          memos_ = null;
        }
        return memosBuilder_;
      }

      private com.google.protobuf.ByteString nonce_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes nonce = 3;</code>
       * @return The nonce.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getNonce() {
        return nonce_;
      }
      /**
       * <code>bytes nonce = 3;</code>
       * @param value The nonce to set.
       * @return This builder for chaining.
       */
      public Builder setNonce(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        nonce_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>bytes nonce = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearNonce() {
        bitField0_ = (bitField0_ & ~0x00000004);
        nonce_ = getDefaultInstance().getNonce();
        onChanged();
        return this;
      }

      private long totalAmount_ ;
      /**
       * <code>uint64 total_amount = 4;</code>
       * @return The totalAmount.
       */
      @java.lang.Override
      public long getTotalAmount() {
        return totalAmount_;
      }
      /**
       * <code>uint64 total_amount = 4;</code>
       * @param value The totalAmount to set.
       * @return This builder for chaining.
       */
      public Builder setTotalAmount(long value) {

        totalAmount_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 total_amount = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearTotalAmount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        totalAmount_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes signature = 5;</code>
       * @return The signature.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSignature() {
        return signature_;
      }
      /**
       * <code>bytes signature = 5;</code>
       * @param value The signature to set.
       * @return This builder for chaining.
       */
      public Builder setSignature(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        signature_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>bytes signature = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearSignature() {
        bitField0_ = (bitField0_ & ~0x00000010);
        signature_ = getDefaultInstance().getSignature();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCPaymentRequestRequest>
        PARSER = new com.google.protobuf.AbstractParser<BTCPaymentRequestRequest>() {
      @java.lang.Override
      public BTCPaymentRequestRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCPaymentRequestRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCPaymentRequestRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCSignMessageRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
     * @return The enum numeric value on the wire for coin.
     */
    int getCoinValue();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
     * @return The coin.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin getCoin();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_config = 2;</code>
     * @return Whether the scriptConfig field is set.
     */
    boolean hasScriptConfig();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_config = 2;</code>
     * @return The scriptConfig.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath getScriptConfig();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_config = 2;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypathOrBuilder getScriptConfigOrBuilder();

    /**
     * <code>bytes msg = 3;</code>
     * @return The msg.
     */
    com.google.protobuf.ByteString getMsg();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 4;</code>
     * @return Whether the hostNonceCommitment field is set.
     */
    boolean hasHostNonceCommitment();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 4;</code>
     * @return The hostNonceCommitment.
     */
    com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment getHostNonceCommitment();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 4;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitmentOrBuilder getHostNonceCommitmentOrBuilder();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest}
   */
  public static final class BTCSignMessageRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest)
      BTCSignMessageRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCSignMessageRequest.class.getName());
    }
    // Use BTCSignMessageRequest.newBuilder() to construct.
    private BTCSignMessageRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCSignMessageRequest() {
      coin_ = 0;
      msg_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.Builder.class);
    }

    private int bitField0_;
    public static final int COIN_FIELD_NUMBER = 1;
    private int coin_ = 0;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
     * @return The enum numeric value on the wire for coin.
     */
    @java.lang.Override public int getCoinValue() {
      return coin_;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
     * @return The coin.
     */
    @java.lang.Override public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin getCoin() {
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.forNumber(coin_);
      return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.UNRECOGNIZED : result;
    }

    public static final int SCRIPT_CONFIG_FIELD_NUMBER = 2;
    private com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath scriptConfig_;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_config = 2;</code>
     * @return Whether the scriptConfig field is set.
     */
    @java.lang.Override
    public boolean hasScriptConfig() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_config = 2;</code>
     * @return The scriptConfig.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath getScriptConfig() {
      return scriptConfig_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.getDefaultInstance() : scriptConfig_;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_config = 2;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypathOrBuilder getScriptConfigOrBuilder() {
      return scriptConfig_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.getDefaultInstance() : scriptConfig_;
    }

    public static final int MSG_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString msg_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes msg = 3;</code>
     * @return The msg.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getMsg() {
      return msg_;
    }

    public static final int HOST_NONCE_COMMITMENT_FIELD_NUMBER = 4;
    private com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment hostNonceCommitment_;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 4;</code>
     * @return Whether the hostNonceCommitment field is set.
     */
    @java.lang.Override
    public boolean hasHostNonceCommitment() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 4;</code>
     * @return The hostNonceCommitment.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment getHostNonceCommitment() {
      return hostNonceCommitment_ == null ? com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.getDefaultInstance() : hostNonceCommitment_;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 4;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitmentOrBuilder getHostNonceCommitmentOrBuilder() {
      return hostNonceCommitment_ == null ? com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.getDefaultInstance() : hostNonceCommitment_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (coin_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.BTC.getNumber()) {
        output.writeEnum(1, coin_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(2, getScriptConfig());
      }
      if (!msg_.isEmpty()) {
        output.writeBytes(3, msg_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(4, getHostNonceCommitment());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (coin_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.BTC.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, coin_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getScriptConfig());
      }
      if (!msg_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, msg_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getHostNonceCommitment());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest) obj;

      if (coin_ != other.coin_) return false;
      if (hasScriptConfig() != other.hasScriptConfig()) return false;
      if (hasScriptConfig()) {
        if (!getScriptConfig()
            .equals(other.getScriptConfig())) return false;
      }
      if (!getMsg()
          .equals(other.getMsg())) return false;
      if (hasHostNonceCommitment() != other.hasHostNonceCommitment()) return false;
      if (hasHostNonceCommitment()) {
        if (!getHostNonceCommitment()
            .equals(other.getHostNonceCommitment())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + COIN_FIELD_NUMBER;
      hash = (53 * hash) + coin_;
      if (hasScriptConfig()) {
        hash = (37 * hash) + SCRIPT_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getScriptConfig().hashCode();
      }
      hash = (37 * hash) + MSG_FIELD_NUMBER;
      hash = (53 * hash) + getMsg().hashCode();
      if (hasHostNonceCommitment()) {
        hash = (37 * hash) + HOST_NONCE_COMMITMENT_FIELD_NUMBER;
        hash = (53 * hash) + getHostNonceCommitment().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getScriptConfigFieldBuilder();
          getHostNonceCommitmentFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        coin_ = 0;
        scriptConfig_ = null;
        if (scriptConfigBuilder_ != null) {
          scriptConfigBuilder_.dispose();
          scriptConfigBuilder_ = null;
        }
        msg_ = com.google.protobuf.ByteString.EMPTY;
        hostNonceCommitment_ = null;
        if (hostNonceCommitmentBuilder_ != null) {
          hostNonceCommitmentBuilder_.dispose();
          hostNonceCommitmentBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageRequest_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.coin_ = coin_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.scriptConfig_ = scriptConfigBuilder_ == null
              ? scriptConfig_
              : scriptConfigBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.msg_ = msg_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.hostNonceCommitment_ = hostNonceCommitmentBuilder_ == null
              ? hostNonceCommitment_
              : hostNonceCommitmentBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.getDefaultInstance()) return this;
        if (other.coin_ != 0) {
          setCoinValue(other.getCoinValue());
        }
        if (other.hasScriptConfig()) {
          mergeScriptConfig(other.getScriptConfig());
        }
        if (other.getMsg() != com.google.protobuf.ByteString.EMPTY) {
          setMsg(other.getMsg());
        }
        if (other.hasHostNonceCommitment()) {
          mergeHostNonceCommitment(other.getHostNonceCommitment());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                coin_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getScriptConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                msg_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getHostNonceCommitmentFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int coin_ = 0;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @return The enum numeric value on the wire for coin.
       */
      @java.lang.Override public int getCoinValue() {
        return coin_;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @param value The enum numeric value on the wire for coin to set.
       * @return This builder for chaining.
       */
      public Builder setCoinValue(int value) {
        coin_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @return The coin.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin getCoin() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin result = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.forNumber(coin_);
        return result == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin.UNRECOGNIZED : result;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @param value The coin to set.
       * @return This builder for chaining.
       */
      public Builder setCoin(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCCoin value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        coin_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCCoin coin = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCoin() {
        bitField0_ = (bitField0_ & ~0x00000001);
        coin_ = 0;
        onChanged();
        return this;
      }

      private com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath scriptConfig_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypathOrBuilder> scriptConfigBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_config = 2;</code>
       * @return Whether the scriptConfig field is set.
       */
      public boolean hasScriptConfig() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_config = 2;</code>
       * @return The scriptConfig.
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath getScriptConfig() {
        if (scriptConfigBuilder_ == null) {
          return scriptConfig_ == null ? com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.getDefaultInstance() : scriptConfig_;
        } else {
          return scriptConfigBuilder_.getMessage();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_config = 2;</code>
       */
      public Builder setScriptConfig(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath value) {
        if (scriptConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          scriptConfig_ = value;
        } else {
          scriptConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_config = 2;</code>
       */
      public Builder setScriptConfig(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.Builder builderForValue) {
        if (scriptConfigBuilder_ == null) {
          scriptConfig_ = builderForValue.build();
        } else {
          scriptConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_config = 2;</code>
       */
      public Builder mergeScriptConfig(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath value) {
        if (scriptConfigBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            scriptConfig_ != null &&
            scriptConfig_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.getDefaultInstance()) {
            getScriptConfigBuilder().mergeFrom(value);
          } else {
            scriptConfig_ = value;
          }
        } else {
          scriptConfigBuilder_.mergeFrom(value);
        }
        if (scriptConfig_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_config = 2;</code>
       */
      public Builder clearScriptConfig() {
        bitField0_ = (bitField0_ & ~0x00000002);
        scriptConfig_ = null;
        if (scriptConfigBuilder_ != null) {
          scriptConfigBuilder_.dispose();
          scriptConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_config = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.Builder getScriptConfigBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getScriptConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_config = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypathOrBuilder getScriptConfigOrBuilder() {
        if (scriptConfigBuilder_ != null) {
          return scriptConfigBuilder_.getMessageOrBuilder();
        } else {
          return scriptConfig_ == null ?
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.getDefaultInstance() : scriptConfig_;
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCScriptConfigWithKeypath script_config = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypathOrBuilder> 
          getScriptConfigFieldBuilder() {
        if (scriptConfigBuilder_ == null) {
          scriptConfigBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypath.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCScriptConfigWithKeypathOrBuilder>(
                  getScriptConfig(),
                  getParentForChildren(),
                  isClean());
          scriptConfig_ = null;
        }
        return scriptConfigBuilder_;
      }

      private com.google.protobuf.ByteString msg_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes msg = 3;</code>
       * @return The msg.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getMsg() {
        return msg_;
      }
      /**
       * <code>bytes msg = 3;</code>
       * @param value The msg to set.
       * @return This builder for chaining.
       */
      public Builder setMsg(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        msg_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>bytes msg = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMsg() {
        bitField0_ = (bitField0_ & ~0x00000004);
        msg_ = getDefaultInstance().getMsg();
        onChanged();
        return this;
      }

      private com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment hostNonceCommitment_;
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.Builder, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitmentOrBuilder> hostNonceCommitmentBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 4;</code>
       * @return Whether the hostNonceCommitment field is set.
       */
      public boolean hasHostNonceCommitment() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 4;</code>
       * @return The hostNonceCommitment.
       */
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment getHostNonceCommitment() {
        if (hostNonceCommitmentBuilder_ == null) {
          return hostNonceCommitment_ == null ? com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.getDefaultInstance() : hostNonceCommitment_;
        } else {
          return hostNonceCommitmentBuilder_.getMessage();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 4;</code>
       */
      public Builder setHostNonceCommitment(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment value) {
        if (hostNonceCommitmentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hostNonceCommitment_ = value;
        } else {
          hostNonceCommitmentBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 4;</code>
       */
      public Builder setHostNonceCommitment(
          com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.Builder builderForValue) {
        if (hostNonceCommitmentBuilder_ == null) {
          hostNonceCommitment_ = builderForValue.build();
        } else {
          hostNonceCommitmentBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 4;</code>
       */
      public Builder mergeHostNonceCommitment(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment value) {
        if (hostNonceCommitmentBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            hostNonceCommitment_ != null &&
            hostNonceCommitment_ != com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.getDefaultInstance()) {
            getHostNonceCommitmentBuilder().mergeFrom(value);
          } else {
            hostNonceCommitment_ = value;
          }
        } else {
          hostNonceCommitmentBuilder_.mergeFrom(value);
        }
        if (hostNonceCommitment_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 4;</code>
       */
      public Builder clearHostNonceCommitment() {
        bitField0_ = (bitField0_ & ~0x00000008);
        hostNonceCommitment_ = null;
        if (hostNonceCommitmentBuilder_ != null) {
          hostNonceCommitmentBuilder_.dispose();
          hostNonceCommitmentBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 4;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.Builder getHostNonceCommitmentBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getHostNonceCommitmentFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 4;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitmentOrBuilder getHostNonceCommitmentOrBuilder() {
        if (hostNonceCommitmentBuilder_ != null) {
          return hostNonceCommitmentBuilder_.getMessageOrBuilder();
        } else {
          return hostNonceCommitment_ == null ?
              com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.getDefaultInstance() : hostNonceCommitment_;
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment host_nonce_commitment = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.Builder, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitmentOrBuilder> 
          getHostNonceCommitmentFieldBuilder() {
        if (hostNonceCommitmentBuilder_ == null) {
          hostNonceCommitmentBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.Builder, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitmentOrBuilder>(
                  getHostNonceCommitment(),
                  getParentForChildren(),
                  isClean());
          hostNonceCommitment_ = null;
        }
        return hostNonceCommitmentBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCSignMessageRequest>
        PARSER = new com.google.protobuf.AbstractParser<BTCSignMessageRequest>() {
      @java.lang.Override
      public BTCSignMessageRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCSignMessageRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCSignMessageRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCSignMessageResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 65 bytes (32 bytes big endian R, 32 bytes big endian S, 1 recid).
     * </pre>
     *
     * <code>bytes signature = 1;</code>
     * @return The signature.
     */
    com.google.protobuf.ByteString getSignature();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse}
   */
  public static final class BTCSignMessageResponse extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse)
      BTCSignMessageResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCSignMessageResponse.class.getName());
    }
    // Use BTCSignMessageResponse.newBuilder() to construct.
    private BTCSignMessageResponse(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCSignMessageResponse() {
      signature_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.Builder.class);
    }

    public static final int SIGNATURE_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * 65 bytes (32 bytes big endian R, 32 bytes big endian S, 1 recid).
     * </pre>
     *
     * <code>bytes signature = 1;</code>
     * @return The signature.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSignature() {
      return signature_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!signature_.isEmpty()) {
        output.writeBytes(1, signature_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!signature_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, signature_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse) obj;

      if (!getSignature()
          .equals(other.getSignature())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
      hash = (53 * hash) + getSignature().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        signature_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageResponse_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.signature_ = signature_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.getDefaultInstance()) return this;
        if (other.getSignature() != com.google.protobuf.ByteString.EMPTY) {
          setSignature(other.getSignature());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                signature_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * 65 bytes (32 bytes big endian R, 32 bytes big endian S, 1 recid).
       * </pre>
       *
       * <code>bytes signature = 1;</code>
       * @return The signature.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSignature() {
        return signature_;
      }
      /**
       * <pre>
       * 65 bytes (32 bytes big endian R, 32 bytes big endian S, 1 recid).
       * </pre>
       *
       * <code>bytes signature = 1;</code>
       * @param value The signature to set.
       * @return This builder for chaining.
       */
      public Builder setSignature(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        signature_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 65 bytes (32 bytes big endian R, 32 bytes big endian S, 1 recid).
       * </pre>
       *
       * <code>bytes signature = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSignature() {
        bitField0_ = (bitField0_ & ~0x00000001);
        signature_ = getDefaultInstance().getSignature();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCSignMessageResponse>
        PARSER = new com.google.protobuf.AbstractParser<BTCSignMessageResponse>() {
      @java.lang.Override
      public BTCSignMessageResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCSignMessageResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCSignMessageResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;</code>
     * @return Whether the isScriptConfigRegistered field is set.
     */
    boolean hasIsScriptConfigRegistered();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;</code>
     * @return The isScriptConfigRegistered.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest getIsScriptConfigRegistered();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequestOrBuilder getIsScriptConfigRegisteredOrBuilder();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest register_script_config = 2;</code>
     * @return Whether the registerScriptConfig field is set.
     */
    boolean hasRegisterScriptConfig();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest register_script_config = 2;</code>
     * @return The registerScriptConfig.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest getRegisterScriptConfig();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest register_script_config = 2;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequestOrBuilder getRegisterScriptConfigOrBuilder();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest prevtx_init = 3;</code>
     * @return Whether the prevtxInit field is set.
     */
    boolean hasPrevtxInit();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest prevtx_init = 3;</code>
     * @return The prevtxInit.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest getPrevtxInit();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest prevtx_init = 3;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequestOrBuilder getPrevtxInitOrBuilder();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest prevtx_input = 4;</code>
     * @return Whether the prevtxInput field is set.
     */
    boolean hasPrevtxInput();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest prevtx_input = 4;</code>
     * @return The prevtxInput.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest getPrevtxInput();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest prevtx_input = 4;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequestOrBuilder getPrevtxInputOrBuilder();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest prevtx_output = 5;</code>
     * @return Whether the prevtxOutput field is set.
     */
    boolean hasPrevtxOutput();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest prevtx_output = 5;</code>
     * @return The prevtxOutput.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest getPrevtxOutput();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest prevtx_output = 5;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequestOrBuilder getPrevtxOutputOrBuilder();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest sign_message = 6;</code>
     * @return Whether the signMessage field is set.
     */
    boolean hasSignMessage();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest sign_message = 6;</code>
     * @return The signMessage.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest getSignMessage();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest sign_message = 6;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequestOrBuilder getSignMessageOrBuilder();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest antiklepto_signature = 7;</code>
     * @return Whether the antikleptoSignature field is set.
     */
    boolean hasAntikleptoSignature();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest antiklepto_signature = 7;</code>
     * @return The antikleptoSignature.
     */
    com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest getAntikleptoSignature();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest antiklepto_signature = 7;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequestOrBuilder getAntikleptoSignatureOrBuilder();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest payment_request = 8;</code>
     * @return Whether the paymentRequest field is set.
     */
    boolean hasPaymentRequest();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest payment_request = 8;</code>
     * @return The paymentRequest.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest getPaymentRequest();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest payment_request = 8;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequestOrBuilder getPaymentRequestOrBuilder();

    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest.RequestCase getRequestCase();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCRequest}
   */
  public static final class BTCRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCRequest)
      BTCRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCRequest.class.getName());
    }
    // Use BTCRequest.newBuilder() to construct.
    private BTCRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCRequest() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest.Builder.class);
    }

    private int requestCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object request_;
    public enum RequestCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      IS_SCRIPT_CONFIG_REGISTERED(1),
      REGISTER_SCRIPT_CONFIG(2),
      PREVTX_INIT(3),
      PREVTX_INPUT(4),
      PREVTX_OUTPUT(5),
      SIGN_MESSAGE(6),
      ANTIKLEPTO_SIGNATURE(7),
      PAYMENT_REQUEST(8),
      REQUEST_NOT_SET(0);
      private final int value;
      private RequestCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RequestCase valueOf(int value) {
        return forNumber(value);
      }

      public static RequestCase forNumber(int value) {
        switch (value) {
          case 1: return IS_SCRIPT_CONFIG_REGISTERED;
          case 2: return REGISTER_SCRIPT_CONFIG;
          case 3: return PREVTX_INIT;
          case 4: return PREVTX_INPUT;
          case 5: return PREVTX_OUTPUT;
          case 6: return SIGN_MESSAGE;
          case 7: return ANTIKLEPTO_SIGNATURE;
          case 8: return PAYMENT_REQUEST;
          case 0: return REQUEST_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public RequestCase
    getRequestCase() {
      return RequestCase.forNumber(
          requestCase_);
    }

    public static final int IS_SCRIPT_CONFIG_REGISTERED_FIELD_NUMBER = 1;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;</code>
     * @return Whether the isScriptConfigRegistered field is set.
     */
    @java.lang.Override
    public boolean hasIsScriptConfigRegistered() {
      return requestCase_ == 1;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;</code>
     * @return The isScriptConfigRegistered.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest getIsScriptConfigRegistered() {
      if (requestCase_ == 1) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest) request_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.getDefaultInstance();
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequestOrBuilder getIsScriptConfigRegisteredOrBuilder() {
      if (requestCase_ == 1) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest) request_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.getDefaultInstance();
    }

    public static final int REGISTER_SCRIPT_CONFIG_FIELD_NUMBER = 2;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest register_script_config = 2;</code>
     * @return Whether the registerScriptConfig field is set.
     */
    @java.lang.Override
    public boolean hasRegisterScriptConfig() {
      return requestCase_ == 2;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest register_script_config = 2;</code>
     * @return The registerScriptConfig.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest getRegisterScriptConfig() {
      if (requestCase_ == 2) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest) request_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.getDefaultInstance();
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest register_script_config = 2;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequestOrBuilder getRegisterScriptConfigOrBuilder() {
      if (requestCase_ == 2) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest) request_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.getDefaultInstance();
    }

    public static final int PREVTX_INIT_FIELD_NUMBER = 3;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest prevtx_init = 3;</code>
     * @return Whether the prevtxInit field is set.
     */
    @java.lang.Override
    public boolean hasPrevtxInit() {
      return requestCase_ == 3;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest prevtx_init = 3;</code>
     * @return The prevtxInit.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest getPrevtxInit() {
      if (requestCase_ == 3) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest) request_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.getDefaultInstance();
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest prevtx_init = 3;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequestOrBuilder getPrevtxInitOrBuilder() {
      if (requestCase_ == 3) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest) request_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.getDefaultInstance();
    }

    public static final int PREVTX_INPUT_FIELD_NUMBER = 4;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest prevtx_input = 4;</code>
     * @return Whether the prevtxInput field is set.
     */
    @java.lang.Override
    public boolean hasPrevtxInput() {
      return requestCase_ == 4;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest prevtx_input = 4;</code>
     * @return The prevtxInput.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest getPrevtxInput() {
      if (requestCase_ == 4) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest) request_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.getDefaultInstance();
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest prevtx_input = 4;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequestOrBuilder getPrevtxInputOrBuilder() {
      if (requestCase_ == 4) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest) request_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.getDefaultInstance();
    }

    public static final int PREVTX_OUTPUT_FIELD_NUMBER = 5;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest prevtx_output = 5;</code>
     * @return Whether the prevtxOutput field is set.
     */
    @java.lang.Override
    public boolean hasPrevtxOutput() {
      return requestCase_ == 5;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest prevtx_output = 5;</code>
     * @return The prevtxOutput.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest getPrevtxOutput() {
      if (requestCase_ == 5) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest) request_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.getDefaultInstance();
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest prevtx_output = 5;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequestOrBuilder getPrevtxOutputOrBuilder() {
      if (requestCase_ == 5) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest) request_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.getDefaultInstance();
    }

    public static final int SIGN_MESSAGE_FIELD_NUMBER = 6;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest sign_message = 6;</code>
     * @return Whether the signMessage field is set.
     */
    @java.lang.Override
    public boolean hasSignMessage() {
      return requestCase_ == 6;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest sign_message = 6;</code>
     * @return The signMessage.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest getSignMessage() {
      if (requestCase_ == 6) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest) request_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.getDefaultInstance();
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest sign_message = 6;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequestOrBuilder getSignMessageOrBuilder() {
      if (requestCase_ == 6) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest) request_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.getDefaultInstance();
    }

    public static final int ANTIKLEPTO_SIGNATURE_FIELD_NUMBER = 7;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest antiklepto_signature = 7;</code>
     * @return Whether the antikleptoSignature field is set.
     */
    @java.lang.Override
    public boolean hasAntikleptoSignature() {
      return requestCase_ == 7;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest antiklepto_signature = 7;</code>
     * @return The antikleptoSignature.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest getAntikleptoSignature() {
      if (requestCase_ == 7) {
         return (com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest) request_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.getDefaultInstance();
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest antiklepto_signature = 7;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequestOrBuilder getAntikleptoSignatureOrBuilder() {
      if (requestCase_ == 7) {
         return (com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest) request_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.getDefaultInstance();
    }

    public static final int PAYMENT_REQUEST_FIELD_NUMBER = 8;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest payment_request = 8;</code>
     * @return Whether the paymentRequest field is set.
     */
    @java.lang.Override
    public boolean hasPaymentRequest() {
      return requestCase_ == 8;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest payment_request = 8;</code>
     * @return The paymentRequest.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest getPaymentRequest() {
      if (requestCase_ == 8) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest) request_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.getDefaultInstance();
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest payment_request = 8;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequestOrBuilder getPaymentRequestOrBuilder() {
      if (requestCase_ == 8) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest) request_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (requestCase_ == 1) {
        output.writeMessage(1, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest) request_);
      }
      if (requestCase_ == 2) {
        output.writeMessage(2, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest) request_);
      }
      if (requestCase_ == 3) {
        output.writeMessage(3, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest) request_);
      }
      if (requestCase_ == 4) {
        output.writeMessage(4, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest) request_);
      }
      if (requestCase_ == 5) {
        output.writeMessage(5, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest) request_);
      }
      if (requestCase_ == 6) {
        output.writeMessage(6, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest) request_);
      }
      if (requestCase_ == 7) {
        output.writeMessage(7, (com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest) request_);
      }
      if (requestCase_ == 8) {
        output.writeMessage(8, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest) request_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (requestCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest) request_);
      }
      if (requestCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest) request_);
      }
      if (requestCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest) request_);
      }
      if (requestCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest) request_);
      }
      if (requestCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest) request_);
      }
      if (requestCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest) request_);
      }
      if (requestCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, (com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest) request_);
      }
      if (requestCase_ == 8) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest) request_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest) obj;

      if (!getRequestCase().equals(other.getRequestCase())) return false;
      switch (requestCase_) {
        case 1:
          if (!getIsScriptConfigRegistered()
              .equals(other.getIsScriptConfigRegistered())) return false;
          break;
        case 2:
          if (!getRegisterScriptConfig()
              .equals(other.getRegisterScriptConfig())) return false;
          break;
        case 3:
          if (!getPrevtxInit()
              .equals(other.getPrevtxInit())) return false;
          break;
        case 4:
          if (!getPrevtxInput()
              .equals(other.getPrevtxInput())) return false;
          break;
        case 5:
          if (!getPrevtxOutput()
              .equals(other.getPrevtxOutput())) return false;
          break;
        case 6:
          if (!getSignMessage()
              .equals(other.getSignMessage())) return false;
          break;
        case 7:
          if (!getAntikleptoSignature()
              .equals(other.getAntikleptoSignature())) return false;
          break;
        case 8:
          if (!getPaymentRequest()
              .equals(other.getPaymentRequest())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (requestCase_) {
        case 1:
          hash = (37 * hash) + IS_SCRIPT_CONFIG_REGISTERED_FIELD_NUMBER;
          hash = (53 * hash) + getIsScriptConfigRegistered().hashCode();
          break;
        case 2:
          hash = (37 * hash) + REGISTER_SCRIPT_CONFIG_FIELD_NUMBER;
          hash = (53 * hash) + getRegisterScriptConfig().hashCode();
          break;
        case 3:
          hash = (37 * hash) + PREVTX_INIT_FIELD_NUMBER;
          hash = (53 * hash) + getPrevtxInit().hashCode();
          break;
        case 4:
          hash = (37 * hash) + PREVTX_INPUT_FIELD_NUMBER;
          hash = (53 * hash) + getPrevtxInput().hashCode();
          break;
        case 5:
          hash = (37 * hash) + PREVTX_OUTPUT_FIELD_NUMBER;
          hash = (53 * hash) + getPrevtxOutput().hashCode();
          break;
        case 6:
          hash = (37 * hash) + SIGN_MESSAGE_FIELD_NUMBER;
          hash = (53 * hash) + getSignMessage().hashCode();
          break;
        case 7:
          hash = (37 * hash) + ANTIKLEPTO_SIGNATURE_FIELD_NUMBER;
          hash = (53 * hash) + getAntikleptoSignature().hashCode();
          break;
        case 8:
          hash = (37 * hash) + PAYMENT_REQUEST_FIELD_NUMBER;
          hash = (53 * hash) + getPaymentRequest().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCRequest)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (isScriptConfigRegisteredBuilder_ != null) {
          isScriptConfigRegisteredBuilder_.clear();
        }
        if (registerScriptConfigBuilder_ != null) {
          registerScriptConfigBuilder_.clear();
        }
        if (prevtxInitBuilder_ != null) {
          prevtxInitBuilder_.clear();
        }
        if (prevtxInputBuilder_ != null) {
          prevtxInputBuilder_.clear();
        }
        if (prevtxOutputBuilder_ != null) {
          prevtxOutputBuilder_.clear();
        }
        if (signMessageBuilder_ != null) {
          signMessageBuilder_.clear();
        }
        if (antikleptoSignatureBuilder_ != null) {
          antikleptoSignatureBuilder_.clear();
        }
        if (paymentRequestBuilder_ != null) {
          paymentRequestBuilder_.clear();
        }
        requestCase_ = 0;
        request_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRequest_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest result) {
        result.requestCase_ = requestCase_;
        result.request_ = this.request_;
        if (requestCase_ == 1 &&
            isScriptConfigRegisteredBuilder_ != null) {
          result.request_ = isScriptConfigRegisteredBuilder_.build();
        }
        if (requestCase_ == 2 &&
            registerScriptConfigBuilder_ != null) {
          result.request_ = registerScriptConfigBuilder_.build();
        }
        if (requestCase_ == 3 &&
            prevtxInitBuilder_ != null) {
          result.request_ = prevtxInitBuilder_.build();
        }
        if (requestCase_ == 4 &&
            prevtxInputBuilder_ != null) {
          result.request_ = prevtxInputBuilder_.build();
        }
        if (requestCase_ == 5 &&
            prevtxOutputBuilder_ != null) {
          result.request_ = prevtxOutputBuilder_.build();
        }
        if (requestCase_ == 6 &&
            signMessageBuilder_ != null) {
          result.request_ = signMessageBuilder_.build();
        }
        if (requestCase_ == 7 &&
            antikleptoSignatureBuilder_ != null) {
          result.request_ = antikleptoSignatureBuilder_.build();
        }
        if (requestCase_ == 8 &&
            paymentRequestBuilder_ != null) {
          result.request_ = paymentRequestBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest.getDefaultInstance()) return this;
        switch (other.getRequestCase()) {
          case IS_SCRIPT_CONFIG_REGISTERED: {
            mergeIsScriptConfigRegistered(other.getIsScriptConfigRegistered());
            break;
          }
          case REGISTER_SCRIPT_CONFIG: {
            mergeRegisterScriptConfig(other.getRegisterScriptConfig());
            break;
          }
          case PREVTX_INIT: {
            mergePrevtxInit(other.getPrevtxInit());
            break;
          }
          case PREVTX_INPUT: {
            mergePrevtxInput(other.getPrevtxInput());
            break;
          }
          case PREVTX_OUTPUT: {
            mergePrevtxOutput(other.getPrevtxOutput());
            break;
          }
          case SIGN_MESSAGE: {
            mergeSignMessage(other.getSignMessage());
            break;
          }
          case ANTIKLEPTO_SIGNATURE: {
            mergeAntikleptoSignature(other.getAntikleptoSignature());
            break;
          }
          case PAYMENT_REQUEST: {
            mergePaymentRequest(other.getPaymentRequest());
            break;
          }
          case REQUEST_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getIsScriptConfigRegisteredFieldBuilder().getBuilder(),
                    extensionRegistry);
                requestCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getRegisterScriptConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                requestCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getPrevtxInitFieldBuilder().getBuilder(),
                    extensionRegistry);
                requestCase_ = 3;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getPrevtxInputFieldBuilder().getBuilder(),
                    extensionRegistry);
                requestCase_ = 4;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getPrevtxOutputFieldBuilder().getBuilder(),
                    extensionRegistry);
                requestCase_ = 5;
                break;
              } // case 42
              case 50: {
                input.readMessage(
                    getSignMessageFieldBuilder().getBuilder(),
                    extensionRegistry);
                requestCase_ = 6;
                break;
              } // case 50
              case 58: {
                input.readMessage(
                    getAntikleptoSignatureFieldBuilder().getBuilder(),
                    extensionRegistry);
                requestCase_ = 7;
                break;
              } // case 58
              case 66: {
                input.readMessage(
                    getPaymentRequestFieldBuilder().getBuilder(),
                    extensionRegistry);
                requestCase_ = 8;
                break;
              } // case 66
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int requestCase_ = 0;
      private java.lang.Object request_;
      public RequestCase
          getRequestCase() {
        return RequestCase.forNumber(
            requestCase_);
      }

      public Builder clearRequest() {
        requestCase_ = 0;
        request_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequestOrBuilder> isScriptConfigRegisteredBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;</code>
       * @return Whether the isScriptConfigRegistered field is set.
       */
      @java.lang.Override
      public boolean hasIsScriptConfigRegistered() {
        return requestCase_ == 1;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;</code>
       * @return The isScriptConfigRegistered.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest getIsScriptConfigRegistered() {
        if (isScriptConfigRegisteredBuilder_ == null) {
          if (requestCase_ == 1) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest) request_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 1) {
            return isScriptConfigRegisteredBuilder_.getMessage();
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;</code>
       */
      public Builder setIsScriptConfigRegistered(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest value) {
        if (isScriptConfigRegisteredBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          isScriptConfigRegisteredBuilder_.setMessage(value);
        }
        requestCase_ = 1;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;</code>
       */
      public Builder setIsScriptConfigRegistered(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.Builder builderForValue) {
        if (isScriptConfigRegisteredBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          isScriptConfigRegisteredBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 1;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;</code>
       */
      public Builder mergeIsScriptConfigRegistered(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest value) {
        if (isScriptConfigRegisteredBuilder_ == null) {
          if (requestCase_ == 1 &&
              request_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.getDefaultInstance()) {
            request_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.newBuilder((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 1) {
            isScriptConfigRegisteredBuilder_.mergeFrom(value);
          } else {
            isScriptConfigRegisteredBuilder_.setMessage(value);
          }
        }
        requestCase_ = 1;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;</code>
       */
      public Builder clearIsScriptConfigRegistered() {
        if (isScriptConfigRegisteredBuilder_ == null) {
          if (requestCase_ == 1) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 1) {
            requestCase_ = 0;
            request_ = null;
          }
          isScriptConfigRegisteredBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.Builder getIsScriptConfigRegisteredBuilder() {
        return getIsScriptConfigRegisteredFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequestOrBuilder getIsScriptConfigRegisteredOrBuilder() {
        if ((requestCase_ == 1) && (isScriptConfigRegisteredBuilder_ != null)) {
          return isScriptConfigRegisteredBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 1) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest) request_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequestOrBuilder> 
          getIsScriptConfigRegisteredFieldBuilder() {
        if (isScriptConfigRegisteredBuilder_ == null) {
          if (!(requestCase_ == 1)) {
            request_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.getDefaultInstance();
          }
          isScriptConfigRegisteredBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequestOrBuilder>(
                  (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 1;
        onChanged();
        return isScriptConfigRegisteredBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequestOrBuilder> registerScriptConfigBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest register_script_config = 2;</code>
       * @return Whether the registerScriptConfig field is set.
       */
      @java.lang.Override
      public boolean hasRegisterScriptConfig() {
        return requestCase_ == 2;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest register_script_config = 2;</code>
       * @return The registerScriptConfig.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest getRegisterScriptConfig() {
        if (registerScriptConfigBuilder_ == null) {
          if (requestCase_ == 2) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest) request_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 2) {
            return registerScriptConfigBuilder_.getMessage();
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest register_script_config = 2;</code>
       */
      public Builder setRegisterScriptConfig(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest value) {
        if (registerScriptConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          registerScriptConfigBuilder_.setMessage(value);
        }
        requestCase_ = 2;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest register_script_config = 2;</code>
       */
      public Builder setRegisterScriptConfig(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.Builder builderForValue) {
        if (registerScriptConfigBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          registerScriptConfigBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 2;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest register_script_config = 2;</code>
       */
      public Builder mergeRegisterScriptConfig(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest value) {
        if (registerScriptConfigBuilder_ == null) {
          if (requestCase_ == 2 &&
              request_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.getDefaultInstance()) {
            request_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.newBuilder((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 2) {
            registerScriptConfigBuilder_.mergeFrom(value);
          } else {
            registerScriptConfigBuilder_.setMessage(value);
          }
        }
        requestCase_ = 2;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest register_script_config = 2;</code>
       */
      public Builder clearRegisterScriptConfig() {
        if (registerScriptConfigBuilder_ == null) {
          if (requestCase_ == 2) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 2) {
            requestCase_ = 0;
            request_ = null;
          }
          registerScriptConfigBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest register_script_config = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.Builder getRegisterScriptConfigBuilder() {
        return getRegisterScriptConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest register_script_config = 2;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequestOrBuilder getRegisterScriptConfigOrBuilder() {
        if ((requestCase_ == 2) && (registerScriptConfigBuilder_ != null)) {
          return registerScriptConfigBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 2) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest) request_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCRegisterScriptConfigRequest register_script_config = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequestOrBuilder> 
          getRegisterScriptConfigFieldBuilder() {
        if (registerScriptConfigBuilder_ == null) {
          if (!(requestCase_ == 2)) {
            request_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.getDefaultInstance();
          }
          registerScriptConfigBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequestOrBuilder>(
                  (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRegisterScriptConfigRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 2;
        onChanged();
        return registerScriptConfigBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequestOrBuilder> prevtxInitBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest prevtx_init = 3;</code>
       * @return Whether the prevtxInit field is set.
       */
      @java.lang.Override
      public boolean hasPrevtxInit() {
        return requestCase_ == 3;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest prevtx_init = 3;</code>
       * @return The prevtxInit.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest getPrevtxInit() {
        if (prevtxInitBuilder_ == null) {
          if (requestCase_ == 3) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest) request_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 3) {
            return prevtxInitBuilder_.getMessage();
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest prevtx_init = 3;</code>
       */
      public Builder setPrevtxInit(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest value) {
        if (prevtxInitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          prevtxInitBuilder_.setMessage(value);
        }
        requestCase_ = 3;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest prevtx_init = 3;</code>
       */
      public Builder setPrevtxInit(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.Builder builderForValue) {
        if (prevtxInitBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          prevtxInitBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 3;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest prevtx_init = 3;</code>
       */
      public Builder mergePrevtxInit(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest value) {
        if (prevtxInitBuilder_ == null) {
          if (requestCase_ == 3 &&
              request_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.getDefaultInstance()) {
            request_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.newBuilder((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 3) {
            prevtxInitBuilder_.mergeFrom(value);
          } else {
            prevtxInitBuilder_.setMessage(value);
          }
        }
        requestCase_ = 3;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest prevtx_init = 3;</code>
       */
      public Builder clearPrevtxInit() {
        if (prevtxInitBuilder_ == null) {
          if (requestCase_ == 3) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 3) {
            requestCase_ = 0;
            request_ = null;
          }
          prevtxInitBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest prevtx_init = 3;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.Builder getPrevtxInitBuilder() {
        return getPrevtxInitFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest prevtx_init = 3;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequestOrBuilder getPrevtxInitOrBuilder() {
        if ((requestCase_ == 3) && (prevtxInitBuilder_ != null)) {
          return prevtxInitBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 3) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest) request_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInitRequest prevtx_init = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequestOrBuilder> 
          getPrevtxInitFieldBuilder() {
        if (prevtxInitBuilder_ == null) {
          if (!(requestCase_ == 3)) {
            request_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.getDefaultInstance();
          }
          prevtxInitBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequestOrBuilder>(
                  (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInitRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 3;
        onChanged();
        return prevtxInitBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequestOrBuilder> prevtxInputBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest prevtx_input = 4;</code>
       * @return Whether the prevtxInput field is set.
       */
      @java.lang.Override
      public boolean hasPrevtxInput() {
        return requestCase_ == 4;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest prevtx_input = 4;</code>
       * @return The prevtxInput.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest getPrevtxInput() {
        if (prevtxInputBuilder_ == null) {
          if (requestCase_ == 4) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest) request_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 4) {
            return prevtxInputBuilder_.getMessage();
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest prevtx_input = 4;</code>
       */
      public Builder setPrevtxInput(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest value) {
        if (prevtxInputBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          prevtxInputBuilder_.setMessage(value);
        }
        requestCase_ = 4;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest prevtx_input = 4;</code>
       */
      public Builder setPrevtxInput(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.Builder builderForValue) {
        if (prevtxInputBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          prevtxInputBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 4;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest prevtx_input = 4;</code>
       */
      public Builder mergePrevtxInput(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest value) {
        if (prevtxInputBuilder_ == null) {
          if (requestCase_ == 4 &&
              request_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.getDefaultInstance()) {
            request_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.newBuilder((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 4) {
            prevtxInputBuilder_.mergeFrom(value);
          } else {
            prevtxInputBuilder_.setMessage(value);
          }
        }
        requestCase_ = 4;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest prevtx_input = 4;</code>
       */
      public Builder clearPrevtxInput() {
        if (prevtxInputBuilder_ == null) {
          if (requestCase_ == 4) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 4) {
            requestCase_ = 0;
            request_ = null;
          }
          prevtxInputBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest prevtx_input = 4;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.Builder getPrevtxInputBuilder() {
        return getPrevtxInputFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest prevtx_input = 4;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequestOrBuilder getPrevtxInputOrBuilder() {
        if ((requestCase_ == 4) && (prevtxInputBuilder_ != null)) {
          return prevtxInputBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 4) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest) request_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxInputRequest prevtx_input = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequestOrBuilder> 
          getPrevtxInputFieldBuilder() {
        if (prevtxInputBuilder_ == null) {
          if (!(requestCase_ == 4)) {
            request_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.getDefaultInstance();
          }
          prevtxInputBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequestOrBuilder>(
                  (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxInputRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 4;
        onChanged();
        return prevtxInputBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequestOrBuilder> prevtxOutputBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest prevtx_output = 5;</code>
       * @return Whether the prevtxOutput field is set.
       */
      @java.lang.Override
      public boolean hasPrevtxOutput() {
        return requestCase_ == 5;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest prevtx_output = 5;</code>
       * @return The prevtxOutput.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest getPrevtxOutput() {
        if (prevtxOutputBuilder_ == null) {
          if (requestCase_ == 5) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest) request_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 5) {
            return prevtxOutputBuilder_.getMessage();
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest prevtx_output = 5;</code>
       */
      public Builder setPrevtxOutput(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest value) {
        if (prevtxOutputBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          prevtxOutputBuilder_.setMessage(value);
        }
        requestCase_ = 5;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest prevtx_output = 5;</code>
       */
      public Builder setPrevtxOutput(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.Builder builderForValue) {
        if (prevtxOutputBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          prevtxOutputBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 5;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest prevtx_output = 5;</code>
       */
      public Builder mergePrevtxOutput(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest value) {
        if (prevtxOutputBuilder_ == null) {
          if (requestCase_ == 5 &&
              request_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.getDefaultInstance()) {
            request_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.newBuilder((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 5) {
            prevtxOutputBuilder_.mergeFrom(value);
          } else {
            prevtxOutputBuilder_.setMessage(value);
          }
        }
        requestCase_ = 5;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest prevtx_output = 5;</code>
       */
      public Builder clearPrevtxOutput() {
        if (prevtxOutputBuilder_ == null) {
          if (requestCase_ == 5) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 5) {
            requestCase_ = 0;
            request_ = null;
          }
          prevtxOutputBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest prevtx_output = 5;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.Builder getPrevtxOutputBuilder() {
        return getPrevtxOutputFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest prevtx_output = 5;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequestOrBuilder getPrevtxOutputOrBuilder() {
        if ((requestCase_ == 5) && (prevtxOutputBuilder_ != null)) {
          return prevtxOutputBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 5) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest) request_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPrevTxOutputRequest prevtx_output = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequestOrBuilder> 
          getPrevtxOutputFieldBuilder() {
        if (prevtxOutputBuilder_ == null) {
          if (!(requestCase_ == 5)) {
            request_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.getDefaultInstance();
          }
          prevtxOutputBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequestOrBuilder>(
                  (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPrevTxOutputRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 5;
        onChanged();
        return prevtxOutputBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequestOrBuilder> signMessageBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest sign_message = 6;</code>
       * @return Whether the signMessage field is set.
       */
      @java.lang.Override
      public boolean hasSignMessage() {
        return requestCase_ == 6;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest sign_message = 6;</code>
       * @return The signMessage.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest getSignMessage() {
        if (signMessageBuilder_ == null) {
          if (requestCase_ == 6) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest) request_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 6) {
            return signMessageBuilder_.getMessage();
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest sign_message = 6;</code>
       */
      public Builder setSignMessage(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest value) {
        if (signMessageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          signMessageBuilder_.setMessage(value);
        }
        requestCase_ = 6;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest sign_message = 6;</code>
       */
      public Builder setSignMessage(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.Builder builderForValue) {
        if (signMessageBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          signMessageBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 6;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest sign_message = 6;</code>
       */
      public Builder mergeSignMessage(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest value) {
        if (signMessageBuilder_ == null) {
          if (requestCase_ == 6 &&
              request_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.getDefaultInstance()) {
            request_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.newBuilder((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 6) {
            signMessageBuilder_.mergeFrom(value);
          } else {
            signMessageBuilder_.setMessage(value);
          }
        }
        requestCase_ = 6;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest sign_message = 6;</code>
       */
      public Builder clearSignMessage() {
        if (signMessageBuilder_ == null) {
          if (requestCase_ == 6) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 6) {
            requestCase_ = 0;
            request_ = null;
          }
          signMessageBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest sign_message = 6;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.Builder getSignMessageBuilder() {
        return getSignMessageFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest sign_message = 6;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequestOrBuilder getSignMessageOrBuilder() {
        if ((requestCase_ == 6) && (signMessageBuilder_ != null)) {
          return signMessageBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 6) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest) request_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageRequest sign_message = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequestOrBuilder> 
          getSignMessageFieldBuilder() {
        if (signMessageBuilder_ == null) {
          if (!(requestCase_ == 6)) {
            request_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.getDefaultInstance();
          }
          signMessageBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequestOrBuilder>(
                  (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 6;
        onChanged();
        return signMessageBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequestOrBuilder> antikleptoSignatureBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest antiklepto_signature = 7;</code>
       * @return Whether the antikleptoSignature field is set.
       */
      @java.lang.Override
      public boolean hasAntikleptoSignature() {
        return requestCase_ == 7;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest antiklepto_signature = 7;</code>
       * @return The antikleptoSignature.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest getAntikleptoSignature() {
        if (antikleptoSignatureBuilder_ == null) {
          if (requestCase_ == 7) {
            return (com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest) request_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 7) {
            return antikleptoSignatureBuilder_.getMessage();
          }
          return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest antiklepto_signature = 7;</code>
       */
      public Builder setAntikleptoSignature(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest value) {
        if (antikleptoSignatureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          antikleptoSignatureBuilder_.setMessage(value);
        }
        requestCase_ = 7;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest antiklepto_signature = 7;</code>
       */
      public Builder setAntikleptoSignature(
          com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.Builder builderForValue) {
        if (antikleptoSignatureBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          antikleptoSignatureBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 7;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest antiklepto_signature = 7;</code>
       */
      public Builder mergeAntikleptoSignature(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest value) {
        if (antikleptoSignatureBuilder_ == null) {
          if (requestCase_ == 7 &&
              request_ != com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.getDefaultInstance()) {
            request_ = com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.newBuilder((com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 7) {
            antikleptoSignatureBuilder_.mergeFrom(value);
          } else {
            antikleptoSignatureBuilder_.setMessage(value);
          }
        }
        requestCase_ = 7;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest antiklepto_signature = 7;</code>
       */
      public Builder clearAntikleptoSignature() {
        if (antikleptoSignatureBuilder_ == null) {
          if (requestCase_ == 7) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 7) {
            requestCase_ = 0;
            request_ = null;
          }
          antikleptoSignatureBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest antiklepto_signature = 7;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.Builder getAntikleptoSignatureBuilder() {
        return getAntikleptoSignatureFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest antiklepto_signature = 7;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequestOrBuilder getAntikleptoSignatureOrBuilder() {
        if ((requestCase_ == 7) && (antikleptoSignatureBuilder_ != null)) {
          return antikleptoSignatureBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 7) {
            return (com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest) request_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest antiklepto_signature = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequestOrBuilder> 
          getAntikleptoSignatureFieldBuilder() {
        if (antikleptoSignatureBuilder_ == null) {
          if (!(requestCase_ == 7)) {
            request_ = com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.getDefaultInstance();
          }
          antikleptoSignatureBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequestOrBuilder>(
                  (com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 7;
        onChanged();
        return antikleptoSignatureBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequestOrBuilder> paymentRequestBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest payment_request = 8;</code>
       * @return Whether the paymentRequest field is set.
       */
      @java.lang.Override
      public boolean hasPaymentRequest() {
        return requestCase_ == 8;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest payment_request = 8;</code>
       * @return The paymentRequest.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest getPaymentRequest() {
        if (paymentRequestBuilder_ == null) {
          if (requestCase_ == 8) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest) request_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 8) {
            return paymentRequestBuilder_.getMessage();
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest payment_request = 8;</code>
       */
      public Builder setPaymentRequest(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest value) {
        if (paymentRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          paymentRequestBuilder_.setMessage(value);
        }
        requestCase_ = 8;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest payment_request = 8;</code>
       */
      public Builder setPaymentRequest(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Builder builderForValue) {
        if (paymentRequestBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          paymentRequestBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 8;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest payment_request = 8;</code>
       */
      public Builder mergePaymentRequest(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest value) {
        if (paymentRequestBuilder_ == null) {
          if (requestCase_ == 8 &&
              request_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.getDefaultInstance()) {
            request_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.newBuilder((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 8) {
            paymentRequestBuilder_.mergeFrom(value);
          } else {
            paymentRequestBuilder_.setMessage(value);
          }
        }
        requestCase_ = 8;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest payment_request = 8;</code>
       */
      public Builder clearPaymentRequest() {
        if (paymentRequestBuilder_ == null) {
          if (requestCase_ == 8) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 8) {
            requestCase_ = 0;
            request_ = null;
          }
          paymentRequestBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest payment_request = 8;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Builder getPaymentRequestBuilder() {
        return getPaymentRequestFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest payment_request = 8;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequestOrBuilder getPaymentRequestOrBuilder() {
        if ((requestCase_ == 8) && (paymentRequestBuilder_ != null)) {
          return paymentRequestBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 8) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest) request_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCPaymentRequestRequest payment_request = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequestOrBuilder> 
          getPaymentRequestFieldBuilder() {
        if (paymentRequestBuilder_ == null) {
          if (!(requestCase_ == 8)) {
            request_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.getDefaultInstance();
          }
          paymentRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequestOrBuilder>(
                  (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCPaymentRequestRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 8;
        onChanged();
        return paymentRequestBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCRequest)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCRequest)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCRequest>
        PARSER = new com.google.protobuf.AbstractParser<BTCRequest>() {
      @java.lang.Override
      public BTCRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.BTCResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSuccess success = 1;</code>
     * @return Whether the success field is set.
     */
    boolean hasSuccess();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSuccess success = 1;</code>
     * @return The success.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess getSuccess();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSuccess success = 1;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccessOrBuilder getSuccessOrBuilder();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;</code>
     * @return Whether the isScriptConfigRegistered field is set.
     */
    boolean hasIsScriptConfigRegistered();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;</code>
     * @return The isScriptConfigRegistered.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse getIsScriptConfigRegistered();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponseOrBuilder getIsScriptConfigRegisteredOrBuilder();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse sign_next = 3;</code>
     * @return Whether the signNext field is set.
     */
    boolean hasSignNext();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse sign_next = 3;</code>
     * @return The signNext.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse getSignNext();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse sign_next = 3;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponseOrBuilder getSignNextOrBuilder();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse sign_message = 4;</code>
     * @return Whether the signMessage field is set.
     */
    boolean hasSignMessage();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse sign_message = 4;</code>
     * @return The signMessage.
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse getSignMessage();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse sign_message = 4;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponseOrBuilder getSignMessageOrBuilder();

    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;</code>
     * @return Whether the antikleptoSignerCommitment field is set.
     */
    boolean hasAntikleptoSignerCommitment();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;</code>
     * @return The antikleptoSignerCommitment.
     */
    com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment getAntikleptoSignerCommitment();
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;</code>
     */
    com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitmentOrBuilder getAntikleptoSignerCommitmentOrBuilder();

    com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse.ResponseCase getResponseCase();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCResponse}
   */
  public static final class BTCResponse extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.BTCResponse)
      BTCResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        BTCResponse.class.getName());
    }
    // Use BTCResponse.newBuilder() to construct.
    private BTCResponse(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BTCResponse() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse.Builder.class);
    }

    private int responseCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object response_;
    public enum ResponseCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      SUCCESS(1),
      IS_SCRIPT_CONFIG_REGISTERED(2),
      SIGN_NEXT(3),
      SIGN_MESSAGE(4),
      ANTIKLEPTO_SIGNER_COMMITMENT(5),
      RESPONSE_NOT_SET(0);
      private final int value;
      private ResponseCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ResponseCase valueOf(int value) {
        return forNumber(value);
      }

      public static ResponseCase forNumber(int value) {
        switch (value) {
          case 1: return SUCCESS;
          case 2: return IS_SCRIPT_CONFIG_REGISTERED;
          case 3: return SIGN_NEXT;
          case 4: return SIGN_MESSAGE;
          case 5: return ANTIKLEPTO_SIGNER_COMMITMENT;
          case 0: return RESPONSE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ResponseCase
    getResponseCase() {
      return ResponseCase.forNumber(
          responseCase_);
    }

    public static final int SUCCESS_FIELD_NUMBER = 1;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSuccess success = 1;</code>
     * @return Whether the success field is set.
     */
    @java.lang.Override
    public boolean hasSuccess() {
      return responseCase_ == 1;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSuccess success = 1;</code>
     * @return The success.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess getSuccess() {
      if (responseCase_ == 1) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess) response_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.getDefaultInstance();
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSuccess success = 1;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccessOrBuilder getSuccessOrBuilder() {
      if (responseCase_ == 1) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess) response_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.getDefaultInstance();
    }

    public static final int IS_SCRIPT_CONFIG_REGISTERED_FIELD_NUMBER = 2;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;</code>
     * @return Whether the isScriptConfigRegistered field is set.
     */
    @java.lang.Override
    public boolean hasIsScriptConfigRegistered() {
      return responseCase_ == 2;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;</code>
     * @return The isScriptConfigRegistered.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse getIsScriptConfigRegistered() {
      if (responseCase_ == 2) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse) response_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.getDefaultInstance();
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponseOrBuilder getIsScriptConfigRegisteredOrBuilder() {
      if (responseCase_ == 2) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse) response_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.getDefaultInstance();
    }

    public static final int SIGN_NEXT_FIELD_NUMBER = 3;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse sign_next = 3;</code>
     * @return Whether the signNext field is set.
     */
    @java.lang.Override
    public boolean hasSignNext() {
      return responseCase_ == 3;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse sign_next = 3;</code>
     * @return The signNext.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse getSignNext() {
      if (responseCase_ == 3) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse) response_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.getDefaultInstance();
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse sign_next = 3;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponseOrBuilder getSignNextOrBuilder() {
      if (responseCase_ == 3) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse) response_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.getDefaultInstance();
    }

    public static final int SIGN_MESSAGE_FIELD_NUMBER = 4;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse sign_message = 4;</code>
     * @return Whether the signMessage field is set.
     */
    @java.lang.Override
    public boolean hasSignMessage() {
      return responseCase_ == 4;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse sign_message = 4;</code>
     * @return The signMessage.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse getSignMessage() {
      if (responseCase_ == 4) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse) response_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.getDefaultInstance();
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse sign_message = 4;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponseOrBuilder getSignMessageOrBuilder() {
      if (responseCase_ == 4) {
         return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse) response_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.getDefaultInstance();
    }

    public static final int ANTIKLEPTO_SIGNER_COMMITMENT_FIELD_NUMBER = 5;
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;</code>
     * @return Whether the antikleptoSignerCommitment field is set.
     */
    @java.lang.Override
    public boolean hasAntikleptoSignerCommitment() {
      return responseCase_ == 5;
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;</code>
     * @return The antikleptoSignerCommitment.
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment getAntikleptoSignerCommitment() {
      if (responseCase_ == 5) {
         return (com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment) response_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.getDefaultInstance();
    }
    /**
     * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;</code>
     */
    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitmentOrBuilder getAntikleptoSignerCommitmentOrBuilder() {
      if (responseCase_ == 5) {
         return (com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment) response_;
      }
      return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (responseCase_ == 1) {
        output.writeMessage(1, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess) response_);
      }
      if (responseCase_ == 2) {
        output.writeMessage(2, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse) response_);
      }
      if (responseCase_ == 3) {
        output.writeMessage(3, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse) response_);
      }
      if (responseCase_ == 4) {
        output.writeMessage(4, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse) response_);
      }
      if (responseCase_ == 5) {
        output.writeMessage(5, (com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment) response_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (responseCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess) response_);
      }
      if (responseCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse) response_);
      }
      if (responseCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse) response_);
      }
      if (responseCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse) response_);
      }
      if (responseCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment) response_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse other = (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse) obj;

      if (!getResponseCase().equals(other.getResponseCase())) return false;
      switch (responseCase_) {
        case 1:
          if (!getSuccess()
              .equals(other.getSuccess())) return false;
          break;
        case 2:
          if (!getIsScriptConfigRegistered()
              .equals(other.getIsScriptConfigRegistered())) return false;
          break;
        case 3:
          if (!getSignNext()
              .equals(other.getSignNext())) return false;
          break;
        case 4:
          if (!getSignMessage()
              .equals(other.getSignMessage())) return false;
          break;
        case 5:
          if (!getAntikleptoSignerCommitment()
              .equals(other.getAntikleptoSignerCommitment())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (responseCase_) {
        case 1:
          hash = (37 * hash) + SUCCESS_FIELD_NUMBER;
          hash = (53 * hash) + getSuccess().hashCode();
          break;
        case 2:
          hash = (37 * hash) + IS_SCRIPT_CONFIG_REGISTERED_FIELD_NUMBER;
          hash = (53 * hash) + getIsScriptConfigRegistered().hashCode();
          break;
        case 3:
          hash = (37 * hash) + SIGN_NEXT_FIELD_NUMBER;
          hash = (53 * hash) + getSignNext().hashCode();
          break;
        case 4:
          hash = (37 * hash) + SIGN_MESSAGE_FIELD_NUMBER;
          hash = (53 * hash) + getSignMessage().hashCode();
          break;
        case 5:
          hash = (37 * hash) + ANTIKLEPTO_SIGNER_COMMITMENT_FIELD_NUMBER;
          hash = (53 * hash) + getAntikleptoSignerCommitment().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.BTCResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.BTCResponse)
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse.class, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (successBuilder_ != null) {
          successBuilder_.clear();
        }
        if (isScriptConfigRegisteredBuilder_ != null) {
          isScriptConfigRegisteredBuilder_.clear();
        }
        if (signNextBuilder_ != null) {
          signNextBuilder_.clear();
        }
        if (signMessageBuilder_ != null) {
          signMessageBuilder_.clear();
        }
        if (antikleptoSignerCommitmentBuilder_ != null) {
          antikleptoSignerCommitmentBuilder_.clear();
        }
        responseCase_ = 0;
        response_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCResponse_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse build() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse result = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse result) {
        result.responseCase_ = responseCase_;
        result.response_ = this.response_;
        if (responseCase_ == 1 &&
            successBuilder_ != null) {
          result.response_ = successBuilder_.build();
        }
        if (responseCase_ == 2 &&
            isScriptConfigRegisteredBuilder_ != null) {
          result.response_ = isScriptConfigRegisteredBuilder_.build();
        }
        if (responseCase_ == 3 &&
            signNextBuilder_ != null) {
          result.response_ = signNextBuilder_.build();
        }
        if (responseCase_ == 4 &&
            signMessageBuilder_ != null) {
          result.response_ = signMessageBuilder_.build();
        }
        if (responseCase_ == 5 &&
            antikleptoSignerCommitmentBuilder_ != null) {
          result.response_ = antikleptoSignerCommitmentBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse.getDefaultInstance()) return this;
        switch (other.getResponseCase()) {
          case SUCCESS: {
            mergeSuccess(other.getSuccess());
            break;
          }
          case IS_SCRIPT_CONFIG_REGISTERED: {
            mergeIsScriptConfigRegistered(other.getIsScriptConfigRegistered());
            break;
          }
          case SIGN_NEXT: {
            mergeSignNext(other.getSignNext());
            break;
          }
          case SIGN_MESSAGE: {
            mergeSignMessage(other.getSignMessage());
            break;
          }
          case ANTIKLEPTO_SIGNER_COMMITMENT: {
            mergeAntikleptoSignerCommitment(other.getAntikleptoSignerCommitment());
            break;
          }
          case RESPONSE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getSuccessFieldBuilder().getBuilder(),
                    extensionRegistry);
                responseCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getIsScriptConfigRegisteredFieldBuilder().getBuilder(),
                    extensionRegistry);
                responseCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getSignNextFieldBuilder().getBuilder(),
                    extensionRegistry);
                responseCase_ = 3;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getSignMessageFieldBuilder().getBuilder(),
                    extensionRegistry);
                responseCase_ = 4;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getAntikleptoSignerCommitmentFieldBuilder().getBuilder(),
                    extensionRegistry);
                responseCase_ = 5;
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int responseCase_ = 0;
      private java.lang.Object response_;
      public ResponseCase
          getResponseCase() {
        return ResponseCase.forNumber(
            responseCase_);
      }

      public Builder clearResponse() {
        responseCase_ = 0;
        response_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccessOrBuilder> successBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSuccess success = 1;</code>
       * @return Whether the success field is set.
       */
      @java.lang.Override
      public boolean hasSuccess() {
        return responseCase_ == 1;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSuccess success = 1;</code>
       * @return The success.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess getSuccess() {
        if (successBuilder_ == null) {
          if (responseCase_ == 1) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess) response_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.getDefaultInstance();
        } else {
          if (responseCase_ == 1) {
            return successBuilder_.getMessage();
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSuccess success = 1;</code>
       */
      public Builder setSuccess(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess value) {
        if (successBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          response_ = value;
          onChanged();
        } else {
          successBuilder_.setMessage(value);
        }
        responseCase_ = 1;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSuccess success = 1;</code>
       */
      public Builder setSuccess(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.Builder builderForValue) {
        if (successBuilder_ == null) {
          response_ = builderForValue.build();
          onChanged();
        } else {
          successBuilder_.setMessage(builderForValue.build());
        }
        responseCase_ = 1;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSuccess success = 1;</code>
       */
      public Builder mergeSuccess(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess value) {
        if (successBuilder_ == null) {
          if (responseCase_ == 1 &&
              response_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.getDefaultInstance()) {
            response_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.newBuilder((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess) response_)
                .mergeFrom(value).buildPartial();
          } else {
            response_ = value;
          }
          onChanged();
        } else {
          if (responseCase_ == 1) {
            successBuilder_.mergeFrom(value);
          } else {
            successBuilder_.setMessage(value);
          }
        }
        responseCase_ = 1;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSuccess success = 1;</code>
       */
      public Builder clearSuccess() {
        if (successBuilder_ == null) {
          if (responseCase_ == 1) {
            responseCase_ = 0;
            response_ = null;
            onChanged();
          }
        } else {
          if (responseCase_ == 1) {
            responseCase_ = 0;
            response_ = null;
          }
          successBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSuccess success = 1;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.Builder getSuccessBuilder() {
        return getSuccessFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSuccess success = 1;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccessOrBuilder getSuccessOrBuilder() {
        if ((responseCase_ == 1) && (successBuilder_ != null)) {
          return successBuilder_.getMessageOrBuilder();
        } else {
          if (responseCase_ == 1) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess) response_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSuccess success = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccessOrBuilder> 
          getSuccessFieldBuilder() {
        if (successBuilder_ == null) {
          if (!(responseCase_ == 1)) {
            response_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.getDefaultInstance();
          }
          successBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccessOrBuilder>(
                  (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSuccess) response_,
                  getParentForChildren(),
                  isClean());
          response_ = null;
        }
        responseCase_ = 1;
        onChanged();
        return successBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponseOrBuilder> isScriptConfigRegisteredBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;</code>
       * @return Whether the isScriptConfigRegistered field is set.
       */
      @java.lang.Override
      public boolean hasIsScriptConfigRegistered() {
        return responseCase_ == 2;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;</code>
       * @return The isScriptConfigRegistered.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse getIsScriptConfigRegistered() {
        if (isScriptConfigRegisteredBuilder_ == null) {
          if (responseCase_ == 2) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse) response_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.getDefaultInstance();
        } else {
          if (responseCase_ == 2) {
            return isScriptConfigRegisteredBuilder_.getMessage();
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;</code>
       */
      public Builder setIsScriptConfigRegistered(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse value) {
        if (isScriptConfigRegisteredBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          response_ = value;
          onChanged();
        } else {
          isScriptConfigRegisteredBuilder_.setMessage(value);
        }
        responseCase_ = 2;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;</code>
       */
      public Builder setIsScriptConfigRegistered(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.Builder builderForValue) {
        if (isScriptConfigRegisteredBuilder_ == null) {
          response_ = builderForValue.build();
          onChanged();
        } else {
          isScriptConfigRegisteredBuilder_.setMessage(builderForValue.build());
        }
        responseCase_ = 2;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;</code>
       */
      public Builder mergeIsScriptConfigRegistered(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse value) {
        if (isScriptConfigRegisteredBuilder_ == null) {
          if (responseCase_ == 2 &&
              response_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.getDefaultInstance()) {
            response_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.newBuilder((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse) response_)
                .mergeFrom(value).buildPartial();
          } else {
            response_ = value;
          }
          onChanged();
        } else {
          if (responseCase_ == 2) {
            isScriptConfigRegisteredBuilder_.mergeFrom(value);
          } else {
            isScriptConfigRegisteredBuilder_.setMessage(value);
          }
        }
        responseCase_ = 2;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;</code>
       */
      public Builder clearIsScriptConfigRegistered() {
        if (isScriptConfigRegisteredBuilder_ == null) {
          if (responseCase_ == 2) {
            responseCase_ = 0;
            response_ = null;
            onChanged();
          }
        } else {
          if (responseCase_ == 2) {
            responseCase_ = 0;
            response_ = null;
          }
          isScriptConfigRegisteredBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.Builder getIsScriptConfigRegisteredBuilder() {
        return getIsScriptConfigRegisteredFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponseOrBuilder getIsScriptConfigRegisteredOrBuilder() {
        if ((responseCase_ == 2) && (isScriptConfigRegisteredBuilder_ != null)) {
          return isScriptConfigRegisteredBuilder_.getMessageOrBuilder();
        } else {
          if (responseCase_ == 2) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse) response_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponseOrBuilder> 
          getIsScriptConfigRegisteredFieldBuilder() {
        if (isScriptConfigRegisteredBuilder_ == null) {
          if (!(responseCase_ == 2)) {
            response_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.getDefaultInstance();
          }
          isScriptConfigRegisteredBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponseOrBuilder>(
                  (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCIsScriptConfigRegisteredResponse) response_,
                  getParentForChildren(),
                  isClean());
          response_ = null;
        }
        responseCase_ = 2;
        onChanged();
        return isScriptConfigRegisteredBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponseOrBuilder> signNextBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse sign_next = 3;</code>
       * @return Whether the signNext field is set.
       */
      @java.lang.Override
      public boolean hasSignNext() {
        return responseCase_ == 3;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse sign_next = 3;</code>
       * @return The signNext.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse getSignNext() {
        if (signNextBuilder_ == null) {
          if (responseCase_ == 3) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse) response_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.getDefaultInstance();
        } else {
          if (responseCase_ == 3) {
            return signNextBuilder_.getMessage();
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse sign_next = 3;</code>
       */
      public Builder setSignNext(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse value) {
        if (signNextBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          response_ = value;
          onChanged();
        } else {
          signNextBuilder_.setMessage(value);
        }
        responseCase_ = 3;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse sign_next = 3;</code>
       */
      public Builder setSignNext(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Builder builderForValue) {
        if (signNextBuilder_ == null) {
          response_ = builderForValue.build();
          onChanged();
        } else {
          signNextBuilder_.setMessage(builderForValue.build());
        }
        responseCase_ = 3;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse sign_next = 3;</code>
       */
      public Builder mergeSignNext(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse value) {
        if (signNextBuilder_ == null) {
          if (responseCase_ == 3 &&
              response_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.getDefaultInstance()) {
            response_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.newBuilder((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse) response_)
                .mergeFrom(value).buildPartial();
          } else {
            response_ = value;
          }
          onChanged();
        } else {
          if (responseCase_ == 3) {
            signNextBuilder_.mergeFrom(value);
          } else {
            signNextBuilder_.setMessage(value);
          }
        }
        responseCase_ = 3;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse sign_next = 3;</code>
       */
      public Builder clearSignNext() {
        if (signNextBuilder_ == null) {
          if (responseCase_ == 3) {
            responseCase_ = 0;
            response_ = null;
            onChanged();
          }
        } else {
          if (responseCase_ == 3) {
            responseCase_ = 0;
            response_ = null;
          }
          signNextBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse sign_next = 3;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Builder getSignNextBuilder() {
        return getSignNextFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse sign_next = 3;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponseOrBuilder getSignNextOrBuilder() {
        if ((responseCase_ == 3) && (signNextBuilder_ != null)) {
          return signNextBuilder_.getMessageOrBuilder();
        } else {
          if (responseCase_ == 3) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse) response_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignNextResponse sign_next = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponseOrBuilder> 
          getSignNextFieldBuilder() {
        if (signNextBuilder_ == null) {
          if (!(responseCase_ == 3)) {
            response_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.getDefaultInstance();
          }
          signNextBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponseOrBuilder>(
                  (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignNextResponse) response_,
                  getParentForChildren(),
                  isClean());
          response_ = null;
        }
        responseCase_ = 3;
        onChanged();
        return signNextBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponseOrBuilder> signMessageBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse sign_message = 4;</code>
       * @return Whether the signMessage field is set.
       */
      @java.lang.Override
      public boolean hasSignMessage() {
        return responseCase_ == 4;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse sign_message = 4;</code>
       * @return The signMessage.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse getSignMessage() {
        if (signMessageBuilder_ == null) {
          if (responseCase_ == 4) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse) response_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.getDefaultInstance();
        } else {
          if (responseCase_ == 4) {
            return signMessageBuilder_.getMessage();
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse sign_message = 4;</code>
       */
      public Builder setSignMessage(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse value) {
        if (signMessageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          response_ = value;
          onChanged();
        } else {
          signMessageBuilder_.setMessage(value);
        }
        responseCase_ = 4;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse sign_message = 4;</code>
       */
      public Builder setSignMessage(
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.Builder builderForValue) {
        if (signMessageBuilder_ == null) {
          response_ = builderForValue.build();
          onChanged();
        } else {
          signMessageBuilder_.setMessage(builderForValue.build());
        }
        responseCase_ = 4;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse sign_message = 4;</code>
       */
      public Builder mergeSignMessage(com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse value) {
        if (signMessageBuilder_ == null) {
          if (responseCase_ == 4 &&
              response_ != com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.getDefaultInstance()) {
            response_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.newBuilder((com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse) response_)
                .mergeFrom(value).buildPartial();
          } else {
            response_ = value;
          }
          onChanged();
        } else {
          if (responseCase_ == 4) {
            signMessageBuilder_.mergeFrom(value);
          } else {
            signMessageBuilder_.setMessage(value);
          }
        }
        responseCase_ = 4;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse sign_message = 4;</code>
       */
      public Builder clearSignMessage() {
        if (signMessageBuilder_ == null) {
          if (responseCase_ == 4) {
            responseCase_ = 0;
            response_ = null;
            onChanged();
          }
        } else {
          if (responseCase_ == 4) {
            responseCase_ = 0;
            response_ = null;
          }
          signMessageBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse sign_message = 4;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.Builder getSignMessageBuilder() {
        return getSignMessageFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse sign_message = 4;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponseOrBuilder getSignMessageOrBuilder() {
        if ((responseCase_ == 4) && (signMessageBuilder_ != null)) {
          return signMessageBuilder_.getMessageOrBuilder();
        } else {
          if (responseCase_ == 4) {
            return (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse) response_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.BTCSignMessageResponse sign_message = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponseOrBuilder> 
          getSignMessageFieldBuilder() {
        if (signMessageBuilder_ == null) {
          if (!(responseCase_ == 4)) {
            response_ = com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.getDefaultInstance();
          }
          signMessageBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse.Builder, com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponseOrBuilder>(
                  (com.sparrowwallet.lark.bitbox02.generated.Btc.BTCSignMessageResponse) response_,
                  getParentForChildren(),
                  isClean());
          response_ = null;
        }
        responseCase_ = 4;
        onChanged();
        return signMessageBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.Builder, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitmentOrBuilder> antikleptoSignerCommitmentBuilder_;
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;</code>
       * @return Whether the antikleptoSignerCommitment field is set.
       */
      @java.lang.Override
      public boolean hasAntikleptoSignerCommitment() {
        return responseCase_ == 5;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;</code>
       * @return The antikleptoSignerCommitment.
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment getAntikleptoSignerCommitment() {
        if (antikleptoSignerCommitmentBuilder_ == null) {
          if (responseCase_ == 5) {
            return (com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment) response_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.getDefaultInstance();
        } else {
          if (responseCase_ == 5) {
            return antikleptoSignerCommitmentBuilder_.getMessage();
          }
          return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;</code>
       */
      public Builder setAntikleptoSignerCommitment(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment value) {
        if (antikleptoSignerCommitmentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          response_ = value;
          onChanged();
        } else {
          antikleptoSignerCommitmentBuilder_.setMessage(value);
        }
        responseCase_ = 5;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;</code>
       */
      public Builder setAntikleptoSignerCommitment(
          com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.Builder builderForValue) {
        if (antikleptoSignerCommitmentBuilder_ == null) {
          response_ = builderForValue.build();
          onChanged();
        } else {
          antikleptoSignerCommitmentBuilder_.setMessage(builderForValue.build());
        }
        responseCase_ = 5;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;</code>
       */
      public Builder mergeAntikleptoSignerCommitment(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment value) {
        if (antikleptoSignerCommitmentBuilder_ == null) {
          if (responseCase_ == 5 &&
              response_ != com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.getDefaultInstance()) {
            response_ = com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.newBuilder((com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment) response_)
                .mergeFrom(value).buildPartial();
          } else {
            response_ = value;
          }
          onChanged();
        } else {
          if (responseCase_ == 5) {
            antikleptoSignerCommitmentBuilder_.mergeFrom(value);
          } else {
            antikleptoSignerCommitmentBuilder_.setMessage(value);
          }
        }
        responseCase_ = 5;
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;</code>
       */
      public Builder clearAntikleptoSignerCommitment() {
        if (antikleptoSignerCommitmentBuilder_ == null) {
          if (responseCase_ == 5) {
            responseCase_ = 0;
            response_ = null;
            onChanged();
          }
        } else {
          if (responseCase_ == 5) {
            responseCase_ = 0;
            response_ = null;
          }
          antikleptoSignerCommitmentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;</code>
       */
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.Builder getAntikleptoSignerCommitmentBuilder() {
        return getAntikleptoSignerCommitmentFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;</code>
       */
      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitmentOrBuilder getAntikleptoSignerCommitmentOrBuilder() {
        if ((responseCase_ == 5) && (antikleptoSignerCommitmentBuilder_ != null)) {
          return antikleptoSignerCommitmentBuilder_.getMessageOrBuilder();
        } else {
          if (responseCase_ == 5) {
            return (com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment) response_;
          }
          return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.getDefaultInstance();
        }
      }
      /**
       * <code>.com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.Builder, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitmentOrBuilder> 
          getAntikleptoSignerCommitmentFieldBuilder() {
        if (antikleptoSignerCommitmentBuilder_ == null) {
          if (!(responseCase_ == 5)) {
            response_ = com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.getDefaultInstance();
          }
          antikleptoSignerCommitmentBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.Builder, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitmentOrBuilder>(
                  (com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment) response_,
                  getParentForChildren(),
                  isClean());
          response_ = null;
        }
        responseCase_ = 5;
        onChanged();
        return antikleptoSignerCommitmentBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.BTCResponse)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.BTCResponse)
    private static final com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCResponse>
        PARSER = new com.google.protobuf.AbstractParser<BTCResponse>() {
      @java.lang.Override
      public BTCResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Btc.BTCResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Multisig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Multisig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Policy_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Policy_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPubRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPubRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigWithKeypath_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigWithKeypath_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInitRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInitRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignNextResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignNextResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInputRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInputRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_SilentPayment_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_SilentPayment_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigRegistration_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigRegistration_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSuccess_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSuccess_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRegisterScriptConfigRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRegisterScriptConfigRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInitRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInitRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInputRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInputRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxOutputRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxOutputRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_TextMemo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_TextMemo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCResponse_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\tbtc.proto\022)com.sparrowwallet.lark.bitb" +
      "ox02.generated\032\014common.proto\032\020antiklepto" +
      ".proto\"\304\005\n\017BTCScriptConfig\022\\\n\013simple_typ" +
      "e\030\001 \001(\0162E.com.sparrowwallet.lark.bitbox0" +
      "2.generated.BTCScriptConfig.SimpleTypeH\000" +
      "\022W\n\010multisig\030\002 \001(\0132C.com.sparrowwallet.l" +
      "ark.bitbox02.generated.BTCScriptConfig.M" +
      "ultisigH\000\022S\n\006policy\030\003 \001(\0132A.com.sparroww" +
      "allet.lark.bitbox02.generated.BTCScriptC" +
      "onfig.PolicyH\000\032\203\002\n\010Multisig\022\021\n\tthreshold" +
      "\030\001 \001(\r\022>\n\005xpubs\030\002 \003(\0132/.com.sparrowwalle" +
      "t.lark.bitbox02.generated.XPub\022\026\n\016our_xp" +
      "ub_index\030\003 \001(\r\022c\n\013script_type\030\004 \001(\0162N.co" +
      "m.sparrowwallet.lark.bitbox02.generated." +
      "BTCScriptConfig.Multisig.ScriptType\"\'\n\nS" +
      "criptType\022\t\n\005P2WSH\020\000\022\016\n\nP2WSH_P2SH\020\001\032`\n\006" +
      "Policy\022\016\n\006policy\030\001 \001(\t\022F\n\004keys\030\002 \003(\01328.c" +
      "om.sparrowwallet.lark.bitbox02.generated" +
      ".KeyOriginInfo\"3\n\nSimpleType\022\017\n\013P2WPKH_P" +
      "2SH\020\000\022\n\n\006P2WPKH\020\001\022\010\n\004P2TR\020\002B\010\n\006config\"\273\003" +
      "\n\rBTCPubRequest\022@\n\004coin\030\001 \001(\01622.com.spar" +
      "rowwallet.lark.bitbox02.generated.BTCCoi" +
      "n\022\017\n\007keypath\030\002 \003(\r\022V\n\txpub_type\030\003 \001(\0162A." +
      "com.sparrowwallet.lark.bitbox02.generate" +
      "d.BTCPubRequest.XPubTypeH\000\022S\n\rscript_con" +
      "fig\030\004 \001(\0132:.com.sparrowwallet.lark.bitbo" +
      "x02.generated.BTCScriptConfigH\000\022\017\n\007displ" +
      "ay\030\005 \001(\010\"\216\001\n\010XPubType\022\010\n\004TPUB\020\000\022\010\n\004XPUB\020" +
      "\001\022\010\n\004YPUB\020\002\022\010\n\004ZPUB\020\003\022\010\n\004VPUB\020\004\022\010\n\004UPUB\020" +
      "\005\022\020\n\014CAPITAL_VPUB\020\006\022\020\n\014CAPITAL_ZPUB\020\007\022\020\n" +
      "\014CAPITAL_UPUB\020\010\022\020\n\014CAPITAL_YPUB\020\tB\010\n\006out" +
      "put\"\200\001\n\032BTCScriptConfigWithKeypath\022Q\n\rsc" +
      "ript_config\030\002 \001(\0132:.com.sparrowwallet.la" +
      "rk.bitbox02.generated.BTCScriptConfig\022\017\n" +
      "\007keypath\030\003 \003(\r\"\255\003\n\022BTCSignInitRequest\022@\n" +
      "\004coin\030\001 \001(\01622.com.sparrowwallet.lark.bit" +
      "box02.generated.BTCCoin\022]\n\016script_config" +
      "s\030\002 \003(\0132E.com.sparrowwallet.lark.bitbox0" +
      "2.generated.BTCScriptConfigWithKeypath\022\017" +
      "\n\007version\030\004 \001(\r\022\022\n\nnum_inputs\030\005 \001(\r\022\023\n\013n" +
      "um_outputs\030\006 \001(\r\022\020\n\010locktime\030\007 \001(\r\022]\n\013fo" +
      "rmat_unit\030\010 \001(\0162H.com.sparrowwallet.lark" +
      ".bitbox02.generated.BTCSignInitRequest.F" +
      "ormatUnit\022\'\n\037contains_silent_payment_out" +
      "puts\030\t \001(\010\"\"\n\nFormatUnit\022\013\n\007DEFAULT\020\000\022\007\n" +
      "\003SAT\020\001\"\356\003\n\023BTCSignNextResponse\022Q\n\004type\030\001" +
      " \001(\0162C.com.sparrowwallet.lark.bitbox02.g" +
      "enerated.BTCSignNextResponse.Type\022\r\n\005ind" +
      "ex\030\002 \001(\r\022\025\n\rhas_signature\030\003 \001(\010\022\021\n\tsigna" +
      "ture\030\004 \001(\014\022\022\n\nprev_index\030\005 \001(\r\022l\n\035anti_k" +
      "lepto_signer_commitment\030\006 \001(\0132E.com.spar" +
      "rowwallet.lark.bitbox02.generated.AntiKl" +
      "eptoSignerCommitment\022!\n\031generated_output" +
      "_pkscript\030\007 \001(\014\022!\n\031silent_payment_dleq_p" +
      "roof\030\010 \001(\014\"\202\001\n\004Type\022\t\n\005INPUT\020\000\022\n\n\006OUTPUT" +
      "\020\001\022\010\n\004DONE\020\002\022\017\n\013PREVTX_INIT\020\003\022\020\n\014PREVTX_" +
      "INPUT\020\004\022\021\n\rPREVTX_OUTPUT\020\005\022\016\n\nHOST_NONCE" +
      "\020\006\022\023\n\017PAYMENT_REQUEST\020\007\"\377\001\n\023BTCSignInput" +
      "Request\022\023\n\013prevOutHash\030\001 \001(\014\022\024\n\014prevOutI" +
      "ndex\030\002 \001(\r\022\024\n\014prevOutValue\030\003 \001(\004\022\020\n\010sequ" +
      "ence\030\004 \001(\r\022\017\n\007keypath\030\006 \003(\r\022\033\n\023script_co" +
      "nfig_index\030\007 \001(\r\022g\n\025host_nonce_commitmen" +
      "t\030\010 \001(\0132H.com.sparrowwallet.lark.bitbox0" +
      "2.generated.AntiKleptoHostNonceCommitmen" +
      "t\"\201\003\n\024BTCSignOutputRequest\022\014\n\004ours\030\001 \001(\010" +
      "\022F\n\004type\030\002 \001(\01628.com.sparrowwallet.lark." +
      "bitbox02.generated.BTCOutputType\022\r\n\005valu" +
      "e\030\003 \001(\004\022\017\n\007payload\030\004 \001(\014\022\017\n\007keypath\030\005 \003(" +
      "\r\022\033\n\023script_config_index\030\006 \001(\r\022\"\n\025paymen" +
      "t_request_index\030\007 \001(\rH\000\210\001\001\022e\n\016silent_pay" +
      "ment\030\010 \001(\0132M.com.sparrowwallet.lark.bitb" +
      "ox02.generated.BTCSignOutputRequest.Sile" +
      "ntPayment\032 \n\rSilentPayment\022\017\n\007address\030\001 " +
      "\001(\tB\030\n\026_payment_request_index\"\303\001\n\033BTCScr" +
      "iptConfigRegistration\022@\n\004coin\030\001 \001(\01622.co" +
      "m.sparrowwallet.lark.bitbox02.generated." +
      "BTCCoin\022Q\n\rscript_config\030\002 \001(\0132:.com.spa" +
      "rrowwallet.lark.bitbox02.generated.BTCSc" +
      "riptConfig\022\017\n\007keypath\030\003 \003(\r\"\014\n\nBTCSucces" +
      "s\"\202\001\n\"BTCIsScriptConfigRegisteredRequest" +
      "\022\\\n\014registration\030\001 \001(\0132F.com.sparrowwall" +
      "et.lark.bitbox02.generated.BTCScriptConf" +
      "igRegistration\"<\n#BTCIsScriptConfigRegis" +
      "teredResponse\022\025\n\ris_registered\030\001 \001(\010\"\246\002\n" +
      "\036BTCRegisterScriptConfigRequest\022\\\n\014regis" +
      "tration\030\001 \001(\0132F.com.sparrowwallet.lark.b" +
      "itbox02.generated.BTCScriptConfigRegistr" +
      "ation\022\014\n\004name\030\002 \001(\t\022e\n\txpub_type\030\003 \001(\0162R" +
      ".com.sparrowwallet.lark.bitbox02.generat" +
      "ed.BTCRegisterScriptConfigRequest.XPubTy" +
      "pe\"1\n\010XPubType\022\021\n\rAUTO_ELECTRUM\020\000\022\022\n\016AUT" +
      "O_XPUB_TPUB\020\001\"b\n\024BTCPrevTxInitRequest\022\017\n" +
      "\007version\030\001 \001(\r\022\022\n\nnum_inputs\030\002 \001(\r\022\023\n\013nu" +
      "m_outputs\030\003 \001(\r\022\020\n\010locktime\030\004 \001(\r\"r\n\025BTC" +
      "PrevTxInputRequest\022\025\n\rprev_out_hash\030\001 \001(" +
      "\014\022\026\n\016prev_out_index\030\002 \001(\r\022\030\n\020signature_s" +
      "cript\030\003 \001(\014\022\020\n\010sequence\030\004 \001(\r\">\n\026BTCPrev" +
      "TxOutputRequest\022\r\n\005value\030\001 \001(\004\022\025\n\rpubkey" +
      "_script\030\002 \001(\014\"\326\002\n\030BTCPaymentRequestReque" +
      "st\022\026\n\016recipient_name\030\001 \001(\t\022W\n\005memos\030\002 \003(" +
      "\0132H.com.sparrowwallet.lark.bitbox02.gene" +
      "rated.BTCPaymentRequestRequest.Memo\022\r\n\005n" +
      "once\030\003 \001(\014\022\024\n\014total_amount\030\004 \001(\004\022\021\n\tsign" +
      "ature\030\005 \001(\014\032\220\001\n\004Memo\022f\n\ttext_memo\030\001 \001(\0132" +
      "Q.com.sparrowwallet.lark.bitbox02.genera" +
      "ted.BTCPaymentRequestRequest.Memo.TextMe" +
      "moH\000\032\030\n\010TextMemo\022\014\n\004note\030\001 \001(\tB\006\n\004memo\"\255" +
      "\002\n\025BTCSignMessageRequest\022@\n\004coin\030\001 \001(\01622" +
      ".com.sparrowwallet.lark.bitbox02.generat" +
      "ed.BTCCoin\022\\\n\rscript_config\030\002 \001(\0132E.com." +
      "sparrowwallet.lark.bitbox02.generated.BT" +
      "CScriptConfigWithKeypath\022\013\n\003msg\030\003 \001(\014\022g\n" +
      "\025host_nonce_commitment\030\004 \001(\0132H.com.sparr" +
      "owwallet.lark.bitbox02.generated.AntiKle" +
      "ptoHostNonceCommitment\"+\n\026BTCSignMessage" +
      "Response\022\021\n\tsignature\030\001 \001(\014\"\251\006\n\nBTCReque" +
      "st\022t\n\033is_script_config_registered\030\001 \001(\0132" +
      "M.com.sparrowwallet.lark.bitbox02.genera" +
      "ted.BTCIsScriptConfigRegisteredRequestH\000" +
      "\022k\n\026register_script_config\030\002 \001(\0132I.com.s" +
      "parrowwallet.lark.bitbox02.generated.BTC" +
      "RegisterScriptConfigRequestH\000\022V\n\013prevtx_" +
      "init\030\003 \001(\0132?.com.sparrowwallet.lark.bitb" +
      "ox02.generated.BTCPrevTxInitRequestH\000\022X\n" +
      "\014prevtx_input\030\004 \001(\0132@.com.sparrowwallet." +
      "lark.bitbox02.generated.BTCPrevTxInputRe" +
      "questH\000\022Z\n\rprevtx_output\030\005 \001(\0132A.com.spa" +
      "rrowwallet.lark.bitbox02.generated.BTCPr" +
      "evTxOutputRequestH\000\022X\n\014sign_message\030\006 \001(" +
      "\0132@.com.sparrowwallet.lark.bitbox02.gene" +
      "rated.BTCSignMessageRequestH\000\022e\n\024antikle" +
      "pto_signature\030\007 \001(\0132E.com.sparrowwallet." +
      "lark.bitbox02.generated.AntiKleptoSignat" +
      "ureRequestH\000\022^\n\017payment_request\030\010 \001(\0132C." +
      "com.sparrowwallet.lark.bitbox02.generate" +
      "d.BTCPaymentRequestRequestH\000B\t\n\007request\"" +
      "\371\003\n\013BTCResponse\022H\n\007success\030\001 \001(\01325.com.s" +
      "parrowwallet.lark.bitbox02.generated.BTC" +
      "SuccessH\000\022u\n\033is_script_config_registered" +
      "\030\002 \001(\0132N.com.sparrowwallet.lark.bitbox02" +
      ".generated.BTCIsScriptConfigRegisteredRe" +
      "sponseH\000\022S\n\tsign_next\030\003 \001(\0132>.com.sparro" +
      "wwallet.lark.bitbox02.generated.BTCSignN" +
      "extResponseH\000\022Y\n\014sign_message\030\004 \001(\0132A.co" +
      "m.sparrowwallet.lark.bitbox02.generated." +
      "BTCSignMessageResponseH\000\022m\n\034antiklepto_s" +
      "igner_commitment\030\005 \001(\0132E.com.sparrowwall" +
      "et.lark.bitbox02.generated.AntiKleptoSig" +
      "nerCommitmentH\000B\n\n\010response*9\n\007BTCCoin\022\007" +
      "\n\003BTC\020\000\022\010\n\004TBTC\020\001\022\007\n\003LTC\020\002\022\010\n\004TLTC\020\003\022\010\n\004" +
      "RBTC\020\004*R\n\rBTCOutputType\022\013\n\007UNKNOWN\020\000\022\t\n\005" +
      "P2PKH\020\001\022\010\n\004P2SH\020\002\022\n\n\006P2WPKH\020\003\022\t\n\005P2WSH\020\004" +
      "\022\010\n\004P2TR\020\005b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.sparrowwallet.lark.bitbox02.generated.Common.getDescriptor(),
          com.sparrowwallet.lark.bitbox02.generated.Antiklepto.getDescriptor(),
        });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_descriptor,
        new java.lang.String[] { "SimpleType", "Multisig", "Policy", "Config", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Multisig_descriptor =
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_descriptor.getNestedTypes().get(0);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Multisig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Multisig_descriptor,
        new java.lang.String[] { "Threshold", "Xpubs", "OurXpubIndex", "ScriptType", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Policy_descriptor =
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_descriptor.getNestedTypes().get(1);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Policy_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfig_Policy_descriptor,
        new java.lang.String[] { "Policy", "Keys", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPubRequest_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPubRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPubRequest_descriptor,
        new java.lang.String[] { "Coin", "Keypath", "XpubType", "ScriptConfig", "Display", "Output", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigWithKeypath_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigWithKeypath_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigWithKeypath_descriptor,
        new java.lang.String[] { "ScriptConfig", "Keypath", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInitRequest_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInitRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInitRequest_descriptor,
        new java.lang.String[] { "Coin", "ScriptConfigs", "Version", "NumInputs", "NumOutputs", "Locktime", "FormatUnit", "ContainsSilentPaymentOutputs", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignNextResponse_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignNextResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignNextResponse_descriptor,
        new java.lang.String[] { "Type", "Index", "HasSignature", "Signature", "PrevIndex", "AntiKleptoSignerCommitment", "GeneratedOutputPkscript", "SilentPaymentDleqProof", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInputRequest_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInputRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignInputRequest_descriptor,
        new java.lang.String[] { "PrevOutHash", "PrevOutIndex", "PrevOutValue", "Sequence", "Keypath", "ScriptConfigIndex", "HostNonceCommitment", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_descriptor,
        new java.lang.String[] { "Ours", "Type", "Value", "Payload", "Keypath", "ScriptConfigIndex", "PaymentRequestIndex", "SilentPayment", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_SilentPayment_descriptor =
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_descriptor.getNestedTypes().get(0);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_SilentPayment_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignOutputRequest_SilentPayment_descriptor,
        new java.lang.String[] { "Address", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigRegistration_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigRegistration_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCScriptConfigRegistration_descriptor,
        new java.lang.String[] { "Coin", "ScriptConfig", "Keypath", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSuccess_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSuccess_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSuccess_descriptor,
        new java.lang.String[] { });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredRequest_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredRequest_descriptor,
        new java.lang.String[] { "Registration", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredResponse_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCIsScriptConfigRegisteredResponse_descriptor,
        new java.lang.String[] { "IsRegistered", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRegisterScriptConfigRequest_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRegisterScriptConfigRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRegisterScriptConfigRequest_descriptor,
        new java.lang.String[] { "Registration", "Name", "XpubType", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInitRequest_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInitRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInitRequest_descriptor,
        new java.lang.String[] { "Version", "NumInputs", "NumOutputs", "Locktime", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInputRequest_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInputRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxInputRequest_descriptor,
        new java.lang.String[] { "PrevOutHash", "PrevOutIndex", "SignatureScript", "Sequence", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxOutputRequest_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxOutputRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPrevTxOutputRequest_descriptor,
        new java.lang.String[] { "Value", "PubkeyScript", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_descriptor,
        new java.lang.String[] { "RecipientName", "Memos", "Nonce", "TotalAmount", "Signature", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_descriptor =
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_descriptor.getNestedTypes().get(0);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_descriptor,
        new java.lang.String[] { "TextMemo", "Memo", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_TextMemo_descriptor =
      internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_descriptor.getNestedTypes().get(0);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_TextMemo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCPaymentRequestRequest_Memo_TextMemo_descriptor,
        new java.lang.String[] { "Note", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageRequest_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageRequest_descriptor,
        new java.lang.String[] { "Coin", "ScriptConfig", "Msg", "HostNonceCommitment", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageResponse_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCSignMessageResponse_descriptor,
        new java.lang.String[] { "Signature", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRequest_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCRequest_descriptor,
        new java.lang.String[] { "IsScriptConfigRegistered", "RegisterScriptConfig", "PrevtxInit", "PrevtxInput", "PrevtxOutput", "SignMessage", "AntikleptoSignature", "PaymentRequest", "Request", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCResponse_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_BTCResponse_descriptor,
        new java.lang.String[] { "Success", "IsScriptConfigRegistered", "SignNext", "SignMessage", "AntikleptoSignerCommitment", "Response", });
    descriptor.resolveAllFeaturesImmutable();
    com.sparrowwallet.lark.bitbox02.generated.Common.getDescriptor();
    com.sparrowwallet.lark.bitbox02.generated.Antiklepto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
