// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: antiklepto.proto
// Protobuf Java Version: 4.28.3

package com.sparrowwallet.lark.bitbox02.generated;

public final class Antiklepto {
  private Antiklepto() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 28,
      /* patch= */ 3,
      /* suffix= */ "",
      Antiklepto.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface AntiKleptoHostNonceCommitmentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bytes commitment = 1;</code>
     * @return The commitment.
     */
    com.google.protobuf.ByteString getCommitment();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment}
   */
  public static final class AntiKleptoHostNonceCommitment extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment)
      AntiKleptoHostNonceCommitmentOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        AntiKleptoHostNonceCommitment.class.getName());
    }
    // Use AntiKleptoHostNonceCommitment.newBuilder() to construct.
    private AntiKleptoHostNonceCommitment(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private AntiKleptoHostNonceCommitment() {
      commitment_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoHostNonceCommitment_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoHostNonceCommitment_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.class, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.Builder.class);
    }

    public static final int COMMITMENT_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString commitment_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes commitment = 1;</code>
     * @return The commitment.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getCommitment() {
      return commitment_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!commitment_.isEmpty()) {
        output.writeBytes(1, commitment_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!commitment_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, commitment_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment other = (com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment) obj;

      if (!getCommitment()
          .equals(other.getCommitment())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + COMMITMENT_FIELD_NUMBER;
      hash = (53 * hash) + getCommitment().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment)
        com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitmentOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoHostNonceCommitment_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoHostNonceCommitment_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.class, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        commitment_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoHostNonceCommitment_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment build() {
        com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment result = new com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.commitment_ = commitment_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment.getDefaultInstance()) return this;
        if (other.getCommitment() != com.google.protobuf.ByteString.EMPTY) {
          setCommitment(other.getCommitment());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                commitment_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString commitment_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes commitment = 1;</code>
       * @return The commitment.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getCommitment() {
        return commitment_;
      }
      /**
       * <code>bytes commitment = 1;</code>
       * @param value The commitment to set.
       * @return This builder for chaining.
       */
      public Builder setCommitment(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        commitment_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>bytes commitment = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCommitment() {
        bitField0_ = (bitField0_ & ~0x00000001);
        commitment_ = getDefaultInstance().getCommitment();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.AntiKleptoHostNonceCommitment)
    private static final com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AntiKleptoHostNonceCommitment>
        PARSER = new com.google.protobuf.AbstractParser<AntiKleptoHostNonceCommitment>() {
      @java.lang.Override
      public AntiKleptoHostNonceCommitment parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AntiKleptoHostNonceCommitment> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AntiKleptoHostNonceCommitment> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoHostNonceCommitment getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AntiKleptoSignerCommitmentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bytes commitment = 1;</code>
     * @return The commitment.
     */
    com.google.protobuf.ByteString getCommitment();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment}
   */
  public static final class AntiKleptoSignerCommitment extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment)
      AntiKleptoSignerCommitmentOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        AntiKleptoSignerCommitment.class.getName());
    }
    // Use AntiKleptoSignerCommitment.newBuilder() to construct.
    private AntiKleptoSignerCommitment(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private AntiKleptoSignerCommitment() {
      commitment_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignerCommitment_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignerCommitment_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.class, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.Builder.class);
    }

    public static final int COMMITMENT_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString commitment_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes commitment = 1;</code>
     * @return The commitment.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getCommitment() {
      return commitment_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!commitment_.isEmpty()) {
        output.writeBytes(1, commitment_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!commitment_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, commitment_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment other = (com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment) obj;

      if (!getCommitment()
          .equals(other.getCommitment())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + COMMITMENT_FIELD_NUMBER;
      hash = (53 * hash) + getCommitment().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment)
        com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitmentOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignerCommitment_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignerCommitment_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.class, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        commitment_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignerCommitment_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment build() {
        com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment result = new com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.commitment_ = commitment_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment.getDefaultInstance()) return this;
        if (other.getCommitment() != com.google.protobuf.ByteString.EMPTY) {
          setCommitment(other.getCommitment());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                commitment_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString commitment_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes commitment = 1;</code>
       * @return The commitment.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getCommitment() {
        return commitment_;
      }
      /**
       * <code>bytes commitment = 1;</code>
       * @param value The commitment to set.
       * @return This builder for chaining.
       */
      public Builder setCommitment(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        commitment_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>bytes commitment = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCommitment() {
        bitField0_ = (bitField0_ & ~0x00000001);
        commitment_ = getDefaultInstance().getCommitment();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignerCommitment)
    private static final com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AntiKleptoSignerCommitment>
        PARSER = new com.google.protobuf.AbstractParser<AntiKleptoSignerCommitment>() {
      @java.lang.Override
      public AntiKleptoSignerCommitment parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AntiKleptoSignerCommitment> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AntiKleptoSignerCommitment> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignerCommitment getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AntiKleptoSignatureRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bytes host_nonce = 1;</code>
     * @return The hostNonce.
     */
    com.google.protobuf.ByteString getHostNonce();
  }
  /**
   * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest}
   */
  public static final class AntiKleptoSignatureRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest)
      AntiKleptoSignatureRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 3,
        /* suffix= */ "",
        AntiKleptoSignatureRequest.class.getName());
    }
    // Use AntiKleptoSignatureRequest.newBuilder() to construct.
    private AntiKleptoSignatureRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private AntiKleptoSignatureRequest() {
      hostNonce_ = com.google.protobuf.ByteString.EMPTY;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignatureRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignatureRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.class, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.Builder.class);
    }

    public static final int HOST_NONCE_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString hostNonce_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes host_nonce = 1;</code>
     * @return The hostNonce.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getHostNonce() {
      return hostNonce_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!hostNonce_.isEmpty()) {
        output.writeBytes(1, hostNonce_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!hostNonce_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, hostNonce_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest)) {
        return super.equals(obj);
      }
      com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest other = (com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest) obj;

      if (!getHostNonce()
          .equals(other.getHostNonce())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + HOST_NONCE_FIELD_NUMBER;
      hash = (53 * hash) + getHostNonce().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest)
        com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignatureRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignatureRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.class, com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.Builder.class);
      }

      // Construct using com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        hostNonce_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignatureRequest_descriptor;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest getDefaultInstanceForType() {
        return com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest build() {
        com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest buildPartial() {
        com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest result = new com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.hostNonce_ = hostNonce_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest) {
          return mergeFrom((com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest other) {
        if (other == com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest.getDefaultInstance()) return this;
        if (other.getHostNonce() != com.google.protobuf.ByteString.EMPTY) {
          setHostNonce(other.getHostNonce());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                hostNonce_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString hostNonce_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes host_nonce = 1;</code>
       * @return The hostNonce.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getHostNonce() {
        return hostNonce_;
      }
      /**
       * <code>bytes host_nonce = 1;</code>
       * @param value The hostNonce to set.
       * @return This builder for chaining.
       */
      public Builder setHostNonce(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        hostNonce_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>bytes host_nonce = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearHostNonce() {
        bitField0_ = (bitField0_ & ~0x00000001);
        hostNonce_ = getDefaultInstance().getHostNonce();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest)
    }

    // @@protoc_insertion_point(class_scope:com.sparrowwallet.lark.bitbox02.generated.AntiKleptoSignatureRequest)
    private static final com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest();
    }

    public static com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AntiKleptoSignatureRequest>
        PARSER = new com.google.protobuf.AbstractParser<AntiKleptoSignatureRequest>() {
      @java.lang.Override
      public AntiKleptoSignatureRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AntiKleptoSignatureRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AntiKleptoSignatureRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sparrowwallet.lark.bitbox02.generated.Antiklepto.AntiKleptoSignatureRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoHostNonceCommitment_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoHostNonceCommitment_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignerCommitment_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignerCommitment_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignatureRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignatureRequest_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020antiklepto.proto\022)com.sparrowwallet.la" +
      "rk.bitbox02.generated\"3\n\035AntiKleptoHostN" +
      "onceCommitment\022\022\n\ncommitment\030\001 \001(\014\"0\n\032An" +
      "tiKleptoSignerCommitment\022\022\n\ncommitment\030\001" +
      " \001(\014\"0\n\032AntiKleptoSignatureRequest\022\022\n\nho" +
      "st_nonce\030\001 \001(\014b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoHostNonceCommitment_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoHostNonceCommitment_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoHostNonceCommitment_descriptor,
        new java.lang.String[] { "Commitment", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignerCommitment_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignerCommitment_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignerCommitment_descriptor,
        new java.lang.String[] { "Commitment", });
    internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignatureRequest_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignatureRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sparrowwallet_lark_bitbox02_generated_AntiKleptoSignatureRequest_descriptor,
        new java.lang.String[] { "HostNonce", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
